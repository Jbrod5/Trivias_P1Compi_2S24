
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.servidorprincipal.analizadores.consultas;

import java_cup.runtime.*;
import com.jbrod.servidorprincipal.trivias.Motor;
import com.jbrod.servidorprincipal.trivias.Componente;
import com.jbrod.servidorprincipal.trivias.Puntuacion;
import com.jbrod.servidorprincipal.trivias.Usuario;
import com.jbrod.servidorprincipal.trivias.Trivia;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.jbrod.servidorprincipal.trivias.componentes.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserCons extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserCons() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserCons(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCons(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\004\003\000\002\004\005\000\002\004\002" +
    "\000\002\005\005\000\002\005\004\000\002\005\002\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\004\000\002\006\004\000\002\007\005\000\002\010" +
    "\007\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\004\025\004\001\002\000\010\002\ufffc\005" +
    "\010\026\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\010\002" +
    "\ufffe\016\047\026\ufffe\001\002\000\006\002\ufff9\026\012" +
    "\001\002\000\010\027\021\030\015\031\016\001\002\000" +
    "\004\002\uffff\001\002\000\010\002\ufffa\023\040\024\041" +
    "\001\002\000\004\022\034\001\002\000\010\006\024\007" +
    "\023\022\025\001\002\000\010\002\uffef\023\uffef\024\uffef" +
    "\001\002\000\010\002\uffee\023\uffee\024\uffee\001\002\000" +
    "\010\006\024\007\023\022\025\001\002\000\010\002\ufff0" +
    "\023\ufff0\024\ufff0\001\002\000\006\004\ufff7\022\031\001" +
    "\002\000\006\004\ufff8\022\030\001\002\000\004\004\ufff6" +
    "\001\002\000\004\004\027\001\002\000\010\002\ufff3\023" +
    "\ufff3\024\ufff3\001\002\000\004\004\ufff5\001\002\000\004" +
    "\004\ufff4\001\002\000\004\004\033\001\002\000\010\002" +
    "\ufff1\023\ufff1\024\ufff1\001\002\000\004\020\035\001\002" +
    "\000\004\005\036\001\002\000\004\020\037\001\002\000" +
    "\010\002\ufff2\023\ufff2\024\ufff2\001\002\000\010\027\021" +
    "\030\015\031\016\001\002\000\010\027\021\030\015\031" +
    "\016\001\002\000\004\002\ufffb\001\002\000\010\002\uffec" +
    "\023\040\024\041\001\002\000\004\002\uffea\001\002\000" +
    "\010\002\uffed\023\040\024\041\001\002\000\004\002\uffeb" +
    "\001\002\000\010\002\ufffc\005\010\026\ufffc\001\002\000" +
    "\006\002\ufffd\026\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\046\000\006\002\005\003\004\001\001\000\004\004" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\012\007\021\010\016\011\017\012\013\001\001\000\002" +
    "\001\001\000\004\013\041\001\001\000\002\001\001\000" +
    "\004\006\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\021\010\016\011\017\012\044\001\001\000\012\007\021" +
    "\010\016\011\017\012\042\001\001\000\002\001\001\000" +
    "\004\013\043\001\001\000\002\001\001\000\004\013\045" +
    "\001\001\000\002\001\001\000\004\004\047\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCons$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCons$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCons$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String resultado = "";
    private Motor motor;

    //Guarda todas las puntuaciones donde buscar
    private LinkedList<Puntuacion> puntuacionesGenerales = new LinkedList<>(); 
    private LinkedList<Puntuacion> puntuacionesResultantes = new LinkedList<>();
    private LinkedList<Puntuacion> puntuacionesResultado = new LinkedList<>();

    // Conectar el parser al escaner
    public ParserCons(LexerCons lex, Motor motor){
        super(lex);
        this.motor = motor;

        for(Puntuacion p : motor.getPuntuaciones()){
            puntuacionesGenerales.add(p);
        }
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }
    }

    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

   private String secureString(Object o){
        if( o != null){
            return o.toString();
        }else{
            return "";
        }
   }
   private String extractNumber(String str) {
        Pattern pattern = Pattern.compile("\\d+"); // Expresión regular para encontrar números
        Matcher matcher = pattern.matcher(str);
        if (matcher.find()) {
            return matcher.group(); // Retorna la primera coincidencia
        }
        return ""; // Retorna vacío si no hay coincidencias
    }

   private int secureInt(Object o){
        String i = secureString(o);
        String x = extractNumber(i);

        System.out.println("A convertir: " + i);
        try{
            int n = Integer.parseInt(x);
            System.out.println("Convertido: " + n);
            return n;
        }catch(NumberFormatException e){
            System.out.println("Hubo un error al convertir un numero.");
            e.printStackTrace();
            return 10;
        }
   }

   private void imprimir(String st){
        System.out.println(st + "\n\n\n\n");
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserCons$actions {
  private final ParserCons parser;

  /** Constructor */
  CUP$ParserCons$actions(ParserCons parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserCons$do_action_part00000000(
    int                        CUP$ParserCons$act_num,
    java_cup.runtime.lr_parser CUP$ParserCons$parser,
    java.util.Stack            CUP$ParserCons$stack,
    int                        CUP$ParserCons$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCons$result;

      /* select the action based on the action number */
      switch (CUP$ParserCons$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		RESULT = start_val;
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCons$parser.done_parsing();
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= reporte 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reporte ::= SELEC_REPORTE trivias filtrar 
            {
              Object RESULT =null;
		
            for(Puntuacion p : puntuacionesResultado){
                resultado += p.obtenerPuntuacion() + "\n";
            }
        
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("reporte",1, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // trivias ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		  
                        String trivia = secureString(tv);
                        for(Puntuacion p : puntuacionesResultantes){
                            if(trivia.equals(p.getId_trivia())){
                                puntuacionesResultado.add(p);
                            }
                        } 
                    
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("trivias",2, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // trivias ::= IDENTIFICADOR COMMA trivias 
            {
              Object RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)).value;
		  
                    String trivia = secureString(tv);
                    for(Puntuacion p : puntuacionesResultantes){
                        if(trivia.equals(p.getId_trivia())){
                            puntuacionesResultado.add(p);
                        }
                    } 
                
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("trivias",2, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // trivias ::= 
            {
              Object RESULT =null;
		 puntuacionesResultado = puntuacionesResultantes; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("trivias",2, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // filtrar ::= FILTRAR opcion opcion2 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("filtrar",3, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // filtrar ::= FILTRAR opcion 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("filtrar",3, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // filtrar ::= 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("filtrar",3, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // relac ::= MENQUE 
            {
              Object RESULT =null;
		 RESULT = "<" ; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("relac",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // relac ::= MAYQUE 
            {
              Object RESULT =null;
		 RESULT = ">" ; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("relac",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // relac ::= EQUALS 
            {
              Object RESULT =null;
		 RESULT = "=" ; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("relac",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relac ::= MENQUE EQUALS 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("relac",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relac ::= MAYQUE EQUALS 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("relac",4, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tiempo ::= TIEMPO relac NUMERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		

        int n = secureInt(num);
    
        for(Puntuacion p : puntuacionesGenerales){
            switch(secureString(r)){
                case "<":
                    if(p.getTiempo_total() < n) { 
                        puntuacionesResultantes.add(p);
                     }   
                    break;

                case ">":
                    if(p.getTiempo_total() > n) { 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                case "<=":
                    if(p.getTiempo_total() <= n){ 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                case ">=":
                    if(p.getTiempo_total() >= n){ 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                default:
                    if(p.getTiempo_total() == n){ 
                        puntuacionesResultantes.add(p);
                    }
            }
        }

    
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("tiempo",5, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // usuario ::= USUARIO EQUALS COMILL IDENTIFICADOR COMILL 
            {
              Object RESULT =null;
		int usuarioleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).left;
		int usuarioright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).right;
		Object usuario = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		
        String u = secureString(usuario);    
        for(Puntuacion p : puntuacionesGenerales){
                if(u.equals(p.getId_usuario())){
                    puntuacionesResultantes.add(p);
                }
            }
        
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("usuario",6, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // puntuac ::= PUNTUAC relac NUMERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$ParserCons$stack.peek()).value;
		
        int n = secureInt(num);
        //LinkedList<Puntuacion> pn = new LinkedList<>(); 
        for(Puntuacion p : puntuacionesGenerales){
            switch(secureString(r)){
            
                case "<":
                    if(p.getPuntuacion() < n) { puntuacionesResultantes.add(p); }
                    break;

                case ">":
                    if(p.getPuntuacion() > n) { puntuacionesResultantes.add(p); }
                    break;

                case "<=":
                    if(p.getPuntuacion() <= n){ puntuacionesResultantes.add(p); }
                    break;

                case ">=":
                    if(p.getPuntuacion() >= n){ puntuacionesResultantes.add(p); }
                    break;

                default:
                    if(p.getPuntuacion() == n){ puntuacionesResultantes.add(p);}
            }
        }

        //RESULT = pn;
    
              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("puntuac",7, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // opcion ::= tiempo 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion",8, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // opcion ::= usuario 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion",8, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opcion ::= puntuac 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion",8, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // opcion2 ::= AND opcion 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion2",9, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opcion2 ::= OR opcion 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion2",9, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opcion2 ::= AND opcion opcion2 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion2",9, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opcion2 ::= OR opcion opcion2 
            {
              Object RESULT =null;

              CUP$ParserCons$result = parser.getSymbolFactory().newSymbol("opcion2",9, ((java_cup.runtime.Symbol)CUP$ParserCons$stack.elementAt(CUP$ParserCons$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCons$stack.peek()), RESULT);
            }
          return CUP$ParserCons$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserCons$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserCons$do_action(
    int                        CUP$ParserCons$act_num,
    java_cup.runtime.lr_parser CUP$ParserCons$parser,
    java.util.Stack            CUP$ParserCons$stack,
    int                        CUP$ParserCons$top)
    throws java.lang.Exception
    {
              return CUP$ParserCons$do_action_part00000000(
                               CUP$ParserCons$act_num,
                               CUP$ParserCons$parser,
                               CUP$ParserCons$stack,
                               CUP$ParserCons$top);
    }
}

}
