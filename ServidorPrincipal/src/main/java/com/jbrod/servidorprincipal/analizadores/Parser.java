
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.servidorprincipal.analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\004\004\000\002\004\002\000\002\020" +
    "\003\000\002\020\003\000\002\006\067\000\002\007\057" +
    "\000\002\010\037\000\002\011\047\000\002\012\065\000" +
    "\002\013\037\000\002\014\065\000\002\016\047\000\002" +
    "\015\031\000\002\021\003\000\002\021\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\057\000" +
    "\002\024\073\000\002\025\067\000\002\026\067\000\002" +
    "\027\047\000\002\030\067" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0217\000\006\002\ufff3\010\012\001\002\000\004\002" +
    "\ufff8\001\002\000\004\002\ufff6\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\ufff5\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffc\001\002\000\004\012\024\001\002" +
    "\000\004\002\023\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufff7\001\002\000\004" +
    "\002\ufffe\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufff4\001\002\000\004\002\001" +
    "\001\002\000\004\024\025\001\002\000\004\013\026\001" +
    "\002\000\004\022\027\001\002\000\024\026\040\034\032" +
    "\037\037\040\030\041\035\054\033\055\031\056\034\057" +
    "\036\001\002\000\004\022\u01fb\001\002\000\004\022\u01ce" +
    "\001\002\000\004\022\u01a7\001\002\000\004\022\u0190\001" +
    "\002\000\004\022\265\001\002\000\004\022\210\001\002" +
    "\000\004\022\151\001\002\000\004\022\122\001\002\000" +
    "\004\022\041\001\002\000\004\011\042\001\002\000\004" +
    "\014\043\001\002\000\004\022\044\001\002\000\004\027" +
    "\045\001\002\000\004\022\046\001\002\000\004\013\047" +
    "\001\002\000\004\016\050\001\002\000\004\014\051\001" +
    "\002\000\004\022\052\001\002\000\004\030\053\001\002" +
    "\000\004\022\054\001\002\000\004\013\055\001\002\000" +
    "\004\022\056\001\002\000\004\005\057\001\002\000\004" +
    "\022\060\001\002\000\004\020\061\001\002\000\004\022" +
    "\062\001\002\000\004\031\063\001\002\000\004\022\064" +
    "\001\002\000\004\013\065\001\002\000\004\022\066\001" +
    "\002\000\006\005\070\006\067\001\002\000\012\015\ufff1" +
    "\020\ufff1\022\ufff1\023\ufff1\001\002\000\012\015\ufff2\020" +
    "\ufff2\022\ufff2\023\ufff2\001\002\000\004\022\072\001\002" +
    "\000\004\020\073\001\002\000\004\022\074\001\002\000" +
    "\004\032\075\001\002\000\004\022\076\001\002\000\004" +
    "\013\077\001\002\000\004\022\100\001\002\000\006\005" +
    "\070\006\067\001\002\000\004\022\102\001\002\000\004" +
    "\020\103\001\002\000\004\022\104\001\002\000\004\033" +
    "\105\001\002\000\004\022\106\001\002\000\004\013\107" +
    "\001\002\000\004\022\110\001\002\000\006\005\070\006" +
    "\067\001\002\000\004\022\112\001\002\000\004\015\113" +
    "\001\002\000\004\017\114\001\002\000\004\015\115\001" +
    "\002\000\004\010\116\001\002\000\004\025\117\001\002" +
    "\000\004\012\120\001\002\000\004\011\121\001\002\000" +
    "\004\002\ufff0\001\002\000\004\011\123\001\002\000\004" +
    "\014\124\001\002\000\004\022\125\001\002\000\004\027" +
    "\126\001\002\000\004\022\127\001\002\000\004\013\130" +
    "\001\002\000\004\016\131\001\002\000\004\014\132\001" +
    "\002\000\004\022\133\001\002\000\004\030\134\001\002" +
    "\000\004\022\135\001\002\000\004\013\136\001\002\000" +
    "\004\022\137\001\002\000\004\005\140\001\002\000\004" +
    "\022\141\001\002\000\004\015\142\001\002\000\004\017" +
    "\143\001\002\000\004\015\144\001\002\000\004\010\145" +
    "\001\002\000\004\025\146\001\002\000\004\012\147\001" +
    "\002\000\004\011\150\001\002\000\004\002\uffee\001\002" +
    "\000\004\011\152\001\002\000\004\014\153\001\002\000" +
    "\004\022\154\001\002\000\004\060\155\001\002\000\004" +
    "\022\156\001\002\000\004\013\157\001\002\000\004\016" +
    "\160\001\002\000\004\014\161\001\002\000\004\022\162" +
    "\001\002\000\004\061\163\001\002\000\004\022\164\001" +
    "\002\000\004\013\165\001\002\000\004\022\166\001\002" +
    "\000\004\005\167\001\002\000\004\022\170\001\002\000" +
    "\004\020\171\001\002\000\004\022\172\001\002\000\004" +
    "\062\173\001\002\000\004\022\174\001\002\000\004\013" +
    "\175\001\002\000\004\022\176\001\002\000\004\005\177" +
    "\001\002\000\004\022\200\001\002\000\004\015\201\001" +
    "\002\000\004\017\202\001\002\000\004\015\203\001\002" +
    "\000\004\010\204\001\002\000\004\025\205\001\002\000" +
    "\004\012\206\001\002\000\004\011\207\001\002\000\004" +
    "\002\uffe9\001\002\000\004\011\211\001\002\000\004\014" +
    "\212\001\002\000\004\022\213\001\002\000\004\042\214" +
    "\001\002\000\004\022\215\001\002\000\004\013\216\001" +
    "\002\000\004\016\217\001\002\000\004\014\220\001\002" +
    "\000\004\022\221\001\002\000\004\043\222\001\002\000" +
    "\004\022\223\001\002\000\004\013\224\001\002\000\004" +
    "\022\225\001\002\000\004\005\226\001\002\000\004\022" +
    "\227\001\002\000\004\020\230\001\002\000\004\022\231" +
    "\001\002\000\004\044\232\001\002\000\004\022\233\001" +
    "\002\000\004\013\234\001\002\000\004\006\235\001\002" +
    "\000\004\020\236\001\002\000\004\022\237\001\002\000" +
    "\004\032\240\001\002\000\004\022\241\001\002\000\004" +
    "\013\242\001\002\000\004\022\243\001\002\000\006\005" +
    "\070\006\067\001\002\000\004\022\245\001\002\000\004" +
    "\020\246\001\002\000\004\022\247\001\002\000\004\045" +
    "\250\001\002\000\004\022\251\001\002\000\004\013\252" +
    "\001\002\000\004\022\253\001\002\000\006\005\070\006" +
    "\067\001\002\000\004\022\255\001\002\000\004\015\256" +
    "\001\002\000\004\017\257\001\002\000\004\015\260\001" +
    "\002\000\004\010\261\001\002\000\004\025\262\001\002" +
    "\000\004\012\263\001\002\000\004\011\264\001\002\000" +
    "\004\002\uffec\001\002\000\004\011\266\001\002\000\004" +
    "\014\267\001\002\000\004\022\270\001\002\000\004\060" +
    "\271\001\002\000\004\022\272\001\002\000\004\013\273" +
    "\001\002\000\004\016\274\001\002\000\004\014\275\001" +
    "\002\000\004\022\302\001\002\000\004\015\uffe4\001\002" +
    "\000\004\015\u0189\001\002\000\004\015\uffe1\001\002\000" +
    "\004\015\uffe2\001\002\000\004\061\306\001\002\000\004" +
    "\015\uffe5\001\002\000\004\015\uffe3\001\002\000\004\015" +
    "\uffe0\001\002\000\004\022\307\001\002\000\004\013\310" +
    "\001\002\000\004\022\311\001\002\000\004\005\312\001" +
    "\002\000\004\022\313\001\002\000\004\020\314\001\002" +
    "\000\004\022\315\001\002\000\004\062\316\001\002\000" +
    "\004\022\317\001\002\000\004\013\320\001\002\000\004" +
    "\022\321\001\002\000\004\005\322\001\002\000\004\022" +
    "\323\001\002\000\004\020\324\001\002\000\004\022\325" +
    "\001\002\000\004\064\326\001\002\000\004\022\327\001" +
    "\002\000\004\013\330\001\002\000\004\022\331\001\002" +
    "\000\016\046\334\047\335\050\333\051\332\052\337\053" +
    "\336\001\002\000\004\022\u016a\001\002\000\004\022\u014b" +
    "\001\002\000\004\022\u0134\001\002\000\004\022\u0111\001" +
    "\002\000\004\022\357\001\002\000\004\022\340\001\002" +
    "\000\004\020\341\001\002\000\004\022\342\001\002\000" +
    "\004\067\343\001\002\000\004\022\344\001\002\000\004" +
    "\013\345\001\002\000\006\005\070\006\067\001\002\000" +
    "\004\020\347\001\002\000\004\022\350\001\002\000\004" +
    "\065\351\001\002\000\004\022\352\001\002\000\004\013" +
    "\353\001\002\000\004\022\354\001\002\000\006\005\070" +
    "\006\067\001\002\000\004\022\356\001\002\000\004\015" +
    "\uffdb\001\002\000\004\020\360\001\002\000\004\022\361" +
    "\001\002\000\004\067\362\001\002\000\004\022\363\001" +
    "\002\000\004\013\364\001\002\000\006\005\070\006\067" +
    "\001\002\000\004\020\366\001\002\000\004\022\367\001" +
    "\002\000\004\065\370\001\002\000\004\022\371\001\002" +
    "\000\004\013\372\001\002\000\004\022\373\001\002\000" +
    "\006\005\070\006\067\001\002\000\004\022\375\001\002" +
    "\000\004\020\376\001\002\000\004\022\377\001\002\000" +
    "\004\063\u0100\001\002\000\004\022\u0101\001\002\000\004" +
    "\013\u0102\001\002\000\004\022\u0103\001\002\000\006\005" +
    "\070\006\067\001\002\000\004\022\u0105\001\002\000\004" +
    "\020\u0106\001\002\000\004\022\u0107\001\002\000\004\066" +
    "\u0108\001\002\000\004\022\u0109\001\002\000\004\013\u010a" +
    "\001\002\000\004\022\u010b\001\002\000\006\005\070\006" +
    "\067\001\002\000\006\022\uffe7\023\u010f\001\002\000\004" +
    "\022\u010e\001\002\000\004\015\uffda\001\002\000\006\005" +
    "\070\006\067\001\002\000\004\022\uffe6\001\002\000\004" +
    "\020\u0112\001\002\000\004\022\u0113\001\002\000\004\067" +
    "\u0114\001\002\000\004\022\u0115\001\002\000\004\013\u0116" +
    "\001\002\000\006\005\070\006\067\001\002\000\004\020" +
    "\u0118\001\002\000\004\022\u0119\001\002\000\004\065\u011a" +
    "\001\002\000\004\022\u011b\001\002\000\004\013\u011c\001" +
    "\002\000\004\022\u011d\001\002\000\006\005\070\006\067" +
    "\001\002\000\004\022\u011f\001\002\000\004\020\u0120\001" +
    "\002\000\004\022\u0121\001\002\000\004\063\u0122\001\002" +
    "\000\004\022\u0123\001\002\000\004\013\u0124\001\002\000" +
    "\004\022\u0125\001\002\000\006\005\070\006\067\001\002" +
    "\000\004\022\u0127\001\002\000\004\020\u0128\001\002\000" +
    "\004\022\u0129\001\002\000\004\070\u012a\001\002\000\004" +
    "\022\u012b\001\002\000\004\013\u012c\001\002\000\006\005" +
    "\070\006\067\001\002\000\004\020\u012e\001\002\000\004" +
    "\022\u012f\001\002\000\004\071\u0130\001\002\000\004\022" +
    "\u0131\001\002\000\004\013\u0132\001\002\000\006\005\070" +
    "\006\067\001\002\000\004\015\uffde\001\002\000\004\020" +
    "\u0135\001\002\000\004\022\u0136\001\002\000\004\067\u0137" +
    "\001\002\000\004\022\u0138\001\002\000\004\013\u0139\001" +
    "\002\000\006\005\070\006\067\001\002\000\004\020\u013b" +
    "\001\002\000\004\022\u013c\001\002\000\004\065\u013d\001" +
    "\002\000\004\022\u013e\001\002\000\004\013\u013f\001\002" +
    "\000\004\022\u0140\001\002\000\006\005\070\006\067\001" +
    "\002\000\004\022\u0142\001\002\000\004\020\u0143\001\002" +
    "\000\004\022\u0144\001\002\000\004\063\u0145\001\002\000" +
    "\004\022\u0146\001\002\000\004\013\u0147\001\002\000\004" +
    "\022\u0148\001\002\000\006\005\070\006\067\001\002\000" +
    "\004\022\u014a\001\002\000\004\015\uffdf\001\002\000\004" +
    "\020\u014c\001\002\000\004\022\u014d\001\002\000\004\067" +
    "\u014e\001\002\000\004\022\u014f\001\002\000\004\013\u0150" +
    "\001\002\000\006\005\070\006\067\001\002\000\004\020" +
    "\u0152\001\002\000\004\022\u0153\001\002\000\004\065\u0154" +
    "\001\002\000\004\022\u0155\001\002\000\004\013\u0156\001" +
    "\002\000\004\022\u0157\001\002\000\006\005\070\006\067" +
    "\001\002\000\004\022\u0159\001\002\000\004\020\u015a\001" +
    "\002\000\004\022\u015b\001\002\000\004\063\u015c\001\002" +
    "\000\004\022\u015d\001\002\000\004\013\u015e\001\002\000" +
    "\004\022\u015f\001\002\000\006\005\070\006\067\001\002" +
    "\000\004\022\u0161\001\002\000\004\020\u0162\001\002\000" +
    "\004\022\u0163\001\002\000\004\066\u0164\001\002\000\004" +
    "\022\u0165\001\002\000\004\013\u0166\001\002\000\004\022" +
    "\u0167\001\002\000\006\005\070\006\067\001\002\000\004" +
    "\022\u0169\001\002\000\004\015\uffdd\001\002\000\004\020" +
    "\u016b\001\002\000\004\022\u016c\001\002\000\004\067\u016d" +
    "\001\002\000\004\022\u016e\001\002\000\004\013\u016f\001" +
    "\002\000\006\005\070\006\067\001\002\000\004\020\u0171" +
    "\001\002\000\004\022\u0172\001\002\000\004\065\u0173\001" +
    "\002\000\004\022\u0174\001\002\000\004\013\u0175\001\002" +
    "\000\004\022\u0176\001\002\000\006\005\070\006\067\001" +
    "\002\000\004\022\u0178\001\002\000\004\020\u0179\001\002" +
    "\000\004\022\u017a\001\002\000\004\063\u017b\001\002\000" +
    "\004\022\u017c\001\002\000\004\013\u017d\001\002\000\004" +
    "\022\u017e\001\002\000\006\005\070\006\067\001\002\000" +
    "\004\022\u0180\001\002\000\004\020\u0181\001\002\000\004" +
    "\022\u0182\001\002\000\004\066\u0183\001\002\000\004\022" +
    "\u0184\001\002\000\004\013\u0185\001\002\000\004\022\u0186" +
    "\001\002\000\006\005\070\006\067\001\002\000\004\022" +
    "\u0188\001\002\000\004\015\uffdc\001\002\000\004\017\u018a" +
    "\001\002\000\004\015\u018b\001\002\000\004\010\u018c\001" +
    "\002\000\004\025\u018d\001\002\000\004\012\u018e\001\002" +
    "\000\004\011\u018f\001\002\000\004\002\uffe8\001\002\000" +
    "\004\011\u0191\001\002\000\004\014\u0192\001\002\000\004" +
    "\022\u0193\001\002\000\004\042\u0194\001\002\000\004\022" +
    "\u0195\001\002\000\004\013\u0196\001\002\000\004\016\u0197" +
    "\001\002\000\004\014\u0198\001\002\000\004\022\u0199\001" +
    "\002\000\004\043\u019a\001\002\000\004\022\u019b\001\002" +
    "\000\004\013\u019c\001\002\000\004\022\u019d\001\002\000" +
    "\004\005\u019e\001\002\000\004\022\u019f\001\002\000\004" +
    "\015\u01a0\001\002\000\004\017\u01a1\001\002\000\004\015" +
    "\u01a2\001\002\000\004\010\u01a3\001\002\000\004\025\u01a4" +
    "\001\002\000\004\012\u01a5\001\002\000\004\011\u01a6\001" +
    "\002\000\004\002\uffeb\001\002\000\004\011\u01a8\001\002" +
    "\000\004\014\u01a9\001\002\000\004\022\u01aa\001\002\000" +
    "\004\027\u01ab\001\002\000\004\022\u01ac\001\002\000\004" +
    "\013\u01ad\001\002\000\004\016\u01ae\001\002\000\004\014" +
    "\u01af\001\002\000\004\022\u01b0\001\002\000\004\035\u01b1" +
    "\001\002\000\004\022\u01b2\001\002\000\004\013\u01b3\001" +
    "\002\000\004\022\u01b4\001\002\000\004\005\u01b5\001\002" +
    "\000\004\022\u01b6\001\002\000\004\020\u01b7\001\002\000" +
    "\004\022\u01b8\001\002\000\004\026\u01b9\001\002\000\004" +
    "\022\u01ba\001\002\000\004\013\u01bb\001\002\000\004\022" +
    "\u01bc\001\002\000\004\005\u01bd\001\002\000\004\022\u01be" +
    "\001\002\000\004\020\u01bf\001\002\000\004\022\u01c0\001" +
    "\002\000\004\036\u01c1\001\002\000\004\022\u01c2\001\002" +
    "\000\004\013\u01c3\001\002\000\004\022\u01c4\001\002\000" +
    "\006\005\070\006\067\001\002\000\004\022\u01c6\001\002" +
    "\000\004\015\u01c7\001\002\000\004\017\u01c8\001\002\000" +
    "\004\015\u01c9\001\002\000\004\010\u01ca\001\002\000\004" +
    "\025\u01cb\001\002\000\004\012\u01cc\001\002\000\004\011" +
    "\u01cd\001\002\000\004\002\uffef\001\002\000\004\011\u01cf" +
    "\001\002\000\004\014\u01d0\001\002\000\004\022\u01d1\001" +
    "\002\000\004\042\u01d2\001\002\000\004\022\u01d3\001\002" +
    "\000\004\013\u01d4\001\002\000\004\016\u01d5\001\002\000" +
    "\004\014\u01d6\001\002\000\004\022\u01d7\001\002\000\004" +
    "\043\u01d8\001\002\000\004\022\u01d9\001\002\000\004\013" +
    "\u01da\001\002\000\004\022\u01db\001\002\000\006\005\070" +
    "\006\067\001\002\000\004\022\u01dd\001\002\000\004\020" +
    "\u01de\001\002\000\004\022\u01df\001\002\000\004\044\u01e0" +
    "\001\002\000\004\022\u01e1\001\002\000\004\013\u01e2\001" +
    "\002\000\004\006\u01e3\001\002\000\004\020\u01e4\001\002" +
    "\000\004\022\u01e5\001\002\000\004\032\u01e6\001\002\000" +
    "\004\022\u01e7\001\002\000\004\013\u01e8\001\002\000\004" +
    "\022\u01e9\001\002\000\006\005\070\006\067\001\002\000" +
    "\004\022\u01eb\001\002\000\004\020\u01ec\001\002\000\004" +
    "\022\u01ed\001\002\000\004\045\u01ee\001\002\000\004\022" +
    "\u01ef\001\002\000\004\013\u01f0\001\002\000\004\022\u01f1" +
    "\001\002\000\006\005\070\006\067\001\002\000\004\022" +
    "\u01f3\001\002\000\004\015\u01f4\001\002\000\004\017\u01f5" +
    "\001\002\000\004\015\u01f6\001\002\000\004\010\u01f7\001" +
    "\002\000\004\025\u01f8\001\002\000\004\012\u01f9\001\002" +
    "\000\004\011\u01fa\001\002\000\004\002\uffea\001\002\000" +
    "\004\011\u01fc\001\002\000\004\014\u01fd\001\002\000\004" +
    "\022\u01fe\001\002\000\004\027\u01ff\001\002\000\004\022" +
    "\u0200\001\002\000\004\013\u0201\001\002\000\004\016\u0202" +
    "\001\002\000\004\014\u0203\001\002\000\004\022\u0204\001" +
    "\002\000\004\030\u0205\001\002\000\004\022\u0206\001\002" +
    "\000\004\013\u0207\001\002\000\004\022\u0208\001\002\000" +
    "\004\005\u0209\001\002\000\004\022\u020a\001\002\000\004" +
    "\020\u020b\001\002\000\004\022\u020c\001\002\000\004\031" +
    "\u020d\001\002\000\004\022\u020e\001\002\000\004\013\u020f" +
    "\001\002\000\004\022\u0210\001\002\000\006\005\070\006" +
    "\067\001\002\000\004\022\u0212\001\002\000\004\015\u0213" +
    "\001\002\000\004\017\u0214\001\002\000\004\015\u0215\001" +
    "\002\000\004\010\u0216\001\002\000\004\025\u0217\001\002" +
    "\000\004\012\u0218\001\002\000\004\011\u0219\001\002\000" +
    "\004\002\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0217\000\034\002\012\004\007\005\020\006\016\007" +
    "\005\010\010\011\013\012\014\013\017\014\003\015\015" +
    "\016\004\017\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\022\276\023\302\024\275\025" +
    "\303\026\300\027\277\030\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u010b\021\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\u010b" +
    "\021\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u0139" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u0140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u0157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u015f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\u010b\021\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u017e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\u010b\021\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u01db" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u01e9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u01f1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String resultado = "";

    // Conectar el parser al escaner
    public Parser(Lexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }
    }

    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

   private String secureString(Object o){
        if( o != null){
            return o.toString();
        }else{
            return "";
        }
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= solicitud_simple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= solicitudes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // solicitud_simple ::= usuario_nuevo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // solicitud_simple ::= modificar_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // solicitud_simple ::= eliminar_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // solicitud_simple ::= login_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitud_simple ::= nueva_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitud_simple ::= eliminar_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // solicitud_simple ::= modificar_parametros_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // solicitud_simple ::= agregar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // solicitud_simple ::= eliminar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // solicitud_simple ::= modificar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // solicitudes ::= solicitud_simple solicitud 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // solicitudes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_st ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // id_st ::= STRING 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // usuario_nuevo ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL USUARIO_NUEV COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL PASSWORD COMILL DOSPUN COMILL id_st COMILL COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL INSTITUCION COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Usuario nuevo: " +  id.toString() + " " + ps.toString() + " " + nm.toString() + " " + in.toString () + "\n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usuario_nuevo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // modificar_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL MODI_USUARIO COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUA_ANTIGUO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL USUARIO_NUEV COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL NUEVO_PASSWO COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Modificar usuario: " + id.toString() + " " + nid.toString() + " " + ps.toString() + "\n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificar_usuario",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-44)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // eliminar_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_USU COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar usuario: " + id.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_usuario",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // login_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL LOGIN_USUARI COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL PASSWORD COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Login: " + id.toString() + " " + ps.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("login_usuario",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nueva_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL NUEVA_TRIVIA COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TIEMPO_PREGU COMILL DOSPUN STRING COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TEMA COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Nueva trivia: " + id.toString() + " " + tp.toString()+ " " + nm.toString() + " " + tm.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nueva_trivia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-50)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // eliminar_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_TRI COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar trivia: " + id.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_trivia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modificar_parametros_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL MODIF_TRIVIA COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TIEMPO_PREGU COMILL DOSPUN STRING COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TEMA COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Modificar trivia: " + id.toString() + " " + tp.toString()+ " " + nm.toString() + " " + tm.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificar_parametros_trivia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-50)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // eliminar_componente_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_COM COMILL MAYQUE LLAVOP COMILL PARAMETROS_C COMILL DOSPUN COROPN LLAVOP COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar componente: " + cm.toString() + " " + tr.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_componente_trivia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // agregar_componente_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL AGREGAR_COMP COMILL MAYQUE LLAVOP COMILL PARAMETROS_C COMILL DOSPUN COROPN LLAVOP componente_trivia LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
                resultado += "Agregar componente: " + c.toString() + " \n";
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agregar_componente_trivia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones ::= id_st 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones ::= id_st ORSYMB opciones 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString() + "|" + opcs.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // componente_trivia ::= campo_texto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // componente_trivia ::= area_texto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // componente_trivia ::= checkbox 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // componente_trivia ::= radio 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // componente_trivia ::= fichero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // componente_trivia ::= combo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // campo_texto ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL CAMPO_TEXTO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL id_st COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  "Campo de texto: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo_texto",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-44)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // area_texto ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL AREA_TEXTO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL FILAS COMILL DOSPUN id_st COMMA COMILL COLUMNAS COMILL DOSPUN id_st 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-51)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-43)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-43)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-43)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =  "Area de texto: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + secureString(fl)+ " " + secureString(cl) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("area_texto",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-56)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // checkbox ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL CHECKBOX COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  "Checkbox: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("checkbox",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // radio ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL RADIO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  "Radio: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("radio",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // fichero ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL FICHERO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  "Fichero: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fichero",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // combo ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL COMBO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =  "Combo: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("combo",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
