
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.servidorprincipal.analizadores;

import java_cup.runtime.*;
import com.jbrod.servidorprincipal.trivias.Motor;
import com.jbrod.servidorprincipal.trivias.Componente;
import com.jbrod.servidorprincipal.trivias.Usuario;
import com.jbrod.servidorprincipal.trivias.Trivia;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.jbrod.servidorprincipal.trivias.componentes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\020" +
    "\003\000\002\020\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\032\054\000\002\006\067\000\002\007\057\000\002" +
    "\010\037\000\002\011\047\000\002\012\065\000\002\013" +
    "\037\000\002\014\065\000\002\016\047\000\002\015\031" +
    "\000\002\017\031\000\002\021\003\000\002\021\005\000" +
    "\002\022\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\057\000\002\025\073\000\002\026\067" +
    "\000\002\027\067\000\002\030\047\000\002\031\067" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0255\000\006\002\ufffe\010\013\001\002\000\006\002" +
    "\ufff3\010\ufff3\001\002\000\006\002\ufff7\010\ufff7\001\002" +
    "\000\006\002\ufff5\010\ufff5\001\002\000\006\002\ufffc\010" +
    "\ufffc\001\002\000\006\002\ufff4\010\ufff4\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffb\010\ufffb\001\002\000" +
    "\004\012\025\001\002\000\004\002\024\001\002\000\006" +
    "\002\ufffa\010\ufffa\001\002\000\006\002\ufff9\010\ufff9\001" +
    "\002\000\006\002\ufffd\010\ufffd\001\002\000\006\002\ufff6" +
    "\010\ufff6\001\002\000\006\002\ufff8\010\ufff8\001\002\000" +
    "\006\002\ufffe\010\013\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\004\024\026\001\002\000" +
    "\004\013\027\001\002\000\004\022\030\001\002\000\030" +
    "\026\043\034\034\037\042\040\031\041\037\054\035\055" +
    "\033\056\036\057\040\060\041\073\032\001\002\000\004" +
    "\022\u0239\001\002\000\004\022\u0210\001\002\000\004\022" +
    "\u01e3\001\002\000\004\022\u01bc\001\002\000\004\022\u01a5" +
    "\001\002\000\004\022\u0194\001\002\000\004\022\u0167\001" +
    "\002\000\004\022\u0148\001\002\000\004\022\154\001\002" +
    "\000\004\022\125\001\002\000\004\022\044\001\002\000" +
    "\004\011\045\001\002\000\004\014\046\001\002\000\004" +
    "\022\047\001\002\000\004\027\050\001\002\000\004\022" +
    "\051\001\002\000\004\013\052\001\002\000\004\016\053" +
    "\001\002\000\004\014\054\001\002\000\004\022\055\001" +
    "\002\000\004\030\056\001\002\000\004\022\057\001\002" +
    "\000\004\013\060\001\002\000\004\022\061\001\002\000" +
    "\004\005\062\001\002\000\004\022\063\001\002\000\004" +
    "\020\064\001\002\000\004\022\065\001\002\000\004\031" +
    "\066\001\002\000\004\022\067\001\002\000\004\013\070" +
    "\001\002\000\004\022\071\001\002\000\006\005\073\006" +
    "\072\001\002\000\012\015\ufff1\020\ufff1\022\ufff1\023\ufff1" +
    "\001\002\000\012\015\ufff2\020\ufff2\022\ufff2\023\ufff2\001" +
    "\002\000\004\022\075\001\002\000\004\020\076\001\002" +
    "\000\004\022\077\001\002\000\004\032\100\001\002\000" +
    "\004\022\101\001\002\000\004\013\102\001\002\000\004" +
    "\022\103\001\002\000\006\005\073\006\072\001\002\000" +
    "\004\022\105\001\002\000\004\020\106\001\002\000\004" +
    "\022\107\001\002\000\004\033\110\001\002\000\004\022" +
    "\111\001\002\000\004\013\112\001\002\000\004\022\113" +
    "\001\002\000\006\005\073\006\072\001\002\000\004\022" +
    "\115\001\002\000\004\015\116\001\002\000\004\017\117" +
    "\001\002\000\004\015\120\001\002\000\004\010\121\001" +
    "\002\000\004\025\122\001\002\000\004\012\123\001\002" +
    "\000\004\011\124\001\002\000\006\002\uffea\010\uffea\001" +
    "\002\000\004\011\126\001\002\000\004\014\127\001\002" +
    "\000\004\022\130\001\002\000\004\027\131\001\002\000" +
    "\004\022\132\001\002\000\004\013\133\001\002\000\004" +
    "\016\134\001\002\000\004\014\135\001\002\000\004\022" +
    "\136\001\002\000\004\030\137\001\002\000\004\022\140" +
    "\001\002\000\004\013\141\001\002\000\004\022\142\001" +
    "\002\000\004\005\143\001\002\000\004\022\144\001\002" +
    "\000\004\015\145\001\002\000\004\017\146\001\002\000" +
    "\004\015\147\001\002\000\004\010\150\001\002\000\004" +
    "\025\151\001\002\000\004\012\152\001\002\000\004\011" +
    "\153\001\002\000\006\002\uffe8\010\uffe8\001\002\000\004" +
    "\011\155\001\002\000\004\014\156\001\002\000\004\022" +
    "\157\001\002\000\004\061\160\001\002\000\004\022\161" +
    "\001\002\000\004\013\162\001\002\000\004\016\163\001" +
    "\002\000\004\014\164\001\002\000\004\022\171\001\002" +
    "\000\004\015\u0141\001\002\000\004\015\uffdc\001\002\000" +
    "\004\015\uffda\001\002\000\004\015\uffd9\001\002\000\004" +
    "\062\175\001\002\000\004\015\uffdd\001\002\000\004\015" +
    "\uffdb\001\002\000\004\015\uffd8\001\002\000\004\022\176" +
    "\001\002\000\004\013\177\001\002\000\004\022\200\001" +
    "\002\000\004\005\201\001\002\000\004\022\202\001\002" +
    "\000\004\020\203\001\002\000\004\022\204\001\002\000" +
    "\004\063\205\001\002\000\004\022\206\001\002\000\004" +
    "\013\207\001\002\000\004\022\210\001\002\000\004\005" +
    "\211\001\002\000\004\022\212\001\002\000\004\020\213" +
    "\001\002\000\004\022\214\001\002\000\004\065\215\001" +
    "\002\000\004\022\216\001\002\000\004\013\217\001\002" +
    "\000\004\022\220\001\002\000\016\046\222\047\224\050" +
    "\223\051\221\052\226\053\225\001\002\000\004\022\u0122" +
    "\001\002\000\004\022\u010b\001\002\000\004\022\354\001" +
    "\002\000\004\022\311\001\002\000\004\022\246\001\002" +
    "\000\004\022\227\001\002\000\004\020\230\001\002\000" +
    "\004\022\231\001\002\000\004\070\232\001\002\000\004" +
    "\022\233\001\002\000\004\013\234\001\002\000\006\005" +
    "\073\006\072\001\002\000\004\020\236\001\002\000\004" +
    "\022\237\001\002\000\004\066\240\001\002\000\004\022" +
    "\241\001\002\000\004\013\242\001\002\000\004\022\243" +
    "\001\002\000\006\005\073\006\072\001\002\000\004\022" +
    "\245\001\002\000\004\015\uffd3\001\002\000\004\020\247" +
    "\001\002\000\004\022\250\001\002\000\004\070\251\001" +
    "\002\000\004\022\252\001\002\000\004\013\253\001\002" +
    "\000\006\005\073\006\072\001\002\000\004\020\255\001" +
    "\002\000\004\022\256\001\002\000\004\066\257\001\002" +
    "\000\004\022\260\001\002\000\004\013\261\001\002\000" +
    "\004\022\262\001\002\000\006\005\073\006\072\001\002" +
    "\000\004\022\264\001\002\000\004\020\265\001\002\000" +
    "\004\022\266\001\002\000\004\064\267\001\002\000\004" +
    "\022\270\001\002\000\004\013\271\001\002\000\004\022" +
    "\272\001\002\000\006\005\073\006\072\001\002\000\004" +
    "\022\300\001\002\000\006\022\uffe0\023\276\001\002\000" +
    "\004\022\uffde\001\002\000\006\005\073\006\072\001\002" +
    "\000\004\022\uffdf\001\002\000\004\020\301\001\002\000" +
    "\004\022\302\001\002\000\004\067\303\001\002\000\004" +
    "\022\304\001\002\000\004\013\305\001\002\000\004\022" +
    "\306\001\002\000\006\005\073\006\072\001\002\000\004" +
    "\022\310\001\002\000\004\015\uffd2\001\002\000\004\020" +
    "\312\001\002\000\004\022\313\001\002\000\004\070\314" +
    "\001\002\000\004\022\315\001\002\000\004\013\316\001" +
    "\002\000\006\005\073\006\072\001\002\000\004\020\320" +
    "\001\002\000\004\022\321\001\002\000\004\066\322\001" +
    "\002\000\004\022\323\001\002\000\004\013\324\001\002" +
    "\000\004\022\325\001\002\000\006\005\073\006\072\001" +
    "\002\000\004\022\327\001\002\000\004\020\330\001\002" +
    "\000\004\022\331\001\002\000\004\064\332\001\002\000" +
    "\004\022\333\001\002\000\004\013\334\001\002\000\004" +
    "\022\335\001\002\000\006\005\073\006\072\001\002\000" +
    "\004\022\337\001\002\000\004\020\340\001\002\000\004" +
    "\022\341\001\002\000\004\071\342\001\002\000\004\022" +
    "\343\001\002\000\004\013\344\001\002\000\006\005\073" +
    "\006\072\001\002\000\004\020\346\001\002\000\004\022" +
    "\347\001\002\000\004\072\350\001\002\000\004\022\351" +
    "\001\002\000\004\013\352\001\002\000\006\005\073\006" +
    "\072\001\002\000\004\015\uffd6\001\002\000\004\020\355" +
    "\001\002\000\004\022\356\001\002\000\004\070\357\001" +
    "\002\000\004\022\360\001\002\000\004\013\361\001\002" +
    "\000\006\005\073\006\072\001\002\000\004\020\363\001" +
    "\002\000\004\022\364\001\002\000\004\066\365\001\002" +
    "\000\004\022\366\001\002\000\004\013\367\001\002\000" +
    "\004\022\370\001\002\000\006\005\073\006\072\001\002" +
    "\000\004\022\372\001\002\000\004\020\373\001\002\000" +
    "\004\022\374\001\002\000\004\064\375\001\002\000\004" +
    "\022\376\001\002\000\004\013\377\001\002\000\004\022" +
    "\u0100\001\002\000\006\005\073\006\072\001\002\000\004" +
    "\022\u0102\001\002\000\004\020\u0103\001\002\000\004\022" +
    "\u0104\001\002\000\004\067\u0105\001\002\000\004\022\u0106" +
    "\001\002\000\004\013\u0107\001\002\000\004\022\u0108\001" +
    "\002\000\006\005\073\006\072\001\002\000\004\022\u010a" +
    "\001\002\000\004\015\uffd5\001\002\000\004\020\u010c\001" +
    "\002\000\004\022\u010d\001\002\000\004\070\u010e\001\002" +
    "\000\004\022\u010f\001\002\000\004\013\u0110\001\002\000" +
    "\006\005\073\006\072\001\002\000\004\020\u0112\001\002" +
    "\000\004\022\u0113\001\002\000\004\066\u0114\001\002\000" +
    "\004\022\u0115\001\002\000\004\013\u0116\001\002\000\004" +
    "\022\u0117\001\002\000\006\005\073\006\072\001\002\000" +
    "\004\022\u0119\001\002\000\004\020\u011a\001\002\000\004" +
    "\022\u011b\001\002\000\004\064\u011c\001\002\000\004\022" +
    "\u011d\001\002\000\004\013\u011e\001\002\000\004\022\u011f" +
    "\001\002\000\006\005\073\006\072\001\002\000\004\022" +
    "\u0121\001\002\000\004\015\uffd7\001\002\000\004\020\u0123" +
    "\001\002\000\004\022\u0124\001\002\000\004\070\u0125\001" +
    "\002\000\004\022\u0126\001\002\000\004\013\u0127\001\002" +
    "\000\006\005\073\006\072\001\002\000\004\020\u0129\001" +
    "\002\000\004\022\u012a\001\002\000\004\066\u012b\001\002" +
    "\000\004\022\u012c\001\002\000\004\013\u012d\001\002\000" +
    "\004\022\u012e\001\002\000\006\005\073\006\072\001\002" +
    "\000\004\022\u0130\001\002\000\004\020\u0131\001\002\000" +
    "\004\022\u0132\001\002\000\004\064\u0133\001\002\000\004" +
    "\022\u0134\001\002\000\004\013\u0135\001\002\000\004\022" +
    "\u0136\001\002\000\006\005\073\006\072\001\002\000\004" +
    "\022\u0138\001\002\000\004\020\u0139\001\002\000\004\022" +
    "\u013a\001\002\000\004\067\u013b\001\002\000\004\022\u013c" +
    "\001\002\000\004\013\u013d\001\002\000\004\022\u013e\001" +
    "\002\000\006\005\073\006\072\001\002\000\004\022\u0140" +
    "\001\002\000\004\015\uffd4\001\002\000\004\017\u0142\001" +
    "\002\000\004\015\u0143\001\002\000\004\010\u0144\001\002" +
    "\000\004\025\u0145\001\002\000\004\012\u0146\001\002\000" +
    "\004\011\u0147\001\002\000\006\002\uffe1\010\uffe1\001\002" +
    "\000\004\011\u0149\001\002\000\004\014\u014a\001\002\000" +
    "\004\022\u014b\001\002\000\004\061\u014c\001\002\000\004" +
    "\022\u014d\001\002\000\004\013\u014e\001\002\000\004\016" +
    "\u014f\001\002\000\004\014\u0150\001\002\000\004\022\u0151" +
    "\001\002\000\004\062\u0152\001\002\000\004\022\u0153\001" +
    "\002\000\004\013\u0154\001\002\000\004\022\u0155\001\002" +
    "\000\004\005\u0156\001\002\000\004\022\u0157\001\002\000" +
    "\004\020\u0158\001\002\000\004\022\u0159\001\002\000\004" +
    "\063\u015a\001\002\000\004\022\u015b\001\002\000\004\013" +
    "\u015c\001\002\000\004\022\u015d\001\002\000\004\005\u015e" +
    "\001\002\000\004\022\u015f\001\002\000\004\015\u0160\001" +
    "\002\000\004\017\u0161\001\002\000\004\015\u0162\001\002" +
    "\000\004\010\u0163\001\002\000\004\025\u0164\001\002\000" +
    "\004\012\u0165\001\002\000\004\011\u0166\001\002\000\006" +
    "\002\uffe3\010\uffe3\001\002\000\004\011\u0168\001\002\000" +
    "\004\014\u0169\001\002\000\004\022\u016a\001\002\000\004" +
    "\042\u016b\001\002\000\004\022\u016c\001\002\000\004\013" +
    "\u016d\001\002\000\004\016\u016e\001\002\000\004\014\u016f" +
    "\001\002\000\004\022\u0170\001\002\000\004\043\u0171\001" +
    "\002\000\004\022\u0172\001\002\000\004\013\u0173\001\002" +
    "\000\004\022\u0174\001\002\000\004\005\u0175\001\002\000" +
    "\004\022\u0176\001\002\000\004\020\u0177\001\002\000\004" +
    "\022\u0178\001\002\000\004\044\u0179\001\002\000\004\022" +
    "\u017a\001\002\000\004\013\u017b\001\002\000\004\006\u017c" +
    "\001\002\000\004\020\u017d\001\002\000\004\022\u017e\001" +
    "\002\000\004\032\u017f\001\002\000\004\022\u0180\001\002" +
    "\000\004\013\u0181\001\002\000\004\022\u0182\001\002\000" +
    "\006\005\073\006\072\001\002\000\004\022\u0184\001\002" +
    "\000\004\020\u0185\001\002\000\004\022\u0186\001\002\000" +
    "\004\045\u0187\001\002\000\004\022\u0188\001\002\000\004" +
    "\013\u0189\001\002\000\004\022\u018a\001\002\000\006\005" +
    "\073\006\072\001\002\000\004\022\u018c\001\002\000\004" +
    "\015\u018d\001\002\000\004\017\u018e\001\002\000\004\015" +
    "\u018f\001\002\000\004\010\u0190\001\002\000\004\025\u0191" +
    "\001\002\000\004\012\u0192\001\002\000\004\011\u0193\001" +
    "\002\000\006\002\uffe6\010\uffe6\001\002\000\004\011\u0195" +
    "\001\002\000\004\014\u0196\001\002\000\004\022\u0197\001" +
    "\002\000\004\061\u0198\001\002\000\004\022\u0199\001\002" +
    "\000\004\013\u019a\001\002\000\004\016\u019b\001\002\000" +
    "\004\014\u019c\001\002\000\004\022\171\001\002\000\004" +
    "\015\u019e\001\002\000\004\017\u019f\001\002\000\004\015" +
    "\u01a0\001\002\000\004\010\u01a1\001\002\000\004\025\u01a2" +
    "\001\002\000\004\012\u01a3\001\002\000\004\011\u01a4\001" +
    "\002\000\006\002\uffe2\010\uffe2\001\002\000\004\011\u01a6" +
    "\001\002\000\004\014\u01a7\001\002\000\004\022\u01a8\001" +
    "\002\000\004\042\u01a9\001\002\000\004\022\u01aa\001\002" +
    "\000\004\013\u01ab\001\002\000\004\016\u01ac\001\002\000" +
    "\004\014\u01ad\001\002\000\004\022\u01ae\001\002\000\004" +
    "\043\u01af\001\002\000\004\022\u01b0\001\002\000\004\013" +
    "\u01b1\001\002\000\004\022\u01b2\001\002\000\004\005\u01b3" +
    "\001\002\000\004\022\u01b4\001\002\000\004\015\u01b5\001" +
    "\002\000\004\017\u01b6\001\002\000\004\015\u01b7\001\002" +
    "\000\004\010\u01b8\001\002\000\004\025\u01b9\001\002\000" +
    "\004\012\u01ba\001\002\000\004\011\u01bb\001\002\000\006" +
    "\002\uffe5\010\uffe5\001\002\000\004\011\u01bd\001\002\000" +
    "\004\014\u01be\001\002\000\004\022\u01bf\001\002\000\004" +
    "\027\u01c0\001\002\000\004\022\u01c1\001\002\000\004\013" +
    "\u01c2\001\002\000\004\016\u01c3\001\002\000\004\014\u01c4" +
    "\001\002\000\004\022\u01c5\001\002\000\004\035\u01c6\001" +
    "\002\000\004\022\u01c7\001\002\000\004\013\u01c8\001\002" +
    "\000\004\022\u01c9\001\002\000\004\005\u01ca\001\002\000" +
    "\004\022\u01cb\001\002\000\004\020\u01cc\001\002\000\004" +
    "\022\u01cd\001\002\000\004\026\u01ce\001\002\000\004\022" +
    "\u01cf\001\002\000\004\013\u01d0\001\002\000\004\022\u01d1" +
    "\001\002\000\004\005\u01d2\001\002\000\004\022\u01d3\001" +
    "\002\000\004\020\u01d4\001\002\000\004\022\u01d5\001\002" +
    "\000\004\036\u01d6\001\002\000\004\022\u01d7\001\002\000" +
    "\004\013\u01d8\001\002\000\004\022\u01d9\001\002\000\006" +
    "\005\073\006\072\001\002\000\004\022\u01db\001\002\000" +
    "\004\015\u01dc\001\002\000\004\017\u01dd\001\002\000\004" +
    "\015\u01de\001\002\000\004\010\u01df\001\002\000\004\025" +
    "\u01e0\001\002\000\004\012\u01e1\001\002\000\004\011\u01e2" +
    "\001\002\000\006\002\uffe9\010\uffe9\001\002\000\004\011" +
    "\u01e4\001\002\000\004\014\u01e5\001\002\000\004\022\u01e6" +
    "\001\002\000\004\042\u01e7\001\002\000\004\022\u01e8\001" +
    "\002\000\004\013\u01e9\001\002\000\004\016\u01ea\001\002" +
    "\000\004\014\u01eb\001\002\000\004\022\u01ec\001\002\000" +
    "\004\043\u01ed\001\002\000\004\022\u01ee\001\002\000\004" +
    "\013\u01ef\001\002\000\004\022\u01f0\001\002\000\006\005" +
    "\073\006\072\001\002\000\004\022\u01f2\001\002\000\004" +
    "\020\u01f3\001\002\000\004\022\u01f4\001\002\000\004\044" +
    "\u01f5\001\002\000\004\022\u01f6\001\002\000\004\013\u01f7" +
    "\001\002\000\004\006\u01f8\001\002\000\004\020\u01f9\001" +
    "\002\000\004\022\u01fa\001\002\000\004\032\u01fb\001\002" +
    "\000\004\022\u01fc\001\002\000\004\013\u01fd\001\002\000" +
    "\004\022\u01fe\001\002\000\006\005\073\006\072\001\002" +
    "\000\004\022\u0200\001\002\000\004\020\u0201\001\002\000" +
    "\004\022\u0202\001\002\000\004\045\u0203\001\002\000\004" +
    "\022\u0204\001\002\000\004\013\u0205\001\002\000\004\022" +
    "\u0206\001\002\000\006\005\073\006\072\001\002\000\004" +
    "\022\u0208\001\002\000\004\015\u0209\001\002\000\004\017" +
    "\u020a\001\002\000\004\015\u020b\001\002\000\004\010\u020c" +
    "\001\002\000\004\025\u020d\001\002\000\004\012\u020e\001" +
    "\002\000\004\011\u020f\001\002\000\006\002\uffe4\010\uffe4" +
    "\001\002\000\004\011\u0211\001\002\000\004\014\u0212\001" +
    "\002\000\004\022\u0213\001\002\000\004\074\u0214\001\002" +
    "\000\004\022\u0215\001\002\000\004\013\u0216\001\002\000" +
    "\004\016\u0217\001\002\000\004\014\u0218\001\002\000\004" +
    "\022\u0219\001\002\000\014\006\u021b\030\u021c\063\u021d\075" +
    "\u021f\076\u021e\001\002\000\004\022\u0220\001\002\000\004" +
    "\022\ufff0\001\002\000\004\022\uffef\001\002\000\004\022" +
    "\uffee\001\002\000\004\022\uffed\001\002\000\004\022\uffec" +
    "\001\002\000\004\013\u0221\001\002\000\006\005\073\006" +
    "\072\001\002\000\004\022\u0223\001\002\000\014\006\u021b" +
    "\030\u021c\063\u021d\075\u021f\076\u021e\001\002\000\004\022" +
    "\u0225\001\002\000\004\013\u0226\001\002\000\006\005\073" +
    "\006\072\001\002\000\004\022\u0228\001\002\000\014\006" +
    "\u021b\030\u021c\063\u021d\075\u021f\076\u021e\001\002\000\004" +
    "\022\u022a\001\002\000\004\013\u022b\001\002\000\004\006" +
    "\u022c\001\002\000\004\022\u022d\001\002\000\014\006\u021b" +
    "\030\u021c\063\u021d\075\u021f\076\u021e\001\002\000\004\022" +
    "\u022f\001\002\000\004\013\u0230\001\002\000\004\006\u0231" +
    "\001\002\000\004\015\u0232\001\002\000\004\017\u0233\001" +
    "\002\000\004\015\u0234\001\002\000\004\010\u0235\001\002" +
    "\000\004\025\u0236\001\002\000\004\012\u0237\001\002\000" +
    "\004\011\u0238\001\002\000\006\002\uffeb\010\uffeb\001\002" +
    "\000\004\011\u023a\001\002\000\004\014\u023b\001\002\000" +
    "\004\022\u023c\001\002\000\004\027\u023d\001\002\000\004" +
    "\022\u023e\001\002\000\004\013\u023f\001\002\000\004\016" +
    "\u0240\001\002\000\004\014\u0241\001\002\000\004\022\u0242" +
    "\001\002\000\004\030\u0243\001\002\000\004\022\u0244\001" +
    "\002\000\004\013\u0245\001\002\000\004\022\u0246\001\002" +
    "\000\004\005\u0247\001\002\000\004\022\u0248\001\002\000" +
    "\004\020\u0249\001\002\000\004\022\u024a\001\002\000\004" +
    "\031\u024b\001\002\000\004\022\u024c\001\002\000\004\013" +
    "\u024d\001\002\000\004\022\u024e\001\002\000\006\005\073" +
    "\006\072\001\002\000\004\022\u0250\001\002\000\004\015" +
    "\u0251\001\002\000\004\017\u0252\001\002\000\004\015\u0253" +
    "\001\002\000\004\010\u0254\001\002\000\004\025\u0255\001" +
    "\002\000\004\012\u0256\001\002\000\004\011\u0257\001\002" +
    "\000\006\002\uffe7\010\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0255\000\036\002\013\004\010\005\021\006\016\007" +
    "\006\010\011\011\014\012\015\013\020\014\004\015\017" +
    "\016\005\017\007\032\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\022\005\021\006\016\007\006\010\011\011\014" +
    "\012\015\013\020\014\004\015\017\016\005\017\007\032" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\023\164\024\171" +
    "\025\165\026\172\027\166\030\167\031\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\273\021\274\022\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\273\021\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\273\021\306\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\273\021\274\022\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\344\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\370\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\273\021\274\022\u0100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\273" +
    "\021\u0108\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\273\021\274\022\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\273\021\274\022\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\273\021\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u018a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\023\u019c" +
    "\024\171\025\165\026\172\027\166\030\167\031\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u01d9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u01f0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u01fe\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u0219\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u0221\001\001\000" +
    "\002\001\001\000\004\033\u0223\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u0226\001\001\000\002\001" +
    "\001\000\004\033\u0228\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u022d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\u024e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String resultado = "";
    public String usuarioSesionAprobada = "";
    private Motor motor;

    public boolean sesionEvaluada = false;

    // Conectar el parser al escaner
    public Parser(Lexer lex, Motor motor){
        super(lex);
        this.motor = motor;
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }
    }

    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

   private String secureString(Object o){
        if( o != null){
            return o.toString();
        }else{
            return "";
        }
   }
   private String extractNumber(String str) {
        Pattern pattern = Pattern.compile("\\d+"); // Expresión regular para encontrar números
        Matcher matcher = pattern.matcher(str);
        if (matcher.find()) {
            return matcher.group(); // Retorna la primera coincidencia
        }
        return ""; // Retorna vacío si no hay coincidencias
    }

   private int secureInt(Object o){
        String i = secureString(o);
        String x = extractNumber(i);

        System.out.println("A convertir: " + i);
        try{
            int n = Integer.parseInt(x);
            System.out.println("Convertido: " + n);
            return n;
        }catch(NumberFormatException e){
            System.out.println("Hubo un error al convertir un numero.");
            e.printStackTrace();
            return 10;
        }
   }

   private void imprimir(String st){
        System.out.println(st + "\n\n\n\n");
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= solicitudes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // solicitudes ::= solicitud_simple solicitudes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // solicitudes ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitudes",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // solicitud_simple ::= usuario_nuevo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // solicitud_simple ::= modificar_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // solicitud_simple ::= eliminar_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // solicitud_simple ::= login_usuario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // solicitud_simple ::= nueva_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // solicitud_simple ::= eliminar_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // solicitud_simple ::= modificar_parametros_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // solicitud_simple ::= agregar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // solicitud_simple ::= eliminar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // solicitud_simple ::= modificar_componente_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // solicitud_simple ::= agregar_puntuacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("solicitud_simple",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // id_st ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // id_st ::= STRING 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prm ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prm ::= USUARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prm ::= TRIVIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // prm ::= TIEMPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // prm ::= PUNTUACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prm",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // agregar_puntuacion ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL AGR_PUNTUACION COMILL MAYQUE LLAVOP COMILL PRM_PUNTUACION COMILL DOSPUN COROPN LLAVOP COMILL prm COMILL DOSPUN id_st COMILL prm COMILL DOSPUN id_st COMILL prm COMILL DOSPUN STRING COMILL prm COMILL DOSPUN STRING LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int usleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object us = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object pt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
                            //resultado += "Agregar componente: " + c.toString() + " \n";
                            //imprimir(motor.agregarComponenteTrivia(((Componente)c).getId_trivia(), ((Componente)c)));
                            String trivia  = secureString(tr).replaceAll("\\s+", "");;
                            String usuario = secureString(us).replaceAll("\\s+", ""); 

                            System.out.println("AGREGAR PUNTUACION DETECTADO:");
                            System.out.println("Usuario: "  + usuario        + "   Trivia: "     + trivia);
                            System.out.println("Tiempo: "   + secureInt(tp)  + "   Puntuacion: " + secureInt(pt));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agregar_puntuacion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // usuario_nuevo ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL USUARIO_NUEV COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL PASSWORD COMILL DOSPUN COMILL id_st COMILL COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL INSTITUCION COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Usuario nuevo: " +  id.toString() + " " + ps.toString() + " " + nm.toString() + " " + in.toString () + "\n";
                Usuario usuario = new Usuario(secureString(id), secureString(ps), secureString(nm), secureString(in));
                imprimir(motor.agregarUsuario(usuario));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("usuario_nuevo",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modificar_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL MODI_USUARIO COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUA_ANTIGUO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL USUARIO_NUEV COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL NUEVO_PASSWO COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int nidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Modificar usuario: " + id.toString() + " " + nid.toString() + " " + ps.toString() + "\n";
                imprimir( motor.modificarUsuario( secureString(id), secureString(nid), secureString(ps) ) );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificar_usuario",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-44)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // eliminar_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_USU COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar usuario: " + id.toString() + " \n";
                imprimir( motor.eliminarUsuario(secureString(id)) );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_usuario",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // login_usuario ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL LOGIN_USUARI COMILL MAYQUE LLAVOP COMILL DATOS_USUARI COMILL DOSPUN COROPN LLAVOP COMILL USUARIO COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL PASSWORD COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Login: " + id.toString() + " " + ps.toString();
                sesionEvaluada = true;
                String sesion = motor.loginUsuario(secureString(id), secureString(ps));
                imprimir( sesion );
                if(sesion.equals("No se encontro el usuario especificado") || sesion.equals("Contrasena incorrecta.")){
                    System.out.println("Inicio de sesion denegado.");
                    usuarioSesionAprobada = "";
                    resultado += " Inicio de sesion denegado\n";
                }else{
                    System.out.println("Inicio de sesion aprobado.");
                    resultado += " Inicio de sesion aprobado\n";
                    usuarioSesionAprobada = secureString(id);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("login_usuario",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nueva_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL NUEVA_TRIVIA COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TIEMPO_PREGU COMILL DOSPUN STRING COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TEMA COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Nueva trivia: " + id.toString() + " " + tp.toString()+ " " + nm.toString() + " " + tm.toString() + " \n";
                Trivia trivia = new Trivia(
                    secureString(id),
                    secureString(nm),
                    secureString(tm),
                    "Falta agregar usuario",
                    "Falta agregar fecha", 
                    secureInt(tp)

                );
                imprimir( motor.agregarTrivia(trivia) );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nueva_trivia",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-50)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // eliminar_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_TRI COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar trivia: " + id.toString() + " \n";
                imprimir( motor.eliminarTrivia(secureString(id)) );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_trivia",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modificar_parametros_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL MODIF_TRIVIA COMILL MAYQUE LLAVOP COMILL PARAM_TRIVIA COMILL DOSPUN COROPN LLAVOP COMILL ID_TRIVIA COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TIEMPO_PREGU COMILL DOSPUN STRING COMMA COMILL NOMBRE COMILL DOSPUN COMILL id_st COMILL COMMA COMILL TEMA COMILL DOSPUN COMILL id_st COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-30)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-30)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Modificar trivia: " + id.toString() + " " + tp.toString()+ " " + nm.toString() + " " + tm.toString() + " \n";
                imprimir( motor.modificarParametrosTrivia(
                    secureString(id),
                    secureInt(tp),
                    secureString(nm),
                    secureString(tm)
                ) );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificar_parametros_trivia",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-50)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // eliminar_componente_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL ELIMINAR_COM COMILL MAYQUE LLAVOP COMILL PARAMETROS_C COMILL DOSPUN COROPN LLAVOP COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object cm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		 
                resultado += "Eliminar componente: " + cm.toString() + " " + tr.toString() + " \n";
                imprimir(
                    motor.eliminarComponenteTrivia(secureString(tr), secureString(cm))
                );
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eliminar_componente_trivia",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // agregar_componente_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL AGREGAR_COMP COMILL MAYQUE LLAVOP COMILL PARAMETROS_C COMILL DOSPUN COROPN LLAVOP componente_trivia LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
                //resultado += "Agregar componente: " + c.toString() + " \n";
                imprimir(motor.agregarComponenteTrivia(((Componente)c).getId_trivia(), ((Componente)c)));

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agregar_componente_trivia",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modificar_componente_trivia ::= MENQUE EXCLAM REALIZAR_SOL DOSPUN COMILL MODIFICAR_CM COMILL MAYQUE LLAVOP COMILL PARAMETROS_C COMILL DOSPUN COROPN LLAVOP componente_trivia LLAVCL CORCLS LLAVCL MENQUE FIN_SOL_REAL EXCLAM MAYQUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 
                //resultado += "Agregar componente: " + c.toString() + " \n";
                imprimir(motor.modificarComponenteTrivia(((Componente)c).getId_trivia(), ((Componente)c)));
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modificar_componente_trivia",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opciones ::= id_st 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opciones ::= id_st ORSYMB opciones 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString() + "|" + opcs.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // respuesta ::= opciones 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("respuesta",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // componente_trivia ::= campo_texto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // componente_trivia ::= area_texto 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // componente_trivia ::= checkbox 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // componente_trivia ::= radio 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // componente_trivia ::= fichero 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // componente_trivia ::= combo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = r;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // campo_texto ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL CAMPO_TEXTO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL respuesta COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-16)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-16)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        resultado +=  "COMPONENTE: Campo de texto: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) + "\n"; 
                        CampoTexto campo = new CampoTexto(
                            secureString(id),
                            secureString(tv),
                            secureInt(in),
                            secureString(tx),
                            secureString(rs)
                        );
                        RESULT = campo;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo_texto",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-44)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // area_texto ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL AREA_TEXTO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL respuesta COMILL COMMA COMILL FILAS COMILL DOSPUN id_st COMMA COMILL COLUMNAS COMILL DOSPUN id_st 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-51)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-51)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-43)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-43)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-43)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-28)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-28)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-21)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-21)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        resultado +=  "COMPONENTE: Area de texto: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + secureString(fl)+ " " + secureString(cl) + "\n"; 
                        AreaTexto area = new AreaTexto(
                            secureInt(fl),
                            secureInt(cl),

                            secureString(id),
                            secureString(tv),
                            secureInt(in),
                            secureString(tx),
                            secureString(rs)
                        );
                        RESULT = area;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("area_texto",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-56)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // checkbox ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL CHECKBOX COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL respuesta COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        resultado +=  "COMPONENTE: Checkbox: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
                        Checkbox checkbox = new Checkbox(
                            secureString(op),
                            secureString(id),
                            secureString(tv),

                            secureInt(in),
                            secureString(tx),
                            secureString(rs)
                        );
                        RESULT = checkbox;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("checkbox",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // radio ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL RADIO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL respuesta COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        resultado +=  "COMPONENTE: Radio: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
                        Radio radio = new Radio(
                            secureString(op),
                            secureString(id),
                            secureString(tv),

                            secureInt(in),
                            secureString(tx),
                            secureString(rs)
                        );
                        RESULT = radio; 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("radio",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fichero ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL FICHERO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-23)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        resultado +=  "Fichero: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx) + "\n"; 
                        Fichero fichero = new Fichero(
                            secureString(id),
                            secureString(tv),

                            secureInt(in),
                            secureString(tx)
                        );
                        RESULT = fichero;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fichero",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-36)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // combo ::= COMILL ID COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL TRIVIA COMILL DOSPUN COMILL IDENTIFICADOR COMILL COMMA COMILL CLASE COMILL DOSPUN COMILL COMBO COMILL COMMA COMILL INDICE COMILL DOSPUN id_st COMMA COMILL TEXTO_VISIBL COMILL DOSPUN COMILL id_st COMILL COMMA COMILL RESPUESTA COMILL DOSPUN COMILL respuesta COMILL COMMA COMILL OPCIONES COMILL DOSPUN COMILL opciones COMILL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-47)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-47)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-39)).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-39)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-24)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                        resultado +=  "Combo: " + secureString(id) + " " + secureString(tv)+ " " + secureString(in)+ " " + secureString(tx)+ " " + secureString(rs) +  " " + " OPCIONES: " + secureString(op) + "\n"; 
                        Combo combo = new Combo(
                            secureString(op),
                            secureString(id),
                            secureString(tv),

                            secureInt(in),
                            secureString(tx),
                            secureString(rs)
                        );
                        RESULT = combo;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("combo",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-52)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
