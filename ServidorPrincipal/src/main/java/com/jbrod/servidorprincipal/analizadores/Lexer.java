// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

/* - - - - - - - - - - - - - - - - - CODIGO DE USUARIO - - - - - - - - - - - - - - - - - */

package com.jbrod.servidorprincipal.analizadores;
import java_cup.runtime.*;



@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\7\0\1\10\1\7\1\11\1\0"+
    "\1\12\1\13\10\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\33\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\33\1\51\1\52\1\0\1\53\1\0"+
    "\1\54\1\0\1\55\1\23\1\56\1\25\1\57\1\27"+
    "\1\60\1\31\1\61\1\33\1\34\1\35\1\62\1\63"+
    "\1\64\1\65\1\33\1\66\1\67\1\70\1\71\1\72"+
    "\1\47\1\73\1\33\1\51\1\74\1\75\1\76\7\0"+
    "\1\1\32\0\1\1\36\0\1\77\u01c0\0\1\1\177\0"+
    "\13\1\21\0\2\100\12\0\2\1\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\17\5\1\14\1\15\3\5"+
    "\1\16\1\17\1\20\1\0\12\5\1\21\20\5\1\0"+
    "\42\5\1\0\34\5\1\22\5\5\1\0\5\5\1\23"+
    "\1\5\1\24\3\5\1\25\16\5\1\26\7\5\1\0"+
    "\13\5\1\27\3\5\1\30\12\5\1\31\1\5\1\32"+
    "\1\5\1\0\10\5\1\33\20\5\1\34\1\0\4\5"+
    "\1\35\1\36\11\5\1\37\2\5\1\40\6\5\1\0"+
    "\7\5\1\41\11\5\1\42\4\5\1\0\2\5\1\43"+
    "\15\5\1\44\5\5\1\0\2\5\1\45\5\5\1\46"+
    "\15\5\1\0\13\5\1\47\11\5\1\0\2\5\1\50"+
    "\4\5\1\51\10\5\1\52\2\5\1\53\1\0\11\5"+
    "\1\54\6\5\1\0\3\5\1\55\11\5\1\56\1\57"+
    "\1\0\3\5\1\60\2\5\1\61\5\5\1\0\5\5"+
    "\1\62\2\5\1\63\1\5\1\0\1\64\1\65\5\5"+
    "\1\66\1\0\1\67\4\5\1\0\1\5\1\70\2\5"+
    "\1\0\1\5\1\71\1\72\1\0\1\5\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\101\0\101\0\303\0\101"+
    "\0\u0104\0\101\0\u0145\0\101\0\101\0\u0186\0\u01c7\0\u0208"+
    "\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410"+
    "\0\u0451\0\u0492\0\u04d3\0\u0514\0\101\0\101\0\u0555\0\u0596"+
    "\0\u05d7\0\101\0\101\0\101\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb"+
    "\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u01c7\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u01c7\0\u203f\0\u01c7\0\u2080"+
    "\0\u20c1\0\u2102\0\u01c7\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u01c7\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u01c7\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u01c7\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2cf1\0\u01c7\0\u2d32"+
    "\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u01c7\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511"+
    "\0\u01c7\0\u01c7\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u01c7\0\u379b\0\u37dc\0\u01c7\0\u381d"+
    "\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25"+
    "\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\303\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u01c7"+
    "\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\303"+
    "\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182"+
    "\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u01c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\303\0\u4510"+
    "\0\u4551\0\u4592\0\u45d3\0\u4614\0\u01c7\0\u4655\0\u4696\0\u46d7"+
    "\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e\0\u48df"+
    "\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7"+
    "\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\303\0\u4cae"+
    "\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6"+
    "\0\u4ef7\0\u4f38\0\u4f79\0\303\0\u4fba\0\u4ffb\0\u503c\0\u507d"+
    "\0\303\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\303\0\u52c6\0\u5307\0\303\0\u5348\0\u5389\0\u53ca"+
    "\0\u540b\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\303"+
    "\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799"+
    "\0\u57da\0\u581b\0\303\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960"+
    "\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\303\0\303\0\u5aa5\0\u5ae6"+
    "\0\u5b27\0\u5b68\0\303\0\u5ba9\0\u5bea\0\303\0\u5c2b\0\u5c6c"+
    "\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74"+
    "\0\u5eb5\0\303\0\u5ef6\0\u5f37\0\303\0\u5f78\0\u5fb9\0\303"+
    "\0\303\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\303\0\u613f"+
    "\0\303\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\303"+
    "\0\u6306\0\u6347\0\u6388\0\u63c9\0\303\0\303\0\u640a\0\u644b"+
    "\0\101\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\3\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\17\1\24\2\17"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\17\1\33"+
    "\1\34\4\17\1\35\1\36\1\7\1\37\1\20\1\22"+
    "\1\17\1\24\1\26\1\27\1\30\1\40\1\32\1\17"+
    "\1\41\1\34\2\17\1\42\1\43\1\44\1\11\1\6"+
    "\103\0\1\3\105\0\1\7\2\0\3\7\5\0\30\7"+
    "\2\0\20\7\6\0\4\11\5\0\4\11\3\0\31\11"+
    "\3\0\17\11\3\0\1\11\22\0\1\45\60\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\6\17"+
    "\1\46\11\17\1\47\7\17\2\0\1\7\3\17\1\50"+
    "\5\17\1\47\5\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\7\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\1\51\6\17\1\52"+
    "\3\17\1\53\2\17\1\54\11\17\2\0\1\7\1\51"+
    "\6\17\1\54\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\55\27\17"+
    "\2\0\1\7\1\55\16\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\13\17"+
    "\1\56\14\17\2\0\1\7\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\10\17\1\57\17\17\2\0\1\7\4\17\1\57\12\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\3\17\1\60\11\17\1\61\12\17"+
    "\2\0\1\7\6\17\1\61\10\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\62\11\17\2\0\1\7\7\17\1\62\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\63\11\17\2\0\1\7"+
    "\7\17\1\63\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\16\17\1\64"+
    "\4\17\1\65\4\17\2\0\1\7\7\17\1\64\4\17"+
    "\1\65\2\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\17\17\1\66\10\17"+
    "\2\0\1\7\10\17\1\66\6\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\1\67\22\17\1\70\4\17\2\0\1\7\1\71\16\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\72\3\17\1\73\23\17\2\0"+
    "\1\7\1\72\1\17\1\73\14\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\4\17\1\74\3\17\1\75\7\17\1\76\7\17\2\0"+
    "\1\7\2\17\1\74\1\17\1\77\4\17\1\76\5\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\21\17\1\100\6\17\2\0\1\7"+
    "\12\17\1\100\4\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\6\17\1\50"+
    "\11\17\1\47\7\17\2\0\1\7\3\17\1\50\5\17"+
    "\1\47\5\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\1\71\27\17\2\0"+
    "\1\7\1\71\16\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\74"+
    "\3\17\1\77\7\17\1\76\7\17\2\0\1\7\2\17"+
    "\1\74\1\17\1\77\4\17\1\76\5\17\3\0\1\11"+
    "\74\0\1\101\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\20\17\1\102\7\17\2\0\1\7"+
    "\11\17\1\103\5\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\104"+
    "\23\17\2\0\1\7\2\17\1\104\14\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\20\17\1\103\7\17\2\0\1\7\11\17\1\103"+
    "\5\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\14\17\1\105\13\17\2\0"+
    "\1\7\5\17\1\105\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\4\17"+
    "\1\106\23\17\2\0\1\7\2\17\1\106\14\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\107\27\17\2\0\1\7\1\107\16\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\13\17\1\110\1\111\13\17\2\0"+
    "\1\7\5\17\1\111\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\22\17"+
    "\1\112\5\17\2\0\1\7\13\17\1\112\3\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\10\17\1\113\17\17\2\0\1\7\4\17"+
    "\1\113\12\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\2\17\1\114\10\17"+
    "\1\115\1\17\1\116\12\17\2\0\1\7\1\17\1\114"+
    "\4\17\1\116\10\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\117\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\3\17\1\120\15\17"+
    "\1\121\6\17\2\0\1\7\12\17\1\121\4\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\6\17\1\122\21\17\2\0\1\7\3\17"+
    "\1\122\13\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\3\17\1\123\24\17"+
    "\2\0\1\7\17\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\14\17\1\124"+
    "\13\17\2\0\1\7\5\17\1\124\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\4\17\1\125\23\17\2\0\1\7\2\17\1\125"+
    "\14\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\2\17\1\126\25\17\2\0"+
    "\1\7\1\17\1\126\15\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\20\17"+
    "\1\127\1\130\6\17\2\0\1\7\11\17\1\131\1\130"+
    "\4\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\15\17\1\132\12\17\2\0"+
    "\1\7\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\20\17\1\131\1\130"+
    "\6\17\2\0\1\7\11\17\1\131\1\130\4\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\3\17\1\133\24\17\2\0\1\7\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\134\20\17\1\135\6\17\2\0"+
    "\1\7\1\134\11\17\1\135\4\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\14\17\1\136\11\17\1\137\1\17\2\0\1\7\5\17"+
    "\1\136\10\17\1\137\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\140"+
    "\23\17\2\0\1\7\2\17\1\141\14\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\142\17\17\2\0\1\7\4\17\1\142"+
    "\12\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\4\17\1\141\23\17\2\0"+
    "\1\7\2\17\1\141\14\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\23\17"+
    "\1\143\4\17\2\0\1\7\14\17\1\143\2\17\3\0"+
    "\1\11\70\0\1\144\12\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\4\17\1\145\23\17\2\0"+
    "\1\7\2\17\1\146\14\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\4\17"+
    "\1\146\23\17\2\0\1\7\2\17\1\146\14\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\147\27\17\2\0\1\7\1\147\16\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\17\17\1\150\10\17\2\0\1\7"+
    "\10\17\1\150\6\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\2\17\1\151"+
    "\25\17\2\0\1\7\1\17\1\151\15\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\21\17\1\152\6\17\2\0\1\7\12\17\1\152"+
    "\4\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\23\17\1\153\4\17\2\0"+
    "\1\7\14\17\1\153\2\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\17"+
    "\1\154\26\17\2\0\1\7\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\155\11\17\2\0\1\7\7\17\1\155\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\14\17\1\156\13\17\2\0\1\7"+
    "\5\17\1\156\11\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\7\17\1\157"+
    "\20\17\2\0\1\7\17\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\160"+
    "\27\17\2\0\1\7\1\160\16\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\30\17\2\0\1\161\17\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\162\5\7\2\0\14\7"+
    "\1\162\3\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\10\17\1\163\17\17\2\0\1\7"+
    "\4\17\1\163\12\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\22\17\1\164"+
    "\5\17\2\0\1\7\13\17\1\164\3\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\165\17\17\2\0\1\7\4\17\1\165"+
    "\12\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\166\17\17\2\0"+
    "\1\7\4\17\1\166\12\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\17"+
    "\1\167\26\17\2\0\1\7\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\24\17\1\170\3\17\2\0\1\7\15\17\1\170\1\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\10\17\1\171\17\17\2\0\1\7"+
    "\4\17\1\171\12\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\172\27\17"+
    "\2\0\1\7\1\173\16\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\21\17"+
    "\1\174\6\17\2\0\1\7\12\17\1\174\4\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\173\27\17\2\0\1\7\1\173\16\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\22\17\1\175\5\17\2\0\1\7"+
    "\17\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\176\17\17\2\0"+
    "\1\7\4\17\1\176\12\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\13\17"+
    "\1\177\14\17\2\0\1\7\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\17\17\1\200\10\17\2\0\1\7\10\17\1\200\6\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\201\27\17\2\0\1\7\1\201"+
    "\16\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\22\17\1\202\5\17\2\0"+
    "\1\7\13\17\1\202\3\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\14\17"+
    "\1\203\13\17\2\0\1\7\5\17\1\204\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\204\13\17\2\0\1\7\5\17"+
    "\1\204\11\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\24\17\1\205\3\17"+
    "\2\0\1\7\15\17\1\205\1\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\1\206\27\17\2\0\1\7\1\206\16\17\3\0\1\11"+
    "\65\0\1\207\15\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\6\17\1\210\21\17\2\0\1\7"+
    "\3\17\1\211\13\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\6\17\1\211"+
    "\21\17\2\0\1\7\3\17\1\211\13\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\212\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\213\11\17\2\0\1\7\7\17\1\213\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\12\17\1\214\15\17\2\0\1\7"+
    "\17\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\4\17\1\215\23\17\2\0"+
    "\1\7\2\17\1\215\14\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\14\17"+
    "\1\216\13\17\2\0\1\7\5\17\1\216\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\16\17\1\217\11\17\2\0\1\7\7\17"+
    "\1\217\7\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\21\17\1\220\6\17"+
    "\2\0\1\7\12\17\1\220\4\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\10\17\1\221\17\17\2\0\1\7\4\17\1\221\12\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\222\23\17\2\0\1\7"+
    "\2\17\1\222\14\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\21\17\1\223"+
    "\6\17\2\0\1\7\12\17\1\223\4\17\3\0\1\11"+
    "\10\0\1\7\2\0\3\7\5\0\21\7\1\224\6\7"+
    "\2\0\13\7\1\224\4\7\14\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\225\7\7\2\0\12\7\1\225\5\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\2\17\1\226\25\17\2\0\1\7\1\17\1\226"+
    "\15\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\227\17\17\2\0"+
    "\1\7\4\17\1\227\12\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\15\17"+
    "\1\230\12\17\2\0\1\7\6\17\1\230\10\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\5\17\1\231\22\17\2\0\1\7\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\20\17\1\232\7\17\2\0\1\7"+
    "\11\17\1\232\5\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\233\15\17"+
    "\1\234\11\17\2\0\1\7\1\233\6\17\1\234\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\235\11\17\2\0\1\7"+
    "\7\17\1\235\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\14\17\1\236"+
    "\13\17\2\0\1\7\5\17\1\237\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\14\17\1\237\13\17\2\0\1\7\5\17\1\237"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\25\17\1\240\2\17\2\0"+
    "\1\7\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\23\17\1\241\4\17"+
    "\2\0\1\7\17\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\16\17\1\242"+
    "\11\17\2\0\1\7\7\17\1\242\7\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\243\17\17\2\0\1\7\4\17\1\243"+
    "\12\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\23\17\1\244\4\17\2\0"+
    "\1\7\14\17\1\244\2\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\16\17"+
    "\1\245\11\17\2\0\1\7\7\17\1\245\7\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\17\17\1\246\10\17\2\0\1\7\10\17"+
    "\1\247\6\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\17\17\1\247\10\17"+
    "\2\0\1\7\10\17\1\247\6\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\10\17\1\250\17\17\2\0\1\7\4\17\1\250\12\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\20\17\1\251\7\17\2\0\1\7"+
    "\11\17\1\251\5\17\3\0\1\11\64\0\1\252\16\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\1\253\27\17\2\0\1\7\1\254\16\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\254\27\17\2\0\1\7\1\254\16\17\3\0"+
    "\1\11\10\0\1\7\2\0\3\7\5\0\22\7\1\255"+
    "\5\7\2\0\14\7\1\255\3\7\6\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\256\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\1\17\1\257\26\17"+
    "\2\0\1\7\17\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\15\17\1\260"+
    "\12\17\2\0\1\7\6\17\1\260\10\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\261\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\15\17\1\262\12\17\2\0\1\7\6\17\1\262\10\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\20\17\1\263\7\17\2\0\1\7"+
    "\11\17\1\263\5\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\16\7\1\264\11\7\2\0\10\7\1\264"+
    "\7\7\14\0\1\7\2\0\3\7\5\0\10\7\1\265"+
    "\17\7\2\0\5\7\1\265\12\7\6\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\266"+
    "\23\17\2\0\1\7\2\17\1\266\14\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\22\17\1\267\5\17\2\0\1\7\13\17\1\267"+
    "\3\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\270\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\10\17\1\271\17\17\2\0\1\7"+
    "\4\17\1\271\12\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\272"+
    "\23\17\2\0\1\7\2\17\1\272\14\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\273\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\30\17\2\0\1\274\17\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\15\17"+
    "\1\275\12\17\2\0\1\7\6\17\1\275\10\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\4\17\1\276\23\17\2\0\1\7\2\17"+
    "\1\277\14\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\4\17\1\277\23\17"+
    "\2\0\1\7\2\17\1\277\14\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\300\11\17\2\0\1\7\7\17\1\300\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\301\27\17\2\0\1\7\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\27\17\1\302\2\0\1\7\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\303\23\17\2\0\1\7"+
    "\2\17\1\303\14\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\304\17\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\16\17\1\305\11\17"+
    "\2\0\1\7\7\17\1\306\7\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\306\11\17\2\0\1\7\7\17\1\306\7\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\307\27\17\2\0\1\7\1\307"+
    "\16\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\310\17\17\2\0"+
    "\1\7\4\17\1\310\12\17\3\0\1\11\5\0\1\311"+
    "\75\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\20\17\1\312\7\17\2\0\1\7\11\17\1\313"+
    "\5\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\20\17\1\313\7\17\2\0"+
    "\1\7\11\17\1\313\5\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\4\7\1\314\23\7\2\0\3\7"+
    "\1\314\14\7\14\0\1\7\2\0\3\7\5\0\22\7"+
    "\1\315\5\7\2\0\14\7\1\315\3\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\16\17"+
    "\1\316\11\17\2\0\1\7\7\17\1\316\7\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\317\27\17\2\0\1\7\1\317\16\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\23\7"+
    "\1\320\4\7\2\0\15\7\1\320\2\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\321"+
    "\27\17\2\0\1\7\1\321\16\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\322\11\17\2\0\1\7\7\17\1\322\7\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\13\7"+
    "\1\323\14\7\2\0\20\7\14\0\1\7\2\0\3\7"+
    "\5\0\24\7\1\324\3\7\2\0\16\7\1\324\1\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\23\17\1\325\4\17\2\0\1\7\14\17\1\325"+
    "\2\17\3\0\1\11\10\0\1\7\2\0\3\7\5\0"+
    "\23\7\1\326\4\7\2\0\15\7\1\326\2\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\2\17\1\327\25\17\2\0\1\7\1\17\1\327\15\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\22\7"+
    "\1\330\5\7\2\0\14\7\1\330\3\7\14\0\1\7"+
    "\2\0\3\7\5\0\17\7\1\331\10\7\2\0\11\7"+
    "\1\331\6\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\332\23\17\2\0\1\7"+
    "\2\17\1\332\14\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\22\17\1\333"+
    "\5\17\2\0\1\7\13\17\1\334\3\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\22\17\1\334\5\17\2\0\1\7\13\17\1\334"+
    "\3\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\20\17\1\335\7\17\2\0"+
    "\1\7\11\17\1\335\5\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\2\17"+
    "\1\336\25\17\2\0\1\7\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\1\337\27\17\2\0\1\7\1\337\16\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\21\17\1\340\6\17\2\0\1\7\12\17\1\340"+
    "\4\17\3\0\1\11\10\0\1\7\2\0\3\7\5\0"+
    "\24\7\1\341\3\7\2\0\16\7\1\341\1\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\30\17\2\0\1\342\17\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\16\17"+
    "\1\343\11\17\2\0\1\7\7\17\1\343\7\17\3\0"+
    "\1\11\73\0\1\344\7\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\345\17\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\30\17\2\0\1\346\17\17\3\0"+
    "\1\11\10\0\1\7\2\0\3\7\5\0\26\7\1\347"+
    "\1\7\2\0\17\7\1\347\14\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\350\23\7\2\0\3\7\1\350\14\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\26\17\1\351\1\17\2\0\1\7\16\17\1\351"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\21\17\1\352\6\17\2\0\1\7"+
    "\12\17\1\352\4\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\353\6\7\2\0\13\7\1\353"+
    "\4\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\20\17\1\354\7\17\2\0\1\7\11\17"+
    "\1\354\5\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\355\17\7\2\0\5\7\1\355\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\10\7\1\356\17\7"+
    "\2\0\5\7\1\356\12\7\6\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\2\17\1\357\25\17"+
    "\2\0\1\7\1\17\1\357\15\17\3\0\1\11\10\0"+
    "\1\7\2\0\3\7\5\0\21\7\1\360\6\7\2\0"+
    "\13\7\1\360\4\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\1\361\27\17\2\0\1\7"+
    "\1\361\16\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\362\7\7\2\0\12\7\1\362\5\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\363\27\7\2\0"+
    "\1\7\1\363\16\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\21\17\1\364\6\17\2\0"+
    "\1\7\12\17\1\364\4\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\20\17"+
    "\1\365\7\17\2\0\1\7\11\17\1\366\5\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\20\17\1\366\7\17\2\0\1\7\11\17"+
    "\1\366\5\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\3\17\1\367\24\17"+
    "\2\0\1\7\17\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\10\17\1\370"+
    "\17\17\2\0\1\7\17\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\20\17"+
    "\1\371\7\17\2\0\1\7\11\17\1\371\5\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\22\17\1\372\5\17\2\0\1\7\13\17"+
    "\1\372\3\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\373\17\7\2\0\5\7\1\373\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\17\7\1\374\10\7"+
    "\2\0\11\7\1\374\6\7\6\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\30\17\2\0\1\375"+
    "\17\17\3\0\1\11\60\0\1\376\30\0\1\7\2\0"+
    "\3\7\5\0\2\7\1\377\14\7\1\u0100\10\7\2\0"+
    "\2\7\1\377\15\7\14\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\377\25\7\2\0\2\7\1\377\15\7\14\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u0101\5\7\2\0"+
    "\14\7\1\u0101\3\7\14\0\1\7\2\0\3\7\5\0"+
    "\26\7\1\u0102\1\7\2\0\17\7\1\u0102\14\0\1\7"+
    "\2\0\3\7\5\0\23\7\1\u0103\4\7\2\0\15\7"+
    "\1\u0103\2\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\30\17\2\0\1\u0104\17\17\3\0"+
    "\1\11\10\0\1\7\2\0\3\7\5\0\10\7\1\u0105"+
    "\17\7\2\0\2\7\1\u0105\15\7\14\0\1\7\2\0"+
    "\3\7\5\0\1\u0106\27\7\2\0\1\7\1\u0106\16\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\u0107\17\17\2\0\1\7\4\17\1\u0107"+
    "\12\17\3\0\1\11\10\0\1\7\2\0\3\7\5\0"+
    "\23\7\1\u0108\4\7\2\0\15\7\1\u0108\2\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\20\17\1\u0109\7\17\2\0\1\7\11\17\1\u0109\5\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u010a\17\7\2\0\5\7\1\u010a\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\21\7\1\u010b\6\7\2\0\13\7"+
    "\1\u010b\4\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\u010c\11\17\2\0\1\7"+
    "\7\17\1\u010d\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\16\17\1\u010d"+
    "\11\17\2\0\1\7\7\17\1\u010d\7\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\16\17\1\u010e\11\17\2\0\1\7\17\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\30\17\2\0\1\u010f\17\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\u0110\27\17\2\0\1\7\1\u0110\16\17\3\0"+
    "\1\11\10\0\1\7\2\0\3\7\5\0\21\7\1\u0111"+
    "\6\7\2\0\13\7\1\u0111\4\7\14\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u0112\7\7\2\0\12\7\1\u0112"+
    "\5\7\14\0\1\7\2\0\3\7\5\0\1\u0113\14\7"+
    "\1\u0114\12\7\2\0\1\7\1\u0113\5\7\1\u0114\10\7"+
    "\73\0\1\u0115\21\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u0116\11\7\2\0\10\7\1\u0116\7\7\14\0\1\7"+
    "\2\0\3\7\5\0\23\7\1\u0117\4\7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u0118\11\7"+
    "\2\0\10\7\1\u0118\7\7\14\0\1\7\2\0\3\7"+
    "\5\0\22\7\1\u0119\5\7\2\0\14\7\1\u0119\3\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\u011a\27\7\2\0"+
    "\1\7\1\u011a\16\7\14\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\u011b\17\7\1\u011c\1\u011d\4\7\2\0\2\7"+
    "\1\u011b\11\7\1\u011c\1\u011d\2\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u011e\17\7\2\0\5\7\1\u011e"+
    "\12\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\16\17\1\u011f\11\17\2\0\1\7\7\17"+
    "\1\u011f\7\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\1\u0120\27\7\2\0\1\7\1\u0120\16\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\30\17\2\0\1\u0121\17\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\24\7\1\u0122\3\7\2\0\16\7"+
    "\1\u0122\1\7\14\0\1\7\2\0\3\7\5\0\21\7"+
    "\1\u0123\6\7\2\0\13\7\1\u0123\4\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\21\17"+
    "\1\u0124\6\17\2\0\1\7\12\17\1\u0125\4\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\21\17\1\u0125\6\17\2\0\1\7\12\17"+
    "\1\u0125\4\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\15\17\1\u0126\12\17"+
    "\2\0\1\7\17\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\u0127\6\7\2\0\13\7\1\u0127"+
    "\4\7\14\0\1\7\2\0\3\7\5\0\10\7\1\u0128"+
    "\17\7\2\0\5\7\1\u0128\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\4\7\1\u0129\23\7\2\0\3\7\1\u0129"+
    "\14\7\14\0\1\7\2\0\3\7\5\0\15\7\1\u012a"+
    "\12\7\2\0\7\7\1\u012a\10\7\14\0\1\7\2\0"+
    "\3\7\5\0\23\7\1\u012b\4\7\2\0\15\7\1\u012b"+
    "\2\7\74\0\1\u012c\20\0\1\7\2\0\3\7\5\0"+
    "\14\7\1\u012d\13\7\2\0\6\7\1\u012d\11\7\14\0"+
    "\1\7\2\0\3\7\5\0\15\7\1\u012e\12\7\2\0"+
    "\20\7\14\0\1\7\2\0\3\7\5\0\16\7\1\u012f"+
    "\11\7\2\0\10\7\1\u012f\7\7\14\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u0130\7\7\2\0\12\7\1\u0130"+
    "\5\7\14\0\1\7\2\0\3\7\5\0\16\7\1\u0131"+
    "\11\7\2\0\10\7\1\u0131\7\7\14\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u0132\7\7\2\0\12\7\1\u0132"+
    "\5\7\14\0\1\7\2\0\3\7\5\0\21\7\1\u0133"+
    "\6\7\2\0\13\7\1\u0133\4\7\14\0\1\7\2\0"+
    "\3\7\5\0\22\7\1\u0134\5\7\2\0\14\7\1\u0134"+
    "\3\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\15\17\1\u0135\12\17\2\0\1\7\6\17"+
    "\1\u0135\10\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\u0136\7\7\2\0\12\7\1\u0136\5\7"+
    "\14\0\1\7\2\0\3\7\5\0\2\7\1\u0137\17\7"+
    "\1\u0138\1\u0139\4\7\2\0\2\7\1\u0137\11\7\1\u0138"+
    "\1\u0139\2\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u013a\17\7\2\0\5\7\1\u013a\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\25\7\1\u013b\2\7\2\0\20\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\u013c\17\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\30\17\2\0\1\u013d\17\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u013e\11\7\2\0\10\7"+
    "\1\u013e\7\7\14\0\1\7\2\0\3\7\5\0\1\7"+
    "\1\u013f\26\7\2\0\20\7\14\0\1\7\2\0\3\7"+
    "\5\0\6\7\1\u0140\21\7\2\0\4\7\1\u0140\13\7"+
    "\14\0\1\7\2\0\3\7\5\0\22\7\1\u0141\5\7"+
    "\2\0\14\7\1\u0141\3\7\14\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\u0142\23\7\2\0\3\7\1\u0142\14\7"+
    "\66\0\1\u0143\26\0\1\7\2\0\3\7\5\0\17\7"+
    "\1\u0144\10\7\2\0\11\7\1\u0144\6\7\14\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\u0145\5\7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\10\7\1\u0146\17\7"+
    "\2\0\5\7\1\u0146\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\14\7\1\u0147\13\7\2\0\6\7\1\u0147\11\7"+
    "\14\0\1\7\2\0\3\7\5\0\10\7\1\u0148\17\7"+
    "\2\0\5\7\1\u0148\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\23\7\1\u0149\4\7\2\0\15\7\1\u0149\2\7"+
    "\14\0\1\7\2\0\3\7\5\0\23\7\1\u014a\4\7"+
    "\2\0\15\7\1\u014a\2\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u014b\17\7\2\0\5\7\1\u014b\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u014c\11\7"+
    "\2\0\10\7\1\u014c\7\7\14\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\u014d\7\7\2\0\12\7\1\u014d\5\7"+
    "\14\0\1\7\2\0\3\7\5\0\21\7\1\u014e\6\7"+
    "\2\0\13\7\1\u014e\4\7\14\0\1\7\2\0\3\7"+
    "\5\0\1\u014f\27\7\2\0\1\7\1\u014f\16\7\14\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\u0150\11\7\2\0"+
    "\10\7\1\u0150\7\7\14\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\u0151\14\7\1\u0152\2\7\1\u0153\5\7\2\0"+
    "\2\7\1\u0151\11\7\1\u0153\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\2\7\1\u0151\17\7\1\u0153\5\7\2\0"+
    "\2\7\1\u0151\11\7\1\u0153\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\13\7\1\u0154\14\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\13\7\1\u0155\14\7\2\0"+
    "\20\7\14\0\1\7\2\0\3\7\5\0\23\7\1\u0156"+
    "\4\7\2\0\15\7\1\u0156\2\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0157\17\7\2\0\5\7\1\u0157"+
    "\12\7\14\0\1\7\2\0\3\7\5\0\24\7\1\u0158"+
    "\3\7\2\0\16\7\1\u0158\1\7\71\0\1\u0159\23\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\u015a\11\7\2\0"+
    "\10\7\1\u015a\7\7\14\0\1\7\2\0\3\7\5\0"+
    "\23\7\1\u015b\4\7\2\0\20\7\14\0\1\7\2\0"+
    "\3\7\5\0\16\7\1\u015c\11\7\2\0\10\7\1\u015c"+
    "\7\7\14\0\1\7\2\0\3\7\5\0\17\7\1\u015d"+
    "\10\7\2\0\11\7\1\u015d\6\7\14\0\1\7\2\0"+
    "\3\7\5\0\24\7\1\u015e\3\7\2\0\16\7\1\u015e"+
    "\1\7\14\0\1\7\2\0\3\7\5\0\1\u015f\27\7"+
    "\2\0\1\7\1\u015f\16\7\14\0\1\7\2\0\3\7"+
    "\5\0\3\7\1\u0160\24\7\2\0\20\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0161\11\7\2\0\10\7"+
    "\1\u0161\7\7\14\0\1\7\2\0\3\7\5\0\14\7"+
    "\1\u0162\13\7\2\0\6\7\1\u0162\11\7\14\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u0163\17\7\2\0\5\7"+
    "\1\u0163\12\7\14\0\1\7\2\0\3\7\5\0\23\7"+
    "\1\u0164\4\7\2\0\15\7\1\u0164\2\7\14\0\1\7"+
    "\2\0\3\7\5\0\20\7\1\u0165\7\7\2\0\12\7"+
    "\1\u0165\5\7\14\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u0166\11\7\2\0\10\7\1\u0166\7\7\14\0\1\7"+
    "\2\0\3\7\5\0\23\7\1\u0167\4\7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\20\7\1\u0168\7\7"+
    "\2\0\12\7\1\u0168\5\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u0169\17\7\2\0\5\7\1\u0169\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\4\7\1\u016a\23\7"+
    "\2\0\3\7\1\u016a\14\7\14\0\1\7\2\0\3\7"+
    "\5\0\15\7\1\u016b\12\7\2\0\7\7\1\u016b\10\7"+
    "\14\0\1\7\2\0\3\7\5\0\6\7\1\u016c\21\7"+
    "\2\0\4\7\1\u016c\13\7\14\0\1\7\2\0\3\7"+
    "\5\0\16\7\1\u016d\11\7\2\0\10\7\1\u016d\7\7"+
    "\70\0\1\u016e\24\0\1\7\2\0\3\7\5\0\15\7"+
    "\1\u016f\12\7\2\0\7\7\1\u016f\10\7\14\0\1\7"+
    "\2\0\3\7\5\0\1\u0170\27\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\u0171\11\7\2\0"+
    "\10\7\1\u0171\7\7\14\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\u0172\17\7\2\0\5\7\1\u0172\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\20\7\1\u0173\7\7\2\0"+
    "\12\7\1\u0173\5\7\14\0\1\7\2\0\3\7\5\0"+
    "\30\7\2\0\1\u0174\17\7\14\0\1\7\2\0\3\7"+
    "\5\0\17\7\1\u0175\10\7\2\0\11\7\1\u0175\6\7"+
    "\14\0\1\7\2\0\3\7\5\0\24\7\1\u0176\3\7"+
    "\2\0\16\7\1\u0176\1\7\14\0\1\7\2\0\3\7"+
    "\5\0\1\u0177\27\7\2\0\1\7\1\u0177\16\7\14\0"+
    "\1\7\2\0\3\7\5\0\3\7\1\u0178\24\7\2\0"+
    "\20\7\14\0\1\7\2\0\3\7\5\0\14\7\1\u0179"+
    "\13\7\2\0\6\7\1\u0179\11\7\14\0\1\7\2\0"+
    "\3\7\5\0\15\7\1\u017a\12\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u017b\17\7\2\0"+
    "\5\7\1\u017b\12\7\14\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\u017c\25\7\2\0\2\7\1\u017c\15\7\14\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u017d\5\7\2\0"+
    "\14\7\1\u017d\3\7\14\0\1\7\2\0\3\7\5\0"+
    "\23\7\1\u017e\4\7\2\0\15\7\1\u017e\2\7\24\0"+
    "\1\u017f\70\0\1\7\2\0\3\7\5\0\4\7\1\u0180"+
    "\23\7\2\0\3\7\1\u0180\14\7\14\0\1\7\2\0"+
    "\3\7\5\0\2\7\1\u0181\25\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\15\7\1\u0182\12\7\2\0"+
    "\7\7\1\u0182\10\7\14\0\1\7\2\0\3\7\5\0"+
    "\1\u0183\27\7\2\0\1\7\1\u0183\16\7\14\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u0184\17\7\2\0\5\7"+
    "\1\u0184\12\7\14\0\1\7\2\0\3\7\5\0\20\7"+
    "\1\u0185\7\7\2\0\12\7\1\u0185\5\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0186\11\7\2\0\10\7"+
    "\1\u0186\7\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u0187\17\7\2\0\5\7\1\u0187\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\20\7\1\u0188\7\7\2\0\12\7"+
    "\1\u0188\5\7\14\0\1\7\2\0\3\7\5\0\17\7"+
    "\1\u0189\10\7\2\0\11\7\1\u0189\6\7\14\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\u018a\5\7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\24\7\1\u018b\3\7"+
    "\2\0\16\7\1\u018b\1\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u018c\17\7\2\0\5\7\1\u018c\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\u018d\27\7\2\0"+
    "\1\7\1\u018d\16\7\14\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\u018e\11\7\2\0\10\7\1\u018e\7\7\13\0"+
    "\1\u018f\101\0\1\7\2\0\3\7\5\0\15\7\1\u0190"+
    "\12\7\2\0\7\7\1\u0190\10\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0191\17\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\4\7\1\u0192\23\7\2\0"+
    "\3\7\1\u0192\14\7\14\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\u0193\11\7\2\0\10\7\1\u0193\7\7\14\0"+
    "\1\7\2\0\3\7\5\0\4\7\1\u0194\23\7\2\0"+
    "\3\7\1\u0194\14\7\14\0\1\7\2\0\3\7\5\0"+
    "\15\7\1\u0195\12\7\2\0\7\7\1\u0195\10\7\14\0"+
    "\1\7\2\0\3\7\5\0\1\u0196\27\7\2\0\1\7"+
    "\1\u0196\16\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u0197\17\7\2\0\5\7\1\u0197\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0198\11\7\2\0\10\7"+
    "\1\u0198\7\7\14\0\1\7\2\0\3\7\5\0\23\7"+
    "\1\u0199\4\7\2\0\20\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u019a\17\7\2\0\5\7\1\u019a\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\22\7\1\u019b\5\7"+
    "\2\0\14\7\1\u019b\3\7\20\0\1\u019c\74\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\u019d\5\7\2\0\14\7"+
    "\1\u019d\3\7\14\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u019e\11\7\2\0\20\7\14\0\1\7\2\0\3\7"+
    "\5\0\15\7\1\u019f\12\7\2\0\7\7\1\u019f\10\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\u01a0\27\7\2\0"+
    "\1\7\1\u01a0\16\7\14\0\1\7\2\0\3\7\5\0"+
    "\4\7\1\u01a1\23\7\2\0\3\7\1\u01a1\14\7\14\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\u01a2\11\7\2\0"+
    "\10\7\1\u01a2\7\7\14\0\1\7\2\0\3\7\5\0"+
    "\15\7\1\u01a3\12\7\2\0\7\7\1\u01a3\10\7\14\0"+
    "\1\7\2\0\3\7\5\0\1\u01a4\27\7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\u01a5\27\7\2\0"+
    "\1\7\1\u01a5\16\7\14\0\1\7\2\0\3\7\5\0"+
    "\23\7\1\u01a6\4\7\2\0\15\7\1\u01a6\2\7\16\0"+
    "\1\u01a7\76\0\1\7\2\0\3\7\5\0\4\7\1\u01a8"+
    "\23\7\2\0\3\7\1\u01a8\14\7\14\0\1\7\2\0"+
    "\3\7\5\0\15\7\1\u01a9\12\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u01aa\5\7\2\0"+
    "\14\7\1\u01aa\3\7\14\0\1\7\2\0\3\7\5\0"+
    "\13\7\1\u01ab\14\7\2\0\20\7\14\0\1\7\2\0"+
    "\3\7\5\0\15\7\1\u01ac\12\7\2\0\7\7\1\u01ac"+
    "\10\7\14\0\1\7\2\0\3\7\5\0\4\7\1\u01ad"+
    "\23\7\2\0\3\7\1\u01ad\14\7\14\0\1\7\2\0"+
    "\3\7\5\0\2\7\1\u01ae\25\7\2\0\20\7\14\0"+
    "\1\7\2\0\3\7\5\0\3\7\1\u01af\24\7\2\0"+
    "\20\7\17\0\1\u01b0\75\0\1\7\2\0\3\7\5\0"+
    "\4\7\1\u01b1\23\7\2\0\3\7\1\u01b1\14\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u01b2\17\7\2\0"+
    "\5\7\1\u01b2\12\7\14\0\1\7\2\0\3\7\5\0"+
    "\22\7\1\u01b3\5\7\2\0\14\7\1\u01b3\3\7\14\0"+
    "\1\7\2\0\3\7\5\0\15\7\1\u01b4\12\7\2\0"+
    "\7\7\1\u01b4\10\7\14\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\u01b5\17\7\2\0\20\7\13\0\1\u01b6\101\0"+
    "\1\7\2\0\3\7\5\0\27\7\1\u01b7\2\0\20\7"+
    "\14\0\1\7\2\0\3\7\5\0\4\7\1\u01b8\23\7"+
    "\2\0\3\7\1\u01b8\14\7\14\0\1\7\2\0\3\7"+
    "\5\0\22\7\1\u01b9\5\7\2\0\14\7\1\u01b9\3\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u01ba\11\7"+
    "\2\0\20\7\11\0\1\u01bb\103\0\1\7\2\0\3\7"+
    "\5\0\1\u01bc\27\7\2\0\1\7\1\u01bc\16\7\14\0"+
    "\1\7\2\0\3\7\5\0\4\7\1\u01bd\23\7\2\0"+
    "\3\7\1\u01bd\14\7\14\0\1\7\2\0\3\7\5\0"+
    "\15\7\1\u01be\12\7\2\0\20\7\26\0\1\u01bf\66\0"+
    "\1\7\2\0\3\7\5\0\3\7\1\u01c0\24\7\2\0"+
    "\20\7\25\0\1\u01c1\67\0\1\7\2\0\3\7\5\0"+
    "\1\u01c2\27\7\2\0\1\7\1\u01c2\16\7\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25740];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\17\1\2\11\3\1\3\11\1\0\33\1"+
    "\1\0\42\1\1\0\42\1\1\0\42\1\1\0\36\1"+
    "\1\0\32\1\1\0\31\1\1\0\26\1\1\0\26\1"+
    "\1\0\26\1\1\0\25\1\1\0\24\1\1\0\20\1"+
    "\1\0\17\1\1\0\14\1\1\0\12\1\1\0\10\1"+
    "\1\0\5\1\1\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yyline +1, yycolumn +1);
    }

    private Symbol symbol(int type, Object value){
        System.out.println("Token con valor reconocido: " + yytext());
        return new Symbol(type, yyline +1, yycolumn + 1, value);
    }

    private void error (String message){
        System.out.println("Error en la linea: " + (yyline +1) + " columna: " + (yycolumn +1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
                 //errores.agregarError(yytext(), yyline +1, yycolumn + 1, "Lexico", "El simbolo no se encuentra definido en el alfabeto.");
            }
          // fall through
          case 61: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 62: break;
          case 3:
            { return symbol(sym.EXCLAM);
            }
          // fall through
          case 63: break;
          case 4:
            { return symbol(sym.COMILL);
            }
          // fall through
          case 64: break;
          case 5:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 65: break;
          case 6:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 66: break;
          case 7:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 67: break;
          case 8:
            { return symbol(sym.DOSPUN);
            }
          // fall through
          case 68: break;
          case 9:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 69: break;
          case 10:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 70: break;
          case 11:
            { return symbol(sym.QSTMRK);
            }
          // fall through
          case 71: break;
          case 12:
            { return symbol(sym.COROPN);
            }
          // fall through
          case 72: break;
          case 13:
            { return symbol(sym.CORCLS);
            }
          // fall through
          case 73: break;
          case 14:
            { return symbol(sym.LLAVOP);
            }
          // fall through
          case 74: break;
          case 15:
            { return symbol(sym.ORSYMB);
            }
          // fall through
          case 75: break;
          case 16:
            { return symbol(sym.LLAVCL);
            }
          // fall through
          case 76: break;
          case 17:
            { return symbol(sym.ID);
            }
          // fall through
          case 77: break;
          case 18:
            { return symbol(sym.TEMA);
            }
          // fall through
          case 78: break;
          case 19:
            { return symbol(sym.CLASE);
            }
          // fall through
          case 79: break;
          case 20:
            { return symbol(sym.COMBO)      ;
            }
          // fall through
          case 80: break;
          case 21:
            { return symbol(sym.FILAS);
            }
          // fall through
          case 81: break;
          case 22:
            { return symbol(sym.RADIO)      ;
            }
          // fall through
          case 82: break;
          case 23:
            { return symbol(sym.INDICE);
            }
          // fall through
          case 83: break;
          case 24:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 84: break;
          case 25:
            { return symbol(sym.TIEMPO);
            }
          // fall through
          case 85: break;
          case 26:
            { return symbol(sym.TRIVIA);
            }
          // fall through
          case 86: break;
          case 27:
            { return symbol(sym.FICHERO)    ;
            }
          // fall through
          case 87: break;
          case 28:
            { return symbol(sym.USUARIO);
            }
          // fall through
          case 88: break;
          case 29:
            { return symbol(sym.CHECKBOX)   ;
            }
          // fall through
          case 89: break;
          case 30:
            { return symbol(sym.COLUMNAS);
            }
          // fall through
          case 90: break;
          case 31:
            { return symbol(sym.OPCIONES);
            }
          // fall through
          case 91: break;
          case 32:
            { return symbol(sym.PASSWORD);
            }
          // fall through
          case 92: break;
          case 33:
            { return symbol(sym.ID_TRIVIA);
            }
          // fall through
          case 93: break;
          case 34:
            { return symbol(sym.RESPUESTA);
            }
          // fall through
          case 94: break;
          case 35:
            { return symbol(sym.AREA_TEXTO) ;
            }
          // fall through
          case 95: break;
          case 36:
            { return symbol(sym.PUNTUACION);
            }
          // fall through
          case 96: break;
          case 37:
            { return symbol(sym.CAMPO_TEXTO);
            }
          // fall through
          case 97: break;
          case 38:
            { return symbol(sym.INSTITUCION);
            }
          // fall through
          case 98: break;
          case 39:
            { return symbol(sym.NUEVA_TRIVIA);
            }
          // fall through
          case 99: break;
          case 40:
            { return symbol(sym.DATOS_USUARI);
            }
          // fall through
          case 100: break;
          case 41:
            { return symbol(sym.LOGIN_USUARI);
            }
          // fall through
          case 101: break;
          case 42:
            { return symbol(sym.TEXTO_VISIBL);
            }
          // fall through
          case 102: break;
          case 43:
            { return symbol(sym.USUARIO_NUEV);
            }
          // fall through
          case 103: break;
          case 44:
            { return symbol(sym.NUEVO_PASSWO);
            }
          // fall through
          case 104: break;
          case 45:
            { return symbol(sym.ELIMINAR_TRI);
            }
          // fall through
          case 105: break;
          case 46:
            { return symbol(sym.TIEMPO_PREGU);
            }
          // fall through
          case 106: break;
          case 47:
            { return symbol(sym.USUA_ANTIGUO);
            }
          // fall through
          case 107: break;
          case 48:
            { return symbol(sym.ELIMINAR_USU);
            }
          // fall through
          case 108: break;
          case 49:
            { return symbol(sym.MODIF_TRIVIA);
            }
          // fall through
          case 109: break;
          case 50:
            { return symbol(sym.MODI_USUARIO);
            }
          // fall through
          case 110: break;
          case 51:
            { return symbol(sym.PARAM_TRIVIA);
            }
          // fall through
          case 111: break;
          case 52:
            { return symbol(sym.AGREGAR_COMP);
            }
          // fall through
          case 112: break;
          case 53:
            { return symbol(sym.AGR_PUNTUACION);
            }
          // fall through
          case 113: break;
          case 54:
            { return symbol(sym.REALIZAR_SOL);
            }
          // fall through
          case 114: break;
          case 55:
            { return symbol(sym.ELIMINAR_COM);
            }
          // fall through
          case 115: break;
          case 56:
            { return symbol(sym.MODIFICAR_CM);
            }
          // fall through
          case 116: break;
          case 57:
            { return symbol(sym.PARAMETROS_C);
            }
          // fall through
          case 117: break;
          case 58:
            { return symbol(sym.PRM_PUNTUACION);
            }
          // fall through
          case 118: break;
          case 59:
            { return symbol(sym.ENCABEZADO);
            }
          // fall through
          case 119: break;
          case 60:
            { return symbol(sym.FIN_SOL_REAL);
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
