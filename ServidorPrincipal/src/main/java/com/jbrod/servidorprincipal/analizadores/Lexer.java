// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

/* - - - - - - - - - - - - - - - - - CODIGO DE USUARIO - - - - - - - - - - - - - - - - - */

package com.jbrod.servidorprincipal.analizadores;
import java_cup.runtime.*;



@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\7\0\1\10\1\7\1\11\1\0"+
    "\1\12\1\13\10\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\33\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\33\1\51\1\52\1\0\1\53\1\0"+
    "\1\54\1\0\1\22\1\23\1\55\1\25\1\56\1\27"+
    "\1\30\1\31\1\57\1\33\1\34\1\35\1\36\1\60"+
    "\1\61\1\41\1\33\1\62\1\63\1\44\1\45\1\64"+
    "\1\47\1\65\1\33\1\51\1\66\1\67\1\70\7\0"+
    "\1\1\32\0\1\1\36\0\1\71\u01c0\0\1\1\177\0"+
    "\13\1\21\0\2\72\12\0\2\1\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\17\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\0\11\5\1\21\15\5\1\0\36\5"+
    "\1\0\31\5\1\22\4\5\1\0\4\5\1\23\1\5"+
    "\1\24\3\5\1\25\14\5\1\26\6\5\1\0\12\5"+
    "\1\27\3\5\1\30\11\5\1\31\1\5\1\0\7\5"+
    "\1\32\16\5\1\33\1\0\3\5\1\34\1\35\11\5"+
    "\1\36\1\5\1\37\5\5\1\0\6\5\1\40\7\5"+
    "\1\41\4\5\1\0\1\5\1\42\21\5\1\0\1\5"+
    "\1\43\5\5\1\44\13\5\1\0\11\5\1\45\10\5"+
    "\1\0\1\5\1\46\4\5\1\47\6\5\1\50\2\5"+
    "\1\51\1\0\7\5\1\52\5\5\1\0\2\5\1\53"+
    "\7\5\1\54\1\55\1\0\2\5\1\56\1\5\1\57"+
    "\4\5\1\0\3\5\1\60\1\5\1\61\1\5\1\0"+
    "\1\62\3\5\1\63\1\0\1\64\2\5\1\0\2\5"+
    "\1\0\1\5\1\65\1\0\1\5\1\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\73\0\73\0\261\0\73"+
    "\0\354\0\73\0\u0127\0\73\0\73\0\u0162\0\u019d\0\u01d8"+
    "\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\73\0\73\0\73\0\73"+
    "\0\73\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u019d\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u019d\0\u1995\0\u019d\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u019d\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u019d"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u20f5\0\u019d\0\u2130\0\u216b\0\u21a6\0\u019d\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u019d"+
    "\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u019d\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906"+
    "\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u019d\0\u019d\0\u2a68"+
    "\0\u2aa3\0\u2ade\0\u2b19\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u2c40"+
    "\0\u019d\0\u2c7b\0\u019d\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67\0\u2da2"+
    "\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f\0\261"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u019d"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\261\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451"+
    "\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629"+
    "\0\u3664\0\u369f\0\261\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6"+
    "\0\u019d\0\u3801\0\u383c\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963"+
    "\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b"+
    "\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\261\0\u3cd8"+
    "\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0"+
    "\0\u3eeb\0\261\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\261\0\u4012"+
    "\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\261\0\u4174\0\u41af"+
    "\0\261\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\261\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9"+
    "\0\u4524\0\u455f\0\261\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686"+
    "\0\u46c1\0\u46fc\0\261\0\261\0\u4737\0\u4772\0\u47ad\0\261"+
    "\0\u47e8\0\261\0\u4823\0\u485e\0\u4899\0\u48d4\0\u490f\0\u494a"+
    "\0\u4985\0\u49c0\0\261\0\u49fb\0\261\0\u4a36\0\u4a71\0\261"+
    "\0\u4aac\0\u4ae7\0\u4b22\0\261\0\u4b5d\0\261\0\u4b98\0\u4bd3"+
    "\0\u4c0e\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\261\0\u4d35\0\u4d70"+
    "\0\73\0\261";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\3\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\17\1\24\2\17"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\17\1\33"+
    "\1\34\4\17\1\35\1\36\1\7\1\20\1\22\1\24"+
    "\1\27\1\30\1\32\3\17\1\37\1\40\1\41\1\11"+
    "\1\6\75\0\1\3\77\0\1\7\2\0\3\7\5\0"+
    "\30\7\2\0\12\7\6\0\4\11\5\0\4\11\3\0"+
    "\31\11\3\0\11\11\3\0\1\11\22\0\1\42\52\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\6\17\1\43\11\17\1\44\7\17\2\0\1\7\5\17"+
    "\1\44\3\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\30\17\2\0\1\7"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\1\45\6\17\1\46\3\17"+
    "\1\47\2\17\1\50\11\17\2\0\1\7\4\17\1\50"+
    "\4\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\1\51\27\17\2\0\1\7"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\13\17\1\52\14\17\2\0"+
    "\1\7\11\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\10\17\1\53\17\17"+
    "\2\0\1\7\2\17\1\53\6\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\3\17\1\54\11\17\1\55\12\17\2\0\1\7\3\17"+
    "\1\55\5\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\16\17\1\56\11\17"+
    "\2\0\1\7\4\17\1\56\4\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\57\11\17\2\0\1\7\4\17\1\57\4\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\60\4\17\1\61\4\17"+
    "\2\0\1\7\4\17\1\60\4\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\17\17\1\62\10\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\63\27\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\64\3\17\1\65\23\17\2\0\1\7\1\17"+
    "\1\65\7\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\4\17\1\66\3\17"+
    "\1\67\7\17\1\70\7\17\2\0\1\7\1\17\1\66"+
    "\1\67\2\17\1\70\3\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\21\17"+
    "\1\71\6\17\2\0\1\7\6\17\1\71\2\17\3\0"+
    "\1\11\66\0\1\72\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\20\17\1\73\7\17\2\0"+
    "\1\7\5\17\1\73\3\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\4\17"+
    "\1\74\23\17\2\0\1\7\1\17\1\74\7\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\75\13\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\76\23\17\2\0\1\7"+
    "\1\17\1\76\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\77\27\17"+
    "\2\0\1\7\11\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\13\17\1\100"+
    "\1\101\13\17\2\0\1\7\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\22\17\1\102\5\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\103\17\17\2\0\1\7\2\17\1\103"+
    "\6\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\2\17\1\104\10\17\1\105"+
    "\1\17\1\106\12\17\2\0\1\7\1\104\2\17\1\106"+
    "\5\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\107\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\3\17\1\110\15\17\1\111\6\17"+
    "\2\0\1\7\6\17\1\111\2\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\6\17\1\112\21\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\3\17\1\113\24\17\2\0\1\7\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\114\13\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\115\23\17\2\0\1\7"+
    "\1\17\1\115\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\2\17\1\116"+
    "\25\17\2\0\1\7\1\116\10\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\20\17\1\117\1\120\6\17\2\0\1\7\5\17\1\117"+
    "\1\120\2\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\3\17\1\121\24\17"+
    "\2\0\1\7\11\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\122\20\17"+
    "\1\123\6\17\2\0\1\7\6\17\1\123\2\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\124\11\17\1\125\1\17\2\0"+
    "\1\7\10\17\1\125\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\4\17\1\126"+
    "\23\17\2\0\1\7\1\17\1\126\7\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\127\17\17\2\0\1\7\2\17\1\127"+
    "\6\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\23\17\1\130\4\17\2\0"+
    "\1\7\11\17\3\0\1\11\64\0\1\131\10\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\4\17"+
    "\1\132\23\17\2\0\1\7\1\17\1\132\7\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\133\27\17\2\0\1\7\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\17\17\1\134\10\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\2\17\1\135\25\17\2\0\1\7"+
    "\1\135\10\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\21\17\1\136\6\17"+
    "\2\0\1\7\6\17\1\136\2\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\23\17\1\137\4\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\17\1\140\26\17\2\0\1\7\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\16\17\1\141\11\17\2\0\1\7\4\17"+
    "\1\141\4\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\14\17\1\142\13\17"+
    "\2\0\1\7\11\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\7\17\1\143"+
    "\20\17\2\0\1\7\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\144"+
    "\27\17\2\0\1\7\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\30\17"+
    "\2\0\1\145\11\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\22\7\1\146\5\7\2\0\12\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\10\17\1\147\17\17\2\0\1\7\2\17\1\147\6\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\22\17\1\150\5\17\2\0\1\7"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\151\17\17\2\0"+
    "\1\7\2\17\1\151\6\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\10\17"+
    "\1\152\17\17\2\0\1\7\2\17\1\152\6\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\17\1\153\26\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\24\17\1\154\3\17\2\0\1\7"+
    "\7\17\1\154\1\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\10\17\1\155"+
    "\17\17\2\0\1\7\2\17\1\155\6\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\156\27\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\21\17\1\157\6\17\2\0\1\7\6\17\1\157"+
    "\2\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\160\17\17\2\0"+
    "\1\7\2\17\1\160\6\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\13\17"+
    "\1\161\14\17\2\0\1\7\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\17\17\1\162\10\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\163\27\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\22\17\1\164\5\17\2\0\1\7\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\165\13\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\24\17\1\166\3\17\2\0\1\7"+
    "\7\17\1\166\1\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\167\27\17"+
    "\2\0\1\7\11\17\3\0\1\11\62\0\1\170\12\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\6\17\1\171\21\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\172\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\173\11\17\2\0\1\7\4\17\1\173\4\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\12\17\1\174\15\17\2\0\1\7"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\4\17\1\175\23\17\2\0"+
    "\1\7\1\17\1\175\7\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\14\17"+
    "\1\176\13\17\2\0\1\7\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\177\11\17\2\0\1\7\4\17\1\177\4\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\21\17\1\200\6\17\2\0\1\7"+
    "\6\17\1\200\2\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\10\17\1\201"+
    "\17\17\2\0\1\7\2\17\1\201\6\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\4\17\1\202\23\17\2\0\1\7\1\17\1\202"+
    "\7\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\21\17\1\203\6\17\2\0"+
    "\1\7\6\17\1\203\2\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\21\7\1\204\6\7\2\0\7\7"+
    "\1\204\2\7\14\0\1\7\2\0\3\7\5\0\20\7"+
    "\1\205\7\7\2\0\6\7\1\205\3\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\2\17"+
    "\1\206\25\17\2\0\1\7\1\206\10\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\10\17\1\207\17\17\2\0\1\7\2\17\1\207"+
    "\6\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\15\17\1\210\12\17\2\0"+
    "\1\7\3\17\1\210\5\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\5\17"+
    "\1\211\22\17\2\0\1\7\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\20\17\1\212\7\17\2\0\1\7\5\17\1\212\3\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\1\213\15\17\1\214\11\17\2\0"+
    "\1\7\4\17\1\214\4\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\16\17"+
    "\1\215\11\17\2\0\1\7\4\17\1\215\4\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\14\17\1\216\13\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\25\17\1\217\2\17\2\0\1\7"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\16\17\1\220\11\17\2\0"+
    "\1\7\4\17\1\220\4\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\10\17"+
    "\1\221\17\17\2\0\1\7\2\17\1\221\6\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\23\17\1\222\4\17\2\0\1\7\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\223\11\17\2\0\1\7"+
    "\4\17\1\223\4\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\17\17\1\224"+
    "\10\17\2\0\1\7\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\10\17"+
    "\1\225\17\17\2\0\1\7\2\17\1\225\6\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\20\17\1\226\7\17\2\0\1\7\5\17"+
    "\1\226\3\17\3\0\1\11\61\0\1\227\13\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\230"+
    "\27\17\2\0\1\7\11\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\231\5\7\2\0\12\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\232\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\1\17\1\233\26\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\15\17\1\234\12\17\2\0\1\7\3\17\1\234"+
    "\5\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\235\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\15\17\1\236\12\17\2\0\1\7"+
    "\3\17\1\236\5\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\20\17\1\237"+
    "\7\17\2\0\1\7\5\17\1\237\3\17\3\0\1\11"+
    "\10\0\1\7\2\0\3\7\5\0\16\7\1\240\11\7"+
    "\2\0\5\7\1\240\4\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\241\17\7\2\0\3\7\1\241\6\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\4\17\1\242\23\17\2\0\1\7\1\17\1\242"+
    "\7\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\22\17\1\243\5\17\2\0"+
    "\1\7\11\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\30\17\2\0\1\244"+
    "\11\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\10\17\1\245\17\17\2\0"+
    "\1\7\2\17\1\245\6\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\4\17"+
    "\1\246\23\17\2\0\1\7\1\17\1\246\7\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\30\17\2\0\1\247\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\250\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\15\17\1\251\12\17\2\0\1\7\3\17\1\251\5\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\252\23\17\2\0\1\7"+
    "\1\17\1\252\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\16\17\1\253"+
    "\11\17\2\0\1\7\4\17\1\253\4\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\27\17\1\254\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\4\17\1\255\23\17\2\0\1\7\1\17\1\255"+
    "\7\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\256\11\17"+
    "\3\0\1\11\2\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\257\11\17\2\0\1\7"+
    "\4\17\1\257\4\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\1\260\27\17"+
    "\2\0\1\7\11\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\10\17\1\261"+
    "\17\17\2\0\1\7\2\17\1\261\6\17\3\0\1\11"+
    "\5\0\1\262\67\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\20\17\1\263\7\17\2\0\1\7"+
    "\5\17\1\263\3\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\4\7\1\264\23\7\2\0\2\7\1\264"+
    "\7\7\14\0\1\7\2\0\3\7\5\0\22\7\1\265"+
    "\5\7\2\0\12\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\16\17\1\266\11\17\2\0"+
    "\1\7\4\17\1\266\4\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\1\267"+
    "\27\17\2\0\1\7\11\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\23\7\1\270\4\7\2\0\12\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\1\271\27\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\16\17\1\272\11\17\2\0\1\7\4\17\1\272"+
    "\4\17\3\0\1\11\10\0\1\7\2\0\3\7\5\0"+
    "\13\7\1\273\14\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\24\7\1\274\3\7\2\0\10\7\1\274"+
    "\1\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\23\17\1\275\4\17\2\0\1\7\11\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\23\7"+
    "\1\276\4\7\2\0\12\7\6\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\2\17\1\277\25\17"+
    "\2\0\1\7\1\277\10\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\300\5\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\17\7\1\301\10\7"+
    "\2\0\12\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\4\17\1\302\23\17\2\0\1\7"+
    "\1\17\1\302\7\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\22\17\1\303"+
    "\5\17\2\0\1\7\11\17\3\0\1\11\2\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\20\17"+
    "\1\304\7\17\2\0\1\7\5\17\1\304\3\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\1\305\27\17\2\0\1\7\11\17\3\0"+
    "\1\11\2\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\21\17\1\306\6\17\2\0\1\7\6\17"+
    "\1\306\2\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\24\7\1\307\3\7\2\0\10\7\1\307\1\7"+
    "\6\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\30\17\2\0\1\310\11\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\16\17\1\311\11\17\2\0\1\7\4\17\1\311\4\17"+
    "\3\0\1\11\65\0\1\312\7\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\30\17\2\0\1\313"+
    "\11\17\3\0\1\11\10\0\1\7\2\0\3\7\5\0"+
    "\26\7\1\314\1\7\2\0\11\7\1\314\14\0\1\7"+
    "\2\0\3\7\5\0\4\7\1\315\23\7\2\0\2\7"+
    "\1\315\7\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\26\17\1\316\1\17\2\0\1\7"+
    "\10\17\1\316\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\21\17\1\317\6\17"+
    "\2\0\1\7\6\17\1\317\2\17\3\0\1\11\10\0"+
    "\1\7\2\0\3\7\5\0\21\7\1\320\6\7\2\0"+
    "\7\7\1\320\2\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\20\17\1\321\7\17\2\0"+
    "\1\7\5\17\1\321\3\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\322\17\7\2\0\3\7"+
    "\1\322\6\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\323\17\7\2\0\3\7\1\323\6\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\2\17"+
    "\1\324\25\17\2\0\1\7\1\324\10\17\3\0\1\11"+
    "\10\0\1\7\2\0\3\7\5\0\21\7\1\325\6\7"+
    "\2\0\7\7\1\325\2\7\6\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\1\326\27\17\2\0"+
    "\1\7\11\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\327\7\7\2\0\6\7\1\327\3\7"+
    "\14\0\1\7\2\0\3\7\5\0\1\330\27\7\2\0"+
    "\12\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\21\17\1\331\6\17\2\0\1\7\6\17"+
    "\1\331\2\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\20\17\1\332\7\17"+
    "\2\0\1\7\5\17\1\332\3\17\3\0\1\11\2\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\3\17\1\333\24\17\2\0\1\7\11\17\3\0\1\11"+
    "\2\0\4\11\2\0\1\7\2\0\3\17\1\11\3\0"+
    "\1\11\20\17\1\334\7\17\2\0\1\7\5\17\1\334"+
    "\3\17\3\0\1\11\2\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\22\17\1\335\5\17\2\0"+
    "\1\7\11\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\336\17\7\2\0\3\7\1\336\6\7"+
    "\14\0\1\7\2\0\3\7\5\0\17\7\1\337\10\7"+
    "\2\0\12\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\30\17\2\0\1\340\11\17\3\0"+
    "\1\11\57\0\1\341\23\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\342\25\7\2\0\1\7\1\342\10\7\14\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\343\5\7\2\0"+
    "\12\7\14\0\1\7\2\0\3\7\5\0\26\7\1\344"+
    "\1\7\2\0\11\7\1\344\14\0\1\7\2\0\3\7"+
    "\5\0\23\7\1\345\4\7\2\0\12\7\6\0\4\11"+
    "\2\0\1\7\2\0\3\17\1\11\3\0\1\11\30\17"+
    "\2\0\1\346\11\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\347\17\7\2\0\1\7\1\347"+
    "\10\7\14\0\1\7\2\0\3\7\5\0\1\350\27\7"+
    "\2\0\12\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\10\17\1\351\17\17\2\0\1\7"+
    "\2\17\1\351\6\17\3\0\1\11\10\0\1\7\2\0"+
    "\3\7\5\0\23\7\1\352\4\7\2\0\12\7\6\0"+
    "\4\11\2\0\1\7\2\0\3\17\1\11\3\0\1\11"+
    "\20\17\1\353\7\17\2\0\1\7\5\17\1\353\3\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\354\17\7\2\0\3\7\1\354\6\7\14\0\1\7"+
    "\2\0\3\7\5\0\21\7\1\355\6\7\2\0\7\7"+
    "\1\355\2\7\6\0\4\11\2\0\1\7\2\0\3\17"+
    "\1\11\3\0\1\11\16\17\1\356\11\17\2\0\1\7"+
    "\4\17\1\356\4\17\3\0\1\11\2\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\357\11\17\3\0\1\11\2\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\1\360\27\17\2\0"+
    "\1\7\11\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\21\7\1\361\6\7\2\0\7\7\1\361\2\7"+
    "\14\0\1\7\2\0\3\7\5\0\20\7\1\362\7\7"+
    "\2\0\6\7\1\362\3\7\14\0\1\7\2\0\3\7"+
    "\5\0\1\363\14\7\1\364\12\7\2\0\4\7\1\364"+
    "\5\7\67\0\1\365\17\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\366\11\7\2\0\5\7\1\366\4\7\14\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\367\11\7\2\0"+
    "\5\7\1\367\4\7\14\0\1\7\2\0\3\7\5\0"+
    "\22\7\1\370\5\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\1\371\27\7\2\0\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\2\7\1\372\17\7\1\373\1\374"+
    "\4\7\2\0\1\7\1\372\10\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\375\17\7\2\0\3\7\1\375"+
    "\6\7\6\0\4\11\2\0\1\7\2\0\3\17\1\11"+
    "\3\0\1\11\16\17\1\376\11\17\2\0\1\7\4\17"+
    "\1\376\4\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\1\377\27\7\2\0\12\7\6\0\4\11\2\0"+
    "\1\7\2\0\3\17\1\11\3\0\1\11\30\17\2\0"+
    "\1\u0100\11\17\3\0\1\11\10\0\1\7\2\0\3\7"+
    "\5\0\24\7\1\u0101\3\7\2\0\10\7\1\u0101\1\7"+
    "\14\0\1\7\2\0\3\7\5\0\21\7\1\u0102\6\7"+
    "\2\0\7\7\1\u0102\2\7\6\0\4\11\2\0\1\7"+
    "\2\0\3\17\1\11\3\0\1\11\21\17\1\u0103\6\17"+
    "\2\0\1\7\6\17\1\u0103\2\17\3\0\1\11\10\0"+
    "\1\7\2\0\3\7\5\0\21\7\1\u0104\6\7\2\0"+
    "\7\7\1\u0104\2\7\14\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\u0105\17\7\2\0\3\7\1\u0105\6\7\14\0"+
    "\1\7\2\0\3\7\5\0\4\7\1\u0106\23\7\2\0"+
    "\2\7\1\u0106\7\7\14\0\1\7\2\0\3\7\5\0"+
    "\15\7\1\u0107\12\7\2\0\4\7\1\u0107\5\7\14\0"+
    "\1\7\2\0\3\7\5\0\23\7\1\u0108\4\7\2\0"+
    "\12\7\70\0\1\u0109\16\0\1\7\2\0\3\7\5\0"+
    "\14\7\1\u010a\13\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\16\7\1\u010b\11\7\2\0\5\7\1\u010b"+
    "\4\7\14\0\1\7\2\0\3\7\5\0\20\7\1\u010c"+
    "\7\7\2\0\6\7\1\u010c\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\16\7\1\u010d\11\7\2\0\5\7\1\u010d"+
    "\4\7\14\0\1\7\2\0\3\7\5\0\20\7\1\u010e"+
    "\7\7\2\0\6\7\1\u010e\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\u010f\6\7\2\0\7\7\1\u010f"+
    "\2\7\14\0\1\7\2\0\3\7\5\0\22\7\1\u0110"+
    "\5\7\2\0\12\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\15\17\1\u0111\12\17\2\0"+
    "\1\7\3\17\1\u0111\5\17\3\0\1\11\10\0\1\7"+
    "\2\0\3\7\5\0\20\7\1\u0112\7\7\2\0\6\7"+
    "\1\u0112\3\7\14\0\1\7\2\0\3\7\5\0\22\7"+
    "\1\u0113\1\u0114\4\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0115\17\7\2\0\3\7\1\u0115"+
    "\6\7\14\0\1\7\2\0\3\7\5\0\25\7\1\u0116"+
    "\2\7\2\0\12\7\6\0\4\11\2\0\1\7\2\0"+
    "\3\17\1\11\3\0\1\11\30\17\2\0\1\u0117\11\17"+
    "\3\0\1\11\10\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u0118\11\7\2\0\5\7\1\u0118\4\7\14\0\1\7"+
    "\2\0\3\7\5\0\1\7\1\u0119\26\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\6\7\1\u011a\21\7"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\22\7"+
    "\1\u011b\5\7\2\0\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\u011c\23\7\2\0\2\7\1\u011c\7\7"+
    "\64\0\1\u011d\22\0\1\7\2\0\3\7\5\0\17\7"+
    "\1\u011e\10\7\2\0\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u011f\17\7\2\0\3\7\1\u011f\6\7"+
    "\14\0\1\7\2\0\3\7\5\0\14\7\1\u0120\13\7"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u0121\17\7\2\0\3\7\1\u0121\6\7\14\0\1\7"+
    "\2\0\3\7\5\0\23\7\1\u0122\4\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\23\7\1\u0123\4\7"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u0124\17\7\2\0\3\7\1\u0124\6\7\14\0\1\7"+
    "\2\0\3\7\5\0\20\7\1\u0125\7\7\2\0\6\7"+
    "\1\u0125\3\7\14\0\1\7\2\0\3\7\5\0\21\7"+
    "\1\u0126\6\7\2\0\7\7\1\u0126\2\7\14\0\1\7"+
    "\2\0\3\7\5\0\1\u0127\27\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\16\7\1\u0128\11\7\2\0"+
    "\5\7\1\u0128\4\7\14\0\1\7\2\0\3\7\5\0"+
    "\2\7\1\u0129\17\7\1\u012a\5\7\2\0\1\7\1\u0129"+
    "\10\7\14\0\1\7\2\0\3\7\5\0\13\7\1\u012b"+
    "\14\7\2\0\12\7\14\0\1\7\2\0\3\7\5\0"+
    "\13\7\1\u012c\14\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\23\7\1\u012d\4\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u012e\17\7\2\0"+
    "\3\7\1\u012e\6\7\14\0\1\7\2\0\3\7\5\0"+
    "\24\7\1\u012f\3\7\2\0\10\7\1\u012f\1\7\66\0"+
    "\1\u0130\20\0\1\7\2\0\3\7\5\0\16\7\1\u0131"+
    "\11\7\2\0\5\7\1\u0131\4\7\14\0\1\7\2\0"+
    "\3\7\5\0\16\7\1\u0132\11\7\2\0\5\7\1\u0132"+
    "\4\7\14\0\1\7\2\0\3\7\5\0\17\7\1\u0133"+
    "\10\7\2\0\12\7\14\0\1\7\2\0\3\7\5\0"+
    "\24\7\1\u0134\3\7\2\0\10\7\1\u0134\1\7\14\0"+
    "\1\7\2\0\3\7\5\0\1\u0135\27\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\3\7\1\u0136\24\7"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u0137\11\7\2\0\5\7\1\u0137\4\7\14\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u0138\17\7\2\0\3\7"+
    "\1\u0138\6\7\14\0\1\7\2\0\3\7\5\0\23\7"+
    "\1\u0139\4\7\2\0\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\u013a\7\7\2\0\6\7\1\u013a\3\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u013b\11\7"+
    "\2\0\5\7\1\u013b\4\7\14\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\u013c\7\7\2\0\6\7\1\u013c\3\7"+
    "\14\0\1\7\2\0\3\7\5\0\10\7\1\u013d\17\7"+
    "\2\0\3\7\1\u013d\6\7\14\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\u013e\23\7\2\0\2\7\1\u013e\7\7"+
    "\14\0\1\7\2\0\3\7\5\0\15\7\1\u013f\12\7"+
    "\2\0\4\7\1\u013f\5\7\14\0\1\7\2\0\3\7"+
    "\5\0\6\7\1\u0140\21\7\2\0\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0141\11\7\2\0\5\7"+
    "\1\u0141\4\7\65\0\1\u0142\21\0\1\7\2\0\3\7"+
    "\5\0\15\7\1\u0143\12\7\2\0\4\7\1\u0143\5\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u0144\11\7"+
    "\2\0\5\7\1\u0144\4\7\14\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u0145\17\7\2\0\3\7\1\u0145\6\7"+
    "\14\0\1\7\2\0\3\7\5\0\20\7\1\u0146\7\7"+
    "\2\0\6\7\1\u0146\3\7\14\0\1\7\2\0\3\7"+
    "\5\0\30\7\2\0\1\u0147\11\7\14\0\1\7\2\0"+
    "\3\7\5\0\24\7\1\u0148\3\7\2\0\10\7\1\u0148"+
    "\1\7\14\0\1\7\2\0\3\7\5\0\1\u0149\27\7"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\3\7"+
    "\1\u014a\24\7\2\0\12\7\14\0\1\7\2\0\3\7"+
    "\5\0\14\7\1\u014b\13\7\2\0\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u014c\17\7\2\0\3\7"+
    "\1\u014c\6\7\14\0\1\7\2\0\3\7\5\0\2\7"+
    "\1\u014d\25\7\2\0\1\7\1\u014d\10\7\14\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\u014e\5\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\23\7\1\u014f\4\7"+
    "\2\0\12\7\24\0\1\u0150\62\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\u0151\23\7\2\0\2\7\1\u0151\7\7"+
    "\14\0\1\7\2\0\3\7\5\0\15\7\1\u0152\12\7"+
    "\2\0\4\7\1\u0152\5\7\14\0\1\7\2\0\3\7"+
    "\5\0\1\u0153\27\7\2\0\12\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0154\17\7\2\0\3\7\1\u0154"+
    "\6\7\14\0\1\7\2\0\3\7\5\0\20\7\1\u0155"+
    "\7\7\2\0\6\7\1\u0155\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0156\17\7\2\0\3\7\1\u0156"+
    "\6\7\14\0\1\7\2\0\3\7\5\0\20\7\1\u0157"+
    "\7\7\2\0\6\7\1\u0157\3\7\14\0\1\7\2\0"+
    "\3\7\5\0\17\7\1\u0158\10\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\24\7\1\u0159\3\7\2\0"+
    "\10\7\1\u0159\1\7\14\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\u015a\17\7\2\0\3\7\1\u015a\6\7\14\0"+
    "\1\7\2\0\3\7\5\0\1\u015b\27\7\2\0\12\7"+
    "\14\0\1\7\2\0\3\7\5\0\16\7\1\u015c\11\7"+
    "\2\0\5\7\1\u015c\4\7\13\0\1\u015d\73\0\1\7"+
    "\2\0\3\7\5\0\15\7\1\u015e\12\7\2\0\4\7"+
    "\1\u015e\5\7\14\0\1\7\2\0\3\7\5\0\4\7"+
    "\1\u015f\23\7\2\0\2\7\1\u015f\7\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0160\11\7\2\0\5\7"+
    "\1\u0160\4\7\14\0\1\7\2\0\3\7\5\0\4\7"+
    "\1\u0161\23\7\2\0\2\7\1\u0161\7\7\14\0\1\7"+
    "\2\0\3\7\5\0\1\u0162\27\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u0163\17\7\2\0"+
    "\3\7\1\u0163\6\7\14\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\u0164\11\7\2\0\5\7\1\u0164\4\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u0165\17\7\2\0"+
    "\3\7\1\u0165\6\7\14\0\1\7\2\0\3\7\5\0"+
    "\22\7\1\u0166\5\7\2\0\12\7\20\0\1\u0167\66\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u0168\5\7\2\0"+
    "\12\7\14\0\1\7\2\0\3\7\5\0\15\7\1\u0169"+
    "\12\7\2\0\4\7\1\u0169\5\7\14\0\1\7\2\0"+
    "\3\7\5\0\1\u016a\27\7\2\0\12\7\14\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u016b\11\7\2\0\5\7"+
    "\1\u016b\4\7\14\0\1\7\2\0\3\7\5\0\15\7"+
    "\1\u016c\12\7\2\0\4\7\1\u016c\5\7\14\0\1\7"+
    "\2\0\3\7\5\0\1\u016d\27\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\23\7\1\u016e\4\7\2\0"+
    "\12\7\16\0\1\u016f\70\0\1\7\2\0\3\7\5\0"+
    "\4\7\1\u0170\23\7\2\0\2\7\1\u0170\7\7\14\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u0171\5\7\2\0"+
    "\12\7\14\0\1\7\2\0\3\7\5\0\13\7\1\u0172"+
    "\14\7\2\0\12\7\14\0\1\7\2\0\3\7\5\0"+
    "\4\7\1\u0173\23\7\2\0\2\7\1\u0173\7\7\14\0"+
    "\1\7\2\0\3\7\5\0\3\7\1\u0174\24\7\2\0"+
    "\12\7\17\0\1\u0175\67\0\1\7\2\0\3\7\5\0"+
    "\4\7\1\u0176\23\7\2\0\2\7\1\u0176\7\7\14\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\u0177\17\7\2\0"+
    "\3\7\1\u0177\6\7\14\0\1\7\2\0\3\7\5\0"+
    "\15\7\1\u0178\12\7\2\0\4\7\1\u0178\5\7\13\0"+
    "\1\u0179\73\0\1\7\2\0\3\7\5\0\27\7\1\u017a"+
    "\2\0\12\7\14\0\1\7\2\0\3\7\5\0\22\7"+
    "\1\u017b\5\7\2\0\12\7\11\0\1\u017c\75\0\1\7"+
    "\2\0\3\7\5\0\1\u017d\27\7\2\0\12\7\14\0"+
    "\1\7\2\0\3\7\5\0\4\7\1\u017e\23\7\2\0"+
    "\2\7\1\u017e\7\7\26\0\1\u017f\60\0\1\7\2\0"+
    "\3\7\5\0\3\7\1\u0180\24\7\2\0\12\7\25\0"+
    "\1\u0181\61\0\1\7\2\0\3\7\5\0\1\u0182\27\7"+
    "\2\0\12\7\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19883];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\17\1\5\11\1\0\27\1\1\0\36\1"+
    "\1\0\36\1\1\0\36\1\1\0\32\1\1\0\27\1"+
    "\1\0\26\1\1\0\23\1\1\0\23\1\1\0\23\1"+
    "\1\0\22\1\1\0\21\1\1\0\15\1\1\0\14\1"+
    "\1\0\11\1\1\0\7\1\1\0\5\1\1\0\3\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[386];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yyline +1, yycolumn +1);
    }

    private Symbol symbol(int type, Object value){
        System.out.println("Token con valor reconocido: " + yytext());
        return new Symbol(type, yyline +1, yycolumn + 1, value);
    }

    private void error (String message){
        System.out.println("Error en la linea: " + (yyline +1) + " columna: " + (yycolumn +1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
                 //errores.agregarError(yytext(), yyline +1, yycolumn + 1, "Lexico", "El simbolo no se encuentra definido en el alfabeto.");
            }
          // fall through
          case 56: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 57: break;
          case 3:
            { return symbol(sym.EXCLAM);
            }
          // fall through
          case 58: break;
          case 4:
            { return symbol(sym.COMILL);
            }
          // fall through
          case 59: break;
          case 5:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 60: break;
          case 6:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 61: break;
          case 7:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 62: break;
          case 8:
            { return symbol(sym.DOSPUN);
            }
          // fall through
          case 63: break;
          case 9:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 64: break;
          case 10:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 65: break;
          case 11:
            { return symbol(sym.QSTMRK);
            }
          // fall through
          case 66: break;
          case 12:
            { return symbol(sym.COROPN);
            }
          // fall through
          case 67: break;
          case 13:
            { return symbol(sym.CORCLS);
            }
          // fall through
          case 68: break;
          case 14:
            { return symbol(sym.LLAVOP);
            }
          // fall through
          case 69: break;
          case 15:
            { return symbol(sym.ORSYMB);
            }
          // fall through
          case 70: break;
          case 16:
            { return symbol(sym.LLAVCL);
            }
          // fall through
          case 71: break;
          case 17:
            { return symbol(sym.ID);
            }
          // fall through
          case 72: break;
          case 18:
            { return symbol(sym.TEMA);
            }
          // fall through
          case 73: break;
          case 19:
            { return symbol(sym.CLASE);
            }
          // fall through
          case 74: break;
          case 20:
            { return symbol(sym.COMBO)      ;
            }
          // fall through
          case 75: break;
          case 21:
            { return symbol(sym.FILAS);
            }
          // fall through
          case 76: break;
          case 22:
            { return symbol(sym.RADIO)      ;
            }
          // fall through
          case 77: break;
          case 23:
            { return symbol(sym.INDICE);
            }
          // fall through
          case 78: break;
          case 24:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 79: break;
          case 25:
            { return symbol(sym.TRIVIA);
            }
          // fall through
          case 80: break;
          case 26:
            { return symbol(sym.FICHERO)    ;
            }
          // fall through
          case 81: break;
          case 27:
            { return symbol(sym.USUARIO);
            }
          // fall through
          case 82: break;
          case 28:
            { return symbol(sym.CHECKBOX)   ;
            }
          // fall through
          case 83: break;
          case 29:
            { return symbol(sym.COLUMNAS);
            }
          // fall through
          case 84: break;
          case 30:
            { return symbol(sym.OPCIONES);
            }
          // fall through
          case 85: break;
          case 31:
            { return symbol(sym.PASSWORD);
            }
          // fall through
          case 86: break;
          case 32:
            { return symbol(sym.ID_TRIVIA);
            }
          // fall through
          case 87: break;
          case 33:
            { return symbol(sym.RESPUESTA);
            }
          // fall through
          case 88: break;
          case 34:
            { return symbol(sym.AREA_TEXTO) ;
            }
          // fall through
          case 89: break;
          case 35:
            { return symbol(sym.CAMPO_TEXTO);
            }
          // fall through
          case 90: break;
          case 36:
            { return symbol(sym.INSTITUCION);
            }
          // fall through
          case 91: break;
          case 37:
            { return symbol(sym.NUEVA_TRIVIA);
            }
          // fall through
          case 92: break;
          case 38:
            { return symbol(sym.DATOS_USUARI);
            }
          // fall through
          case 93: break;
          case 39:
            { return symbol(sym.LOGIN_USUARI);
            }
          // fall through
          case 94: break;
          case 40:
            { return symbol(sym.TEXTO_VISIBL);
            }
          // fall through
          case 95: break;
          case 41:
            { return symbol(sym.USUARIO_NUEV);
            }
          // fall through
          case 96: break;
          case 42:
            { return symbol(sym.NUEVO_PASSWO);
            }
          // fall through
          case 97: break;
          case 43:
            { return symbol(sym.ELIMINAR_TRI);
            }
          // fall through
          case 98: break;
          case 44:
            { return symbol(sym.TIEMPO_PREGU);
            }
          // fall through
          case 99: break;
          case 45:
            { return symbol(sym.USUA_ANTIGUO);
            }
          // fall through
          case 100: break;
          case 46:
            { return symbol(sym.ELIMINAR_USU);
            }
          // fall through
          case 101: break;
          case 47:
            { return symbol(sym.MODIF_TRIVIA);
            }
          // fall through
          case 102: break;
          case 48:
            { return symbol(sym.MODI_USUARIO);
            }
          // fall through
          case 103: break;
          case 49:
            { return symbol(sym.PARAM_TRIVIA);
            }
          // fall through
          case 104: break;
          case 50:
            { return symbol(sym.AGREGAR_COMP);
            }
          // fall through
          case 105: break;
          case 51:
            { return symbol(sym.REALIZAR_SOL);
            }
          // fall through
          case 106: break;
          case 52:
            { return symbol(sym.ELIMINAR_COM);
            }
          // fall through
          case 107: break;
          case 53:
            { return symbol(sym.PARAMETROS_C);
            }
          // fall through
          case 108: break;
          case 54:
            { return symbol(sym.ENCABEZADO);
            }
          // fall through
          case 109: break;
          case 55:
            { return symbol(sym.FIN_SOL_REAL);
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
