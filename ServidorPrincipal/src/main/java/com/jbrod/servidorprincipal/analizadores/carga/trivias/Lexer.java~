// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: LexerTrivias.flex

/* - - - - - - - - - - - - - - - - - CODIGO DE USUARIO - - - - - - - - - - - - - - - - - */
package com.jbrod.servidorprincipal.analizadores.carga.trivias;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\1\1\4"+
    "\1\5\1\0\1\6\3\0\1\7\1\10\2\0\1\11"+
    "\1\12\2\0\12\13\1\14\1\0\1\15\1\0\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\26\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\26\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\26\1\46\1\0\1\47\1\0\1\50"+
    "\1\0\1\51\1\26\1\52\1\26\1\53\3\26\1\54"+
    "\4\26\1\55\1\56\1\57\1\26\1\60\1\61\1\62"+
    "\1\63\1\64\4\26\1\65\1\66\1\67\7\0\1\1"+
    "\32\0\1\1\36\0\1\70\u01c0\0\1\1\177\0\13\1"+
    "\21\0\2\5\12\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\13\5\1\16"+
    "\1\17\3\5\1\20\1\21\1\22\1\0\26\5\1\0"+
    "\32\5\1\0\22\5\1\23\7\5\1\0\4\5\1\24"+
    "\1\5\1\25\1\5\1\26\10\5\1\27\10\5\1\0"+
    "\7\5\1\30\1\5\1\31\2\5\1\32\3\5\1\33"+
    "\1\34\2\5\1\35\1\5\1\0\4\5\1\36\1\37"+
    "\7\5\1\40\1\41\2\5\1\0\3\5\1\42\2\5"+
    "\1\43\1\44\4\5\1\45\1\0\2\5\1\46\1\47"+
    "\2\5\1\50\2\5\1\0\1\51\5\5\1\0\1\52"+
    "\1\53\3\5\1\0\2\5\1\54\1\0\1\5\1\55"+
    "\1\0\1\5\1\56\2\5\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\71\0\71\0\253\0\71"+
    "\0\71\0\71\0\344\0\71\0\u011d\0\71\0\71\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\71\0\71\0\u03c9\0\u0402\0\u043b\0\71"+
    "\0\71\0\71\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u018f"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u018f\0\u167d\0\u018f\0\u16b6"+
    "\0\u018f\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u018f\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u018f\0\u1c47\0\u018f\0\u1c80\0\u1cb9\0\u018f"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\u018f\0\u1d9d\0\u1dd6\0\u1e0f\0\u018f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u018f\0\u018f"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u018f"+
    "\0\u018f\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u018f"+
    "\0\u2283\0\u22bc\0\u018f\0\u018f\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u018f\0\u23d9\0\u2412\0\u244b\0\253\0\253\0\u2484\0\u24bd"+
    "\0\u018f\0\u24f6\0\u252f\0\u2568\0\253\0\u25a1\0\u25da\0\u2613"+
    "\0\u264c\0\u2685\0\u26be\0\253\0\u018f\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u018f\0\u284d\0\u2886\0\253\0\u28bf"+
    "\0\u28f8\0\71\0\u2931\0\u296a\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\7\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\2\21\1\23\2\21\1\24\3\21\1\25"+
    "\1\26\1\27\1\30\1\21\1\31\1\32\3\21\1\33"+
    "\1\34\1\7\6\21\1\35\2\21\1\36\1\37\1\21"+
    "\1\40\1\41\1\42\1\13\73\0\1\3\74\0\1\7"+
    "\3\0\2\7\4\0\26\7\2\0\15\7\5\0\3\13"+
    "\7\0\1\13\3\0\27\13\3\0\14\13\3\0\1\13"+
    "\21\0\1\43\50\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\17\21\1\44\6\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\26\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\1\45\6\21\1\46\5\21\1\47"+
    "\1\21\1\50\6\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\4\21\1\51\3\21\1\52\15\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\3\21\1\53\10\21\1\54"+
    "\11\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\15\21"+
    "\1\55\10\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\16\21\1\56\7\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\1\57\21\21\1\60\3\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\1\61\3\21\1\62\21\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\4\21\1\63\3\21"+
    "\1\64\6\21\1\65\6\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\20\21\1\66\5\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\26\21\2\0\1\7\12\21\1\67"+
    "\1\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\26\21\2\0\1\7\7\21"+
    "\1\70\4\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\26\21\2\0\1\7"+
    "\10\21\1\71\3\21\3\0\1\13\20\0\1\72\51\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\4\21\1\73\21\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\13\21\1\74\12\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\4\21\1\75\21\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\12\21\1\76\1\77\12\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\4\21\1\100\21\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\2\21\1\101"+
    "\23\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\2\21"+
    "\1\102\7\21\1\103\13\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\104\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\3\21\1\105\14\21\1\106\5\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\13\21\1\107\12\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\2\21\1\110\23\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\20\21\1\111"+
    "\5\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\14\21"+
    "\1\112\11\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\3\21\1\113\22\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\20\21\1\114\5\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\13\21\1\115\11\21\1\116\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\4\21\1\117\21\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\10\21\1\120\15\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\22\21\1\121"+
    "\3\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\26\21"+
    "\2\0\1\7\4\21\1\122\7\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\3\21\1\123\10\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\7\12\21\1\124\1\21\3\0"+
    "\1\13\40\0\1\125\31\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\1\126\25\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\16\21\1\127\7\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\2\21\1\130\23\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\22\21\1\131"+
    "\3\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\1\21"+
    "\1\132\24\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\1\133\25\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\7\21\1\134\16\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\7\21\1\135\16\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\1\136\25\21\2\0\1\7\14\21\3\0"+
    "\1\13\6\0\1\7\3\0\2\7\4\0\21\7\1\137"+
    "\4\7\2\0\15\7\5\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\10\21\1\140\15\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\21\21\1\141\4\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\1\21\1\142"+
    "\24\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\10\21"+
    "\1\143\15\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\20\21\1\144\5\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\21\21\1\145\4\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\10\21\1\146\15\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\16\21\1\147\7\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\1\150\25\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\21\21\1\151\4\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\13\21\1\152\12\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\23\21\1\153"+
    "\2\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\1\154"+
    "\25\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\26\21"+
    "\2\0\1\7\11\21\1\155\2\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\13\21\1\156\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\1\157\13\21\3\0\1\13\24\0"+
    "\1\160\45\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\161\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\15\21\1\162\10\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\11\21\1\163\14\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\13\21\1\164\12\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\15\21\1\165\10\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\3\21\1\166\22\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\1\167\25\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\4\21\1\170"+
    "\21\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\20\21"+
    "\1\171\5\21\2\0\1\7\14\21\3\0\1\13\6\0"+
    "\1\7\3\0\2\7\4\0\17\7\1\172\6\7\2\0"+
    "\15\7\5\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\2\21\1\173\23\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\10\21\1\174\15\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\17\21\1\175\6\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\15\21\1\176\10\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\24\21\1\177"+
    "\1\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\4\21"+
    "\1\200\15\21\1\201\3\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\15\21\1\202\10\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\22\21\1\203\3\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\15\21\1\204\10\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\16\21\1\205\7\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\10\21\1\206"+
    "\15\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\17\21"+
    "\1\207\6\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\12\21\1\210\1\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\7\3\21\1\211\10\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\7\7\21\1\212\4\21"+
    "\3\0\1\13\50\0\1\213\26\0\1\7\3\0\2\7"+
    "\4\0\21\7\1\214\4\7\2\0\15\7\5\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\26\21"+
    "\2\0\1\215\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\216\1\21\3\0\1\13\26\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\14\21\1\217\11\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\15\21\1\220"+
    "\10\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\17\21"+
    "\1\221\6\21\2\0\1\7\14\21\3\0\1\13\6\0"+
    "\1\7\3\0\2\7\4\0\10\7\1\222\15\7\2\0"+
    "\15\7\5\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\4\21\1\223\21\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\21\21\1\224\4\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\4\21\1\225\21\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\14\21\1\226\11\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\15\21\1\227"+
    "\10\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\15\21"+
    "\1\230\10\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\1\231\25\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\4\21\1\232\21\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\233\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\15\21\1\234\10\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\1\235\25\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\10\21\1\236\15\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\7\1\237\13\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\7\1\240\13\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\7\3\21\1\241\10\21"+
    "\3\0\1\13\23\0\1\242\53\0\1\7\3\0\2\7"+
    "\4\0\4\7\1\243\21\7\2\0\15\7\12\0\1\7"+
    "\3\0\2\7\4\0\21\7\1\244\4\7\2\0\15\7"+
    "\12\0\1\7\3\0\2\7\4\0\1\7\1\245\24\7"+
    "\2\0\15\7\5\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\1\246\25\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\17\21\1\247\6\21\2\0\1\7"+
    "\14\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\15\21\1\250\10\21\2\0"+
    "\1\7\14\21\3\0\1\13\6\0\1\7\3\0\2\7"+
    "\4\0\23\7\1\251\2\7\2\0\15\7\5\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\22\21"+
    "\1\252\3\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\4\21\1\253\21\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\17\21\1\254\6\21\2\0\1\7\14\21\3\0"+
    "\1\13\1\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\2\21\1\255\23\21\2\0\1\7\14\21"+
    "\3\0\1\13\1\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\20\21\1\256\5\21\2\0\1\7"+
    "\14\21\3\0\1\13\6\0\1\7\3\0\2\7\4\0"+
    "\23\7\1\257\2\7\2\0\15\7\5\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\20\21\1\260"+
    "\5\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\15\21"+
    "\1\261\10\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\1\21\1\262\12\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\7\5\21\1\263\6\21\3\0"+
    "\1\13\24\0\1\264\52\0\1\7\3\0\2\7\4\0"+
    "\25\7\1\265\2\0\15\7\12\0\1\7\3\0\2\7"+
    "\4\0\4\7\1\266\21\7\2\0\15\7\12\0\1\7"+
    "\3\0\2\7\4\0\15\7\1\267\10\7\2\0\15\7"+
    "\5\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\20\21\1\270\5\21\2\0\1\7\14\21\3\0"+
    "\1\13\6\0\1\7\3\0\2\7\4\0\10\7\1\271"+
    "\15\7\2\0\15\7\5\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\2\21\1\272\23\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\20\21\1\273\5\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\3\21\1\274"+
    "\22\21\2\0\1\7\14\21\3\0\1\13\1\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\10\21"+
    "\1\275\15\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\21\21\1\276\4\21\2\0\1\7\14\21\3\0\1\13"+
    "\6\0\1\7\3\0\2\7\4\0\10\7\1\277\15\7"+
    "\2\0\15\7\5\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\26\21\2\0\1\7\3\21\1\300"+
    "\10\21\3\0\1\13\1\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\26\21\2\0\1\7\10\21"+
    "\1\301\3\21\3\0\1\13\50\0\1\302\26\0\1\7"+
    "\3\0\2\7\4\0\21\7\1\303\4\7\2\0\15\7"+
    "\12\0\1\7\3\0\2\7\4\0\25\7\1\304\2\0"+
    "\15\7\12\0\1\7\3\0\2\7\4\0\25\7\1\305"+
    "\2\0\15\7\12\0\1\7\3\0\2\7\4\0\1\306"+
    "\25\7\2\0\15\7\5\0\3\13\2\0\1\7\3\0"+
    "\1\7\1\21\3\0\1\13\10\21\1\307\15\21\2\0"+
    "\1\7\14\21\3\0\1\13\1\0\3\13\2\0\1\7"+
    "\3\0\1\7\1\21\3\0\1\13\15\21\1\310\10\21"+
    "\2\0\1\7\14\21\3\0\1\13\1\0\3\13\2\0"+
    "\1\7\3\0\1\7\1\21\3\0\1\13\1\311\25\21"+
    "\2\0\1\7\14\21\3\0\1\13\6\0\1\7\3\0"+
    "\2\7\4\0\20\7\1\312\5\7\2\0\15\7\5\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\26\21\2\0\1\7\5\21\1\313\6\21\3\0\1\13"+
    "\23\0\1\314\53\0\1\7\3\0\2\7\4\0\15\7"+
    "\1\315\10\7\2\0\15\7\12\0\1\7\3\0\2\7"+
    "\4\0\21\7\1\316\4\7\2\0\15\7\5\0\3\13"+
    "\2\0\1\7\3\0\1\7\1\21\3\0\1\13\15\21"+
    "\1\317\10\21\2\0\1\7\14\21\3\0\1\13\1\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\14\21\1\320\11\21\2\0\1\7\14\21\3\0\1\13"+
    "\6\0\1\7\3\0\2\7\4\0\10\7\1\321\15\7"+
    "\2\0\15\7\5\0\3\13\2\0\1\7\3\0\1\7"+
    "\1\21\3\0\1\13\26\21\2\0\1\7\4\21\1\322"+
    "\7\21\3\0\1\13\20\0\1\323\56\0\1\7\3\0"+
    "\2\7\4\0\15\7\1\324\10\7\2\0\15\7\5\0"+
    "\3\13\2\0\1\7\3\0\1\7\1\21\3\0\1\13"+
    "\14\21\1\325\11\21\2\0\1\7\14\21\3\0\1\13"+
    "\1\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\326\14\21\3\0\1\13\6\0"+
    "\1\7\3\0\2\7\4\0\1\7\1\327\24\7\2\0"+
    "\15\7\5\0\3\13\2\0\1\7\3\0\1\7\1\21"+
    "\3\0\1\13\26\21\2\0\1\7\2\21\1\330\11\21"+
    "\3\0\1\13\41\0\1\331\35\0\1\7\3\0\2\7"+
    "\4\0\21\7\1\332\4\7\2\0\15\7\12\0\1\7"+
    "\3\0\2\7\4\0\12\7\1\333\13\7\2\0\15\7"+
    "\5\0\3\13\2\0\1\7\3\0\1\7\1\21\3\0"+
    "\1\13\26\21\2\0\1\7\10\21\1\334\3\21\3\0"+
    "\1\13\35\0\1\335\41\0\1\7\3\0\2\7\4\0"+
    "\17\7\1\336\6\7\2\0\15\7\12\0\1\7\3\0"+
    "\2\7\4\0\4\7\1\337\21\7\2\0\15\7\44\0"+
    "\1\340\36\0\1\7\3\0\2\7\4\0\10\7\1\341"+
    "\15\7\2\0\15\7\22\0\1\342\60\0\1\7\3\0"+
    "\2\7\4\0\23\7\1\343\2\7\2\0\15\7\12\0"+
    "\1\7\3\0\2\7\4\0\10\7\1\344\15\7\2\0"+
    "\15\7\12\0\1\7\3\0\2\7\4\0\1\345\25\7"+
    "\2\0\15\7\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10659];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\3\11\1\1\1\11"+
    "\1\1\2\11\13\1\2\11\3\1\3\11\1\0\26\1"+
    "\1\0\32\1\1\0\32\1\1\0\32\1\1\0\26\1"+
    "\1\0\21\1\1\0\15\1\1\0\11\1\1\0\6\1"+
    "\1\0\5\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline +1, yycolumn +1);
    }

    private Symbol symbol(int type, Object value){
        System.out.println("Token con valor reconocido: " + yytext());
        return new Symbol(type, yyline +1, yycolumn + 1, value);
    }

    private void error (String message){
        System.out.println("Error en la linea: " + (yyline +1) + " columna: " + (yycolumn +1) + " : " + message);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
                 //errores.agregarError(yytext(), yyline +1, yycolumn + 1, "Lexico", "El simbolo no se encuentra definido en el alfabeto.");
            }
          // fall through
          case 48: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 49: break;
          case 3:
            { return symbol(sym.EXCLAM);
            }
          // fall through
          case 50: break;
          case 4:
            { return symbol(sym.COMILL);
            }
          // fall through
          case 51: break;
          case 5:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 52: break;
          case 6:
            { return symbol(sym.PAROPN);
            }
          // fall through
          case 53: break;
          case 7:
            { return symbol(sym.PARCLS);
            }
          // fall through
          case 54: break;
          case 8:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 55: break;
          case 9:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 56: break;
          case 10:
            { return symbol(sym.DOSPUN);
            }
          // fall through
          case 57: break;
          case 11:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 58: break;
          case 12:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 59: break;
          case 13:
            { return symbol(sym.QSTMRK);
            }
          // fall through
          case 60: break;
          case 14:
            { return symbol(sym.COROPN);
            }
          // fall through
          case 61: break;
          case 15:
            { return symbol(sym.CORCLS);
            }
          // fall through
          case 62: break;
          case 16:
            { return symbol(sym.LLAVOP);
            }
          // fall through
          case 63: break;
          case 17:
            { return symbol(sym.ORSYMB);
            }
          // fall through
          case 64: break;
          case 18:
            { return symbol(sym.LLAVCL);
            }
          // fall through
          case 65: break;
          case 19:
            { return symbol(sym.TEMA  );
            }
          // fall through
          case 66: break;
          case 20:
            { return symbol(sym.COMBO  );
            }
          // fall through
          case 67: break;
          case 21:
            { return symbol(sym.FECHA );
            }
          // fall through
          case 68: break;
          case 22:
            { return symbol(sym.PARAM_FIL);
            }
          // fall through
          case 69: break;
          case 23:
            { return symbol(sym.RADIO  );
            }
          // fall through
          case 70: break;
          case 24:
            { return symbol(sym.PARAM_IND);
            }
          // fall through
          case 71: break;
          case 25:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 72: break;
          case 26:
            { return symbol(sym.PUNTEO);
            }
          // fall through
          case 73: break;
          case 27:
            { return symbol(sym.TIEMPO);
            }
          // fall through
          case 74: break;
          case 28:
            { return symbol(sym.PARAM_TRI);
            }
          // fall through
          case 75: break;
          case 29:
            { return symbol(sym.TRIVIA);
            }
          // fall through
          case 76: break;
          case 30:
            { return symbol(sym.CREADO);
            }
          // fall through
          case 77: break;
          case 31:
            { return symbol(sym.FICHERO);
            }
          // fall through
          case 78: break;
          case 32:
            { return symbol(sym.TRIVIAS);
            }
          // fall through
          case 79: break;
          case 33:
            { return symbol(sym.USUARIO);
            }
          // fall through
          case 80: break;
          case 34:
            { return symbol(sym.PARAM_COL);
            }
          // fall through
          case 81: break;
          case 35:
            { return symbol(sym.PARAM_OPC);
            }
          // fall through
          case 82: break;
          case 36:
            { return symbol(sym.PASSWORD);
            }
          // fall through
          case 83: break;
          case 37:
            { return symbol(sym.USUARIOS);
            }
          // fall through
          case 84: break;
          case 38:
            { // Acción a realizar cuando se encuentra "CHECK-BOX"
        return symbol(sym.CHECKBO);
            }
          // fall through
          case 85: break;
          case 39:
            { return symbol(sym.ID_TRI);
            }
          // fall through
          case 86: break;
          case 40:
            { return symbol(sym.PARAM_RES);
            }
          // fall through
          case 87: break;
          case 41:
            { return symbol(sym.AREA_TE);
            }
          // fall through
          case 88: break;
          case 42:
            { return symbol(sym.CAMPO_T);
            }
          // fall through
          case 89: break;
          case 43:
            { return symbol(sym.INSTITUC);
            }
          // fall through
          case 90: break;
          case 44:
            { return symbol(sym.PUNTUACIONES);
            }
          // fall through
          case 91: break;
          case 45:
            { return symbol(sym.PARAM_TEX);
            }
          // fall through
          case 92: break;
          case 46:
            { return symbol(sym.ENCABEZADO);
            }
          // fall through
          case 93: break;
          case 47:
            { return symbol(sym.PUNTUACION_T);
            }
          // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
