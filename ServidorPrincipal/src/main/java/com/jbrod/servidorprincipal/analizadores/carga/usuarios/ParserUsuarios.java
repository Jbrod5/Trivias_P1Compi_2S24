
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.servidorprincipal.analizadores.carga.usuarios;

import java_cup.runtime.*;
import com.jbrod.servidorprincipal.trivias.Motor;
import com.jbrod.servidorprincipal.trivias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserUsuarios extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserUsuarios() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserUsuarios(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserUsuarios(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\003\000\002\025" +
    "\003\000\002\025\003\000\002\006\032\000\002\007\004" +
    "\000\002\007\002\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\053\004\001\002\000\004\021\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\011\011\022\ufffb\001" +
    "\002\000\004\054\016\001\002\000\006\011\011\022\ufffb" +
    "\001\002\000\004\022\014\001\002\000\004\002\ufffa\001" +
    "\002\000\004\022\ufffc\001\002\000\004\014\017\001\002" +
    "\000\004\006\020\001\002\000\004\012\021\001\002\000" +
    "\004\015\022\001\002\000\004\025\023\001\002\000\004" +
    "\055\024\001\002\000\004\025\025\001\002\000\004\014" +
    "\026\001\002\000\006\006\030\007\027\001\002\000\006" +
    "\016\ufffe\023\ufffe\001\002\000\006\016\uffff\023\uffff\001" +
    "\002\000\004\023\032\001\002\000\004\025\033\001\002" +
    "\000\004\030\034\001\002\000\004\025\035\001\002\000" +
    "\004\014\036\001\002\000\006\006\030\007\027\001\002" +
    "\000\004\023\040\001\002\000\004\025\041\001\002\000" +
    "\004\056\042\001\002\000\004\025\043\001\002\000\004" +
    "\014\044\001\002\000\006\006\030\007\027\001\002\000" +
    "\004\016\046\001\002\000\006\011\ufffd\022\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\002\005\010\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\011\007\012\001\001\000\002\001\001\000" +
    "\006\006\011\007\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\044\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserUsuarios$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserUsuarios$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserUsuarios$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        public String resultado = "";

        private Motor motor; 

        // Conectar el parser al escaner
        public ParserUsuarios(LexerUsuarios lex, Motor motor){
            super(lex);
            this.motor = motor;
        }

        public void syntax_error(Symbol cur_token){
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("Ya no se esperaba ningun simbolo");
                //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
            }else{
                //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
            }
        }

        /*public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/

    private String secureString(Object o){
            if( o != null){
                return o.toString();
            }else{
                return "";
            }
    }

    private int secureInt(Object o){
            String i = secureString(o);
            //System.out.println("A convertir: " + i);
            try{
                int n = Integer.parseInt(i);
                //System.out.println("Convertido: " + n);
                return n;
            }catch(NumberFormatException e){
                //System.out.println("Hubo un error al convertir un numero.");
                return 10;
            }
    }

    private void imprimir(String st){
            System.out.println(st + "\n\n\n\n");
    }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserUsuarios$actions {
  private final ParserUsuarios parser;

  /** Constructor */
  CUP$ParserUsuarios$actions(ParserUsuarios parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserUsuarios$do_action_part00000000(
    int                        CUP$ParserUsuarios$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsuarios$parser,
    java.util.Stack            CUP$ParserUsuarios$stack,
    int                        CUP$ParserUsuarios$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserUsuarios$result;

      /* select the action based on the action number */
      switch (CUP$ParserUsuarios$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).value;
		RESULT = start_val;
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserUsuarios$parser.done_parsing();
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= usuarios 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // id_st ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		 RESULT = id; 
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("id_st",19, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id_st ::= STRING 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.peek()).value;
		 RESULT = st; 
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("id_st",19, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // usuario ::= MENQUE USUARIO DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PASSWORD COMILL DOSPUN id_st COMMA COMILL NOMBRE COMILL DOSPUN id_st COMMA COMILL INSTITUC COMILL DOSPUN id_st LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-20)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-20)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-20)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-13)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-13)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-13)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-7)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-7)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-7)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)).value;
		
                    resultado += "Usuario nuevo: " +  id.toString() + " " + ps.toString() + " " + nm.toString() + " " + in.toString () + "\n";
                    Usuario usuario = new Usuario(secureString(id), secureString(ps), secureString(nm), secureString(in));
                    imprimir(motor.agregarUsuario(usuario));
                
              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("usuario",4, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-23)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // multiples_usuarios ::= usuario multiples_usuarios 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("multiples_usuarios",5, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // multiples_usuarios ::= 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("multiples_usuarios",5, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // usuarios ::= USUARIOS PAROPN multiples_usuarios PARCLS 
            {
              Object RESULT =null;

              CUP$ParserUsuarios$result = parser.getSymbolFactory().newSymbol("usuarios",6, ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.elementAt(CUP$ParserUsuarios$top-3)), ((java_cup.runtime.Symbol)CUP$ParserUsuarios$stack.peek()), RESULT);
            }
          return CUP$ParserUsuarios$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserUsuarios$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserUsuarios$do_action(
    int                        CUP$ParserUsuarios$act_num,
    java_cup.runtime.lr_parser CUP$ParserUsuarios$parser,
    java.util.Stack            CUP$ParserUsuarios$stack,
    int                        CUP$ParserUsuarios$top)
    throws java.lang.Exception
    {
              return CUP$ParserUsuarios$do_action_part00000000(
                               CUP$ParserUsuarios$act_num,
                               CUP$ParserUsuarios$parser,
                               CUP$ParserUsuarios$stack,
                               CUP$ParserUsuarios$top);
    }
}

}
