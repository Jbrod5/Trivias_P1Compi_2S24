// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

/* - - - - - - - - - - - - - - - - - CODIGO DE USUARIO - - - - - - - - - - - - - - - - - */

package com.jbrod.servidorprincipal.analizadores;
import java_cup.runtime.*;



@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\3\1\4\1\0\1\5"+
    "\7\0\1\6\1\5\1\7\1\0\1\10\1\11\10\12"+
    "\1\13\1\0\1\14\1\15\1\16\1\17\1\0\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\27\1\31\1\32\1\33\1\34\1\35\1\27\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\27\1\45"+
    "\1\46\1\0\1\47\1\0\1\50\1\0\1\20\1\21"+
    "\1\51\1\23\1\52\1\25\1\26\1\27\1\53\2\27"+
    "\1\31\1\32\1\54\1\55\1\35\1\27\1\56\1\57"+
    "\1\40\1\41\1\60\1\43\1\61\1\27\1\45\1\62"+
    "\1\0\1\63\7\0\1\1\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\17\5\1\14\1\15\1\16"+
    "\1\17\1\0\6\5\1\20\14\5\1\0\30\5\1\0"+
    "\23\5\1\21\4\5\1\0\1\5\1\22\3\5\1\23"+
    "\22\5\1\0\6\5\1\24\3\5\1\25\11\5\1\26"+
    "\3\5\1\0\22\5\1\27\1\5\1\0\1\5\1\30"+
    "\11\5\1\31\1\5\1\32\6\5\1\0\4\5\1\33"+
    "\7\5\1\34\4\5\1\0\20\5\1\0\5\5\1\35"+
    "\13\5\1\0\10\5\1\36\6\5\1\37\1\0\1\5"+
    "\1\40\3\5\1\41\5\5\1\42\2\5\1\0\6\5"+
    "\1\43\4\5\1\0\1\5\1\44\6\5\1\45\1\46"+
    "\1\0\1\5\1\47\1\5\1\50\3\5\1\0\2\5"+
    "\1\51\1\52\1\53\1\0\1\54\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\64\0\234\0\64\0\320"+
    "\0\64\0\u0104\0\64\0\64\0\u0138\0\u016c\0\u01a0\0\u01d4"+
    "\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\64\0\64\0\64\0\64\0\u0444"+
    "\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04"+
    "\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4"+
    "\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144"+
    "\0\u016c\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u016c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u016c\0\u134c\0\u1380\0\u13b4\0\u13e8"+
    "\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588"+
    "\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728"+
    "\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u182c\0\u016c\0\u1860\0\u1894"+
    "\0\u18c8\0\u016c\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u016c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac"+
    "\0\u1ee0\0\u1f14\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u016c\0\u2018"+
    "\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8"+
    "\0\u016c\0\u21ec\0\u016c\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0"+
    "\0\u2324\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\234\0\u245c"+
    "\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u016c\0\u25c8"+
    "\0\u25fc\0\u2630\0\u2664\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768"+
    "\0\u279c\0\u27d0\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908"+
    "\0\u293c\0\u2970\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u016c\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14"+
    "\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4"+
    "\0\u2de8\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\234"+
    "\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\234\0\u308c"+
    "\0\u30c0\0\234\0\u30f4\0\u3128\0\u315c\0\234\0\u3190\0\u31c4"+
    "\0\u31f8\0\u322c\0\u3260\0\234\0\u3294\0\u32c8\0\u32fc\0\u3330"+
    "\0\u3364\0\u3398\0\u33cc\0\u3400\0\u3434\0\234\0\u3468\0\u349c"+
    "\0\u34d0\0\u3504\0\u3538\0\u356c\0\234\0\u35a0\0\u35d4\0\u3608"+
    "\0\u363c\0\u3670\0\u36a4\0\234\0\234\0\u36d8\0\u370c\0\234"+
    "\0\u3740\0\234\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844\0\u3878"+
    "\0\234\0\234\0\234\0\u38ac\0\234\0\u38e0\0\u3914\0\u3948"+
    "\0\u397c\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\64\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\3\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\16\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\16\1\32\1\33\4\16\1\34"+
    "\1\35\1\6\1\17\1\21\1\23\1\26\1\27\1\31"+
    "\3\16\1\36\1\37\65\0\2\3\5\0\3\3\5\0"+
    "\26\3\3\0\11\3\7\0\1\6\2\0\3\6\5\0"+
    "\26\6\2\0\12\6\3\0\2\3\5\0\3\10\5\0"+
    "\26\3\3\0\11\3\21\0\1\40\45\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\6\16\1\41\17\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\26\16\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\11\16\1\42\2\16\1\43"+
    "\11\16\2\0\1\6\4\16\1\43\4\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\1\44\25\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\11\16\1\45\14\16\2\0\1\6\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\10\16\1\46"+
    "\15\16\2\0\1\6\2\16\1\46\6\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\3\16\1\47\7\16"+
    "\1\50\12\16\2\0\1\6\3\16\1\50\5\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\14\16\1\51"+
    "\11\16\2\0\1\6\4\16\1\51\4\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\14\16\1\52\11\16"+
    "\2\0\1\6\4\16\1\52\4\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\14\16\1\53\4\16\1\54"+
    "\4\16\2\0\1\6\4\16\1\53\4\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\15\16\1\55\10\16"+
    "\2\0\1\6\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\1\56\25\16\2\0\1\6\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\4\16\1\57"+
    "\21\16\2\0\1\6\1\16\1\57\7\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\4\16\1\60\3\16"+
    "\1\61\5\16\1\62\7\16\2\0\1\6\1\16\1\60"+
    "\1\61\2\16\1\62\3\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\17\16\1\63\6\16\2\0\1\6"+
    "\6\16\1\63\2\16\63\0\1\64\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\16\16\1\65\7\16\2\0"+
    "\1\6\5\16\1\65\3\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\1\66\25\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\11\16"+
    "\1\67\14\16\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\20\16\1\70\5\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\10\16\1\71\15\16\2\0\1\6\2\16\1\71"+
    "\6\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\11\16\1\72\1\16\1\73\12\16\2\0\1\6\3\16"+
    "\1\73\5\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\26\16\2\0\1\74\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\3\16\1\75\13\16\1\76"+
    "\6\16\2\0\1\6\6\16\1\76\2\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\6\16\1\77\17\16"+
    "\2\0\1\6\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\3\16\1\100\22\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\12\16"+
    "\1\101\13\16\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\4\16\1\102\21\16\2\0"+
    "\1\6\1\16\1\102\7\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\2\16\1\103\23\16\2\0\1\6"+
    "\1\103\10\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\16\16\1\104\1\105\6\16\2\0\1\6\5\16"+
    "\1\104\1\105\2\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\1\106\16\16\1\107\6\16\2\0\1\6"+
    "\6\16\1\107\2\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\12\16\1\110\11\16\1\111\1\16\2\0"+
    "\1\6\10\16\1\111\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\4\16\1\112\21\16\2\0\1\6\1\16"+
    "\1\112\7\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\10\16\1\113\15\16\2\0\1\6\2\16\1\113"+
    "\6\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\21\16\1\114\4\16\2\0\1\6\11\16\61\0\1\115"+
    "\5\0\2\3\2\0\1\6\2\0\3\16\5\0\4\16"+
    "\1\116\21\16\2\0\1\6\1\16\1\116\7\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\17\16\1\117"+
    "\6\16\2\0\1\6\6\16\1\117\2\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\21\16\1\120\4\16"+
    "\2\0\1\6\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\14\16\1\121\11\16\2\0\1\6\4\16"+
    "\1\121\4\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\12\16\1\122\13\16\2\0\1\6\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\1\123\25\16"+
    "\2\0\1\6\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\26\16\2\0\1\124\11\16\7\0\1\6"+
    "\2\0\3\6\5\0\20\6\1\125\5\6\2\0\12\6"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\10\16"+
    "\1\126\15\16\2\0\1\6\2\16\1\126\6\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\20\16\1\127"+
    "\5\16\2\0\1\6\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\10\16\1\130\15\16\2\0\1\6"+
    "\2\16\1\130\6\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\10\16\1\131\15\16\2\0\1\6\2\16"+
    "\1\131\6\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\1\16\1\132\24\16\2\0\1\6\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\22\16\1\133"+
    "\3\16\2\0\1\6\7\16\1\133\1\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\10\16\1\134\15\16"+
    "\2\0\1\6\2\16\1\134\6\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\1\135\25\16\2\0\1\6"+
    "\11\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\17\16\1\136\6\16\2\0\1\6\6\16\1\136\2\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\11\16"+
    "\1\137\14\16\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\15\16\1\140\10\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\1\141\25\16\2\0\1\6\11\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\20\16\1\142\5\16"+
    "\2\0\1\6\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\12\16\1\143\13\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\22\16"+
    "\1\144\3\16\2\0\1\6\7\16\1\144\1\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\1\145\25\16"+
    "\2\0\1\6\11\16\57\0\1\146\7\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\6\16\1\147\17\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\4\16\1\150\21\16\2\0\1\6\1\16\1\150"+
    "\7\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\12\16\1\151\13\16\2\0\1\6\11\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\17\16\1\152\6\16"+
    "\2\0\1\6\6\16\1\152\2\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\10\16\1\153\15\16\2\0"+
    "\1\6\2\16\1\153\6\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\17\16\1\154\6\16\2\0\1\6"+
    "\6\16\1\154\2\16\7\0\1\6\2\0\3\6\5\0"+
    "\17\6\1\155\6\6\2\0\7\6\1\155\2\6\7\0"+
    "\1\6\2\0\3\6\5\0\16\6\1\156\7\6\2\0"+
    "\6\6\1\156\3\6\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\2\16\1\157\23\16\2\0\1\6\1\157"+
    "\10\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\10\16\1\160\15\16\2\0\1\6\2\16\1\160\6\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\13\16"+
    "\1\161\12\16\2\0\1\6\3\16\1\161\5\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\5\16\1\162"+
    "\20\16\2\0\1\6\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\16\16\1\163\7\16\2\0\1\6"+
    "\5\16\1\163\3\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\1\164\13\16\1\165\11\16\2\0\1\6"+
    "\4\16\1\165\4\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\14\16\1\166\11\16\2\0\1\6\4\16"+
    "\1\166\4\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\12\16\1\167\13\16\2\0\1\6\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\23\16\1\170"+
    "\2\16\2\0\1\6\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\10\16\1\171\15\16\2\0\1\6"+
    "\2\16\1\171\6\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\21\16\1\172\4\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\14\16"+
    "\1\173\11\16\2\0\1\6\4\16\1\173\4\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\15\16\1\174"+
    "\10\16\2\0\1\6\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\10\16\1\175\15\16\2\0\1\6"+
    "\2\16\1\175\6\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\16\16\1\176\7\16\2\0\1\6\5\16"+
    "\1\176\3\16\56\0\1\177\10\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\1\200\25\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\13\16"+
    "\1\201\12\16\2\0\1\6\3\16\1\201\5\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\26\16\2\0"+
    "\1\202\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\13\16\1\203\12\16\2\0\1\6\3\16\1\203"+
    "\5\16\7\0\1\6\2\0\3\6\5\0\14\6\1\204"+
    "\11\6\2\0\5\6\1\204\4\6\7\0\1\6\2\0"+
    "\3\6\5\0\10\6\1\205\15\6\2\0\3\6\1\205"+
    "\6\6\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\4\16\1\206\21\16\2\0\1\6\1\16\1\206\7\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\20\16"+
    "\1\207\5\16\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\26\16\2\0\1\210\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\10\16"+
    "\1\211\15\16\2\0\1\6\2\16\1\211\6\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\4\16\1\212"+
    "\21\16\2\0\1\6\1\16\1\212\7\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\26\16\2\0\1\213"+
    "\11\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\26\16\2\0\1\214\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\13\16\1\215\12\16\2\0\1\6"+
    "\3\16\1\215\5\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\4\16\1\216\21\16\2\0\1\6\1\16"+
    "\1\216\7\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\14\16\1\217\11\16\2\0\1\6\4\16\1\217"+
    "\4\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\25\16\1\220\2\0\1\6\11\16\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\4\16\1\221\21\16\2\0"+
    "\1\6\1\16\1\221\7\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\26\16\2\0\1\222\11\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\14\16\1\223"+
    "\11\16\2\0\1\6\4\16\1\223\4\16\3\0\2\3"+
    "\2\0\1\6\2\0\3\16\5\0\1\224\25\16\2\0"+
    "\1\6\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\10\16\1\225\3\16\1\226\11\16\2\0\1\6"+
    "\2\16\1\227\6\16\4\0\1\230\62\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\16\16\1\231\7\16\2\0"+
    "\1\6\5\16\1\231\3\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\1\232\25\16\2\0\1\6\11\16"+
    "\7\0\1\6\2\0\3\6\5\0\21\6\1\233\4\6"+
    "\2\0\12\6\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\1\234\25\16\2\0\1\6\11\16\7\0\1\6"+
    "\2\0\3\6\5\0\11\6\1\235\14\6\2\0\12\6"+
    "\7\0\1\6\2\0\3\6\5\0\22\6\1\236\3\6"+
    "\2\0\10\6\1\236\1\6\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\21\16\1\237\4\16\2\0\1\6"+
    "\11\16\7\0\1\6\2\0\3\6\5\0\21\6\1\240"+
    "\4\6\2\0\12\6\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\2\16\1\241\23\16\2\0\1\6\1\241"+
    "\10\16\7\0\1\6\2\0\3\6\5\0\20\6\1\242"+
    "\5\6\2\0\12\6\7\0\1\6\2\0\3\6\5\0"+
    "\15\6\1\243\10\6\2\0\12\6\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\4\16\1\244\21\16\2\0"+
    "\1\6\1\16\1\244\7\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\20\16\1\245\5\16\2\0\1\6"+
    "\11\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\16\16\1\246\7\16\2\0\1\6\5\16\1\246\3\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\1\247"+
    "\25\16\2\0\1\6\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\17\16\1\250\6\16\2\0\1\6"+
    "\6\16\1\250\2\16\7\0\1\6\2\0\3\6\5\0"+
    "\22\6\1\251\3\6\2\0\10\6\1\251\1\6\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\26\16\2\0"+
    "\1\252\11\16\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\14\16\1\253\11\16\2\0\1\6\4\16\1\253"+
    "\4\16\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\26\16\2\0\1\254\11\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\14\16\1\253\11\16\2\0\1\254"+
    "\4\16\1\253\4\16\62\0\1\255\4\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\26\16\2\0\1\256\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\17\16"+
    "\1\257\6\16\2\0\1\6\6\16\1\257\2\16\7\0"+
    "\1\6\2\0\3\6\5\0\17\6\1\260\6\6\2\0"+
    "\7\6\1\260\2\6\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\16\16\1\261\7\16\2\0\1\6\5\16"+
    "\1\261\3\16\7\0\1\6\2\0\3\6\5\0\10\6"+
    "\1\262\15\6\2\0\3\6\1\262\6\6\7\0\1\6"+
    "\2\0\3\6\5\0\10\6\1\263\15\6\2\0\3\6"+
    "\1\263\6\6\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\2\16\1\264\23\16\2\0\1\6\1\264\10\16"+
    "\7\0\1\6\2\0\3\6\5\0\17\6\1\265\6\6"+
    "\2\0\7\6\1\265\2\6\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\1\266\25\16\2\0\1\6\11\16"+
    "\7\0\1\6\2\0\3\6\5\0\16\6\1\267\7\6"+
    "\2\0\6\6\1\267\3\6\7\0\1\6\2\0\3\6"+
    "\5\0\1\270\25\6\2\0\12\6\3\0\2\3\2\0"+
    "\1\6\2\0\3\16\5\0\17\16\1\271\6\16\2\0"+
    "\1\6\6\16\1\271\2\16\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\16\16\1\272\7\16\2\0\1\6"+
    "\5\16\1\272\3\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\3\16\1\273\22\16\2\0\1\6\11\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\16\16"+
    "\1\274\7\16\2\0\1\6\5\16\1\274\3\16\3\0"+
    "\2\3\2\0\1\6\2\0\3\16\5\0\20\16\1\275"+
    "\5\16\2\0\1\6\11\16\7\0\1\6\2\0\3\6"+
    "\5\0\10\6\1\276\15\6\2\0\3\6\1\276\6\6"+
    "\7\0\1\6\2\0\3\6\5\0\15\6\1\277\10\6"+
    "\2\0\12\6\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\26\16\2\0\1\300\11\16\7\0\1\6\2\0"+
    "\3\6\5\0\13\6\1\301\12\6\2\0\4\6\1\301"+
    "\5\6\54\0\1\302\16\0\1\6\2\0\3\6\5\0"+
    "\2\6\1\303\23\6\2\0\1\6\1\303\10\6\7\0"+
    "\1\6\2\0\3\6\5\0\21\6\1\304\4\6\2\0"+
    "\12\6\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\26\16\2\0\1\305\11\16\7\0\1\6\2\0\3\6"+
    "\5\0\10\6\1\306\15\6\2\0\1\6\1\306\10\6"+
    "\7\0\1\6\2\0\3\6\5\0\1\307\25\6\2\0"+
    "\12\6\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\10\16\1\310\15\16\2\0\1\6\2\16\1\310\6\16"+
    "\7\0\1\6\2\0\3\6\5\0\21\6\1\311\4\6"+
    "\2\0\12\6\3\0\2\3\2\0\1\6\2\0\3\16"+
    "\5\0\16\16\1\312\7\16\2\0\1\6\5\16\1\312"+
    "\3\16\7\0\1\6\2\0\3\6\5\0\10\6\1\313"+
    "\15\6\2\0\3\6\1\313\6\6\7\0\1\6\2\0"+
    "\3\6\5\0\17\6\1\314\6\6\2\0\7\6\1\314"+
    "\2\6\3\0\2\3\2\0\1\6\2\0\3\16\5\0"+
    "\14\16\1\315\11\16\2\0\1\6\4\16\1\315\4\16"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\26\16"+
    "\2\0\1\316\11\16\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\1\317\25\16\2\0\1\6\11\16\7\0"+
    "\1\6\2\0\3\6\5\0\17\6\1\320\6\6\2\0"+
    "\7\6\1\320\2\6\7\0\1\6\2\0\3\6\5\0"+
    "\16\6\1\321\7\6\2\0\6\6\1\321\3\6\7\0"+
    "\1\6\2\0\3\6\5\0\1\322\25\6\2\0\12\6"+
    "\7\0\1\6\2\0\3\6\5\0\21\6\1\323\4\6"+
    "\2\0\12\6\60\0\1\324\12\0\1\6\2\0\3\6"+
    "\5\0\14\6\1\325\11\6\2\0\5\6\1\325\4\6"+
    "\7\0\1\6\2\0\3\6\5\0\1\326\25\6\2\0"+
    "\12\6\7\0\1\6\2\0\3\6\5\0\20\6\1\327"+
    "\1\330\4\6\2\0\12\6\7\0\1\6\2\0\3\6"+
    "\5\0\10\6\1\331\15\6\2\0\3\6\1\331\6\6"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\14\16"+
    "\1\332\11\16\2\0\1\6\4\16\1\332\4\16\7\0"+
    "\1\6\2\0\3\6\5\0\1\333\25\6\2\0\12\6"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\26\16"+
    "\2\0\1\334\11\16\7\0\1\6\2\0\3\6\5\0"+
    "\22\6\1\335\3\6\2\0\10\6\1\335\1\6\7\0"+
    "\1\6\2\0\3\6\5\0\17\6\1\336\6\6\2\0"+
    "\7\6\1\336\2\6\3\0\2\3\2\0\1\6\2\0"+
    "\3\16\5\0\17\16\1\337\6\16\2\0\1\6\6\16"+
    "\1\337\2\16\7\0\1\6\2\0\3\6\5\0\17\6"+
    "\1\340\6\6\2\0\7\6\1\340\2\6\7\0\1\6"+
    "\2\0\3\6\5\0\10\6\1\341\15\6\2\0\3\6"+
    "\1\341\6\6\7\0\1\6\2\0\3\6\5\0\4\6"+
    "\1\342\21\6\2\0\2\6\1\342\7\6\7\0\1\6"+
    "\2\0\3\6\5\0\13\6\1\343\12\6\2\0\4\6"+
    "\1\343\5\6\7\0\1\6\2\0\3\6\5\0\4\6"+
    "\1\344\21\6\2\0\2\6\1\344\7\6\61\0\1\345"+
    "\11\0\1\6\2\0\3\6\5\0\12\6\1\346\13\6"+
    "\2\0\12\6\7\0\1\6\2\0\3\6\5\0\16\6"+
    "\1\347\7\6\2\0\6\6\1\347\3\6\7\0\1\6"+
    "\2\0\3\6\5\0\16\6\1\350\7\6\2\0\6\6"+
    "\1\350\3\6\7\0\1\6\2\0\3\6\5\0\17\6"+
    "\1\351\6\6\2\0\7\6\1\351\2\6\7\0\1\6"+
    "\2\0\3\6\5\0\20\6\1\352\5\6\2\0\12\6"+
    "\3\0\2\3\2\0\1\6\2\0\3\16\5\0\13\16"+
    "\1\353\12\16\2\0\1\6\3\16\1\353\5\16\7\0"+
    "\1\6\2\0\3\6\5\0\16\6\1\354\7\6\2\0"+
    "\6\6\1\354\3\6\7\0\1\6\2\0\3\6\5\0"+
    "\20\6\1\355\1\356\4\6\2\0\12\6\7\0\1\6"+
    "\2\0\3\6\5\0\10\6\1\357\15\6\2\0\3\6"+
    "\1\357\6\6\7\0\1\6\2\0\3\6\5\0\23\6"+
    "\1\360\2\6\2\0\12\6\3\0\2\3\2\0\1\6"+
    "\2\0\3\16\5\0\26\16\2\0\1\361\11\16\7\0"+
    "\1\6\2\0\3\6\5\0\14\6\1\362\11\6\2\0"+
    "\5\6\1\362\4\6\7\0\1\6\2\0\3\6\5\0"+
    "\1\6\1\363\24\6\2\0\12\6\7\0\1\6\2\0"+
    "\3\6\5\0\6\6\1\364\17\6\2\0\12\6\7\0"+
    "\1\6\2\0\3\6\5\0\20\6\1\365\5\6\2\0"+
    "\12\6\7\0\1\6\2\0\3\6\5\0\22\6\1\366"+
    "\3\6\2\0\10\6\1\366\1\6\55\0\1\367\15\0"+
    "\1\6\2\0\3\6\5\0\15\6\1\370\10\6\2\0"+
    "\12\6\7\0\1\6\2\0\3\6\5\0\10\6\1\371"+
    "\15\6\2\0\3\6\1\371\6\6\7\0\1\6\2\0"+
    "\3\6\5\0\10\6\1\372\15\6\2\0\3\6\1\372"+
    "\6\6\7\0\1\6\2\0\3\6\5\0\21\6\1\373"+
    "\4\6\2\0\12\6\7\0\1\6\2\0\3\6\5\0"+
    "\21\6\1\374\4\6\2\0\12\6\7\0\1\6\2\0"+
    "\3\6\5\0\10\6\1\375\15\6\2\0\3\6\1\375"+
    "\6\6\7\0\1\6\2\0\3\6\5\0\16\6\1\376"+
    "\7\6\2\0\6\6\1\376\3\6\7\0\1\6\2\0"+
    "\3\6\5\0\17\6\1\377\6\6\2\0\7\6\1\377"+
    "\2\6\7\0\1\6\2\0\3\6\5\0\1\u0100\25\6"+
    "\2\0\12\6\7\0\1\6\2\0\3\6\5\0\14\6"+
    "\1\u0101\11\6\2\0\5\6\1\u0101\4\6\7\0\1\6"+
    "\2\0\3\6\5\0\20\6\1\u0102\5\6\2\0\12\6"+
    "\7\0\1\6\2\0\3\6\5\0\11\6\1\u0103\14\6"+
    "\2\0\12\6\7\0\1\6\2\0\3\6\5\0\11\6"+
    "\1\u0104\14\6\2\0\12\6\7\0\1\6\2\0\3\6"+
    "\5\0\21\6\1\u0105\4\6\2\0\12\6\7\0\1\6"+
    "\2\0\3\6\5\0\10\6\1\u0106\15\6\2\0\3\6"+
    "\1\u0106\6\6\7\0\1\6\2\0\3\6\5\0\14\6"+
    "\1\u0107\11\6\2\0\5\6\1\u0107\4\6\57\0\1\u0108"+
    "\13\0\1\6\2\0\3\6\5\0\14\6\1\u0109\11\6"+
    "\2\0\5\6\1\u0109\4\6\7\0\1\6\2\0\3\6"+
    "\5\0\14\6\1\u010a\11\6\2\0\5\6\1\u010a\4\6"+
    "\7\0\1\6\2\0\3\6\5\0\22\6\1\u010b\3\6"+
    "\2\0\10\6\1\u010b\1\6\7\0\1\6\2\0\3\6"+
    "\5\0\1\u010c\25\6\2\0\12\6\7\0\1\6\2\0"+
    "\3\6\5\0\3\6\1\u010d\22\6\2\0\12\6\7\0"+
    "\1\6\2\0\3\6\5\0\14\6\1\u010e\11\6\2\0"+
    "\5\6\1\u010e\4\6\7\0\1\6\2\0\3\6\5\0"+
    "\10\6\1\u010f\15\6\2\0\3\6\1\u010f\6\6\7\0"+
    "\1\6\2\0\3\6\5\0\21\6\1\u0110\4\6\2\0"+
    "\12\6\7\0\1\6\2\0\3\6\5\0\16\6\1\u0111"+
    "\7\6\2\0\6\6\1\u0111\3\6\7\0\1\6\2\0"+
    "\3\6\5\0\16\6\1\u0112\7\6\2\0\6\6\1\u0112"+
    "\3\6\7\0\1\6\2\0\3\6\5\0\10\6\1\u0113"+
    "\15\6\2\0\3\6\1\u0113\6\6\7\0\1\6\2\0"+
    "\3\6\5\0\4\6\1\u0114\21\6\2\0\2\6\1\u0114"+
    "\7\6\7\0\1\6\2\0\3\6\5\0\13\6\1\u0115"+
    "\12\6\2\0\4\6\1\u0115\5\6\7\0\1\6\2\0"+
    "\3\6\5\0\6\6\1\u0116\17\6\2\0\12\6\56\0"+
    "\1\u0117\14\0\1\6\2\0\3\6\5\0\13\6\1\u0118"+
    "\12\6\2\0\4\6\1\u0118\5\6\7\0\1\6\2\0"+
    "\3\6\5\0\10\6\1\u0119\15\6\2\0\3\6\1\u0119"+
    "\6\6\7\0\1\6\2\0\3\6\5\0\16\6\1\u011a"+
    "\7\6\2\0\6\6\1\u011a\3\6\7\0\1\6\2\0"+
    "\3\6\5\0\26\6\2\0\1\u011b\11\6\7\0\1\6"+
    "\2\0\3\6\5\0\22\6\1\u011c\3\6\2\0\10\6"+
    "\1\u011c\1\6\7\0\1\6\2\0\3\6\5\0\1\u011d"+
    "\25\6\2\0\12\6\7\0\1\6\2\0\3\6\5\0"+
    "\3\6\1\u011e\22\6\2\0\12\6\7\0\1\6\2\0"+
    "\3\6\5\0\10\6\1\u011f\15\6\2\0\3\6\1\u011f"+
    "\6\6\7\0\1\6\2\0\3\6\5\0\10\6\1\u0120"+
    "\15\6\2\0\1\6\1\u0120\10\6\7\0\1\6\2\0"+
    "\3\6\5\0\20\6\1\u0121\5\6\2\0\12\6\7\0"+
    "\1\6\2\0\3\6\5\0\21\6\1\u0122\4\6\2\0"+
    "\12\6\17\0\1\u0123\53\0\1\6\2\0\3\6\5\0"+
    "\4\6\1\u0124\21\6\2\0\2\6\1\u0124\7\6\7\0"+
    "\1\6\2\0\3\6\5\0\1\u0125\25\6\2\0\12\6"+
    "\7\0\1\6\2\0\3\6\5\0\10\6\1\u0126\15\6"+
    "\2\0\3\6\1\u0126\6\6\7\0\1\6\2\0\3\6"+
    "\5\0\16\6\1\u0127\7\6\2\0\6\6\1\u0127\3\6"+
    "\7\0\1\6\2\0\3\6\5\0\10\6\1\u0128\15\6"+
    "\2\0\3\6\1\u0128\6\6\7\0\1\6\2\0\3\6"+
    "\5\0\16\6\1\u0129\7\6\2\0\6\6\1\u0129\3\6"+
    "\7\0\1\6\2\0\3\6\5\0\22\6\1\u012a\3\6"+
    "\2\0\10\6\1\u012a\1\6\7\0\1\6\2\0\3\6"+
    "\5\0\20\6\1\u012b\5\6\2\0\12\6\7\0\1\6"+
    "\2\0\3\6\5\0\1\u012c\25\6\2\0\12\6\7\0"+
    "\1\6\2\0\3\6\5\0\14\6\1\u012d\11\6\2\0"+
    "\5\6\1\u012d\4\6\6\0\1\u012e\64\0\1\6\2\0"+
    "\3\6\5\0\13\6\1\u012f\12\6\2\0\4\6\1\u012f"+
    "\5\6\7\0\1\6\2\0\3\6\5\0\14\6\1\u0130"+
    "\11\6\2\0\5\6\1\u0130\4\6\7\0\1\6\2\0"+
    "\3\6\5\0\4\6\1\u0131\21\6\2\0\2\6\1\u0131"+
    "\7\6\7\0\1\6\2\0\3\6\5\0\1\u0132\25\6"+
    "\2\0\12\6\7\0\1\6\2\0\3\6\5\0\10\6"+
    "\1\u0133\15\6\2\0\3\6\1\u0133\6\6\7\0\1\6"+
    "\2\0\3\6\5\0\10\6\1\u0134\15\6\2\0\3\6"+
    "\1\u0134\6\6\7\0\1\6\2\0\3\6\5\0\21\6"+
    "\1\u0135\4\6\2\0\12\6\13\0\1\u0136\57\0\1\6"+
    "\2\0\3\6\5\0\20\6\1\u0137\5\6\2\0\12\6"+
    "\7\0\1\6\2\0\3\6\5\0\1\u0138\25\6\2\0"+
    "\12\6\7\0\1\6\2\0\3\6\5\0\14\6\1\u0139"+
    "\11\6\2\0\5\6\1\u0139\4\6\7\0\1\6\2\0"+
    "\3\6\5\0\1\u013a\25\6\2\0\12\6\7\0\1\6"+
    "\2\0\3\6\5\0\3\6\1\u013b\22\6\2\0\12\6"+
    "\11\0\1\u013c\61\0\1\6\2\0\3\6\5\0\4\6"+
    "\1\u013d\21\6\2\0\2\6\1\u013d\7\6\7\0\1\6"+
    "\2\0\3\6\5\0\11\6\1\u013e\14\6\2\0\12\6"+
    "\12\0\1\u013f\60\0\1\6\2\0\3\6\5\0\10\6"+
    "\1\u0140\15\6\2\0\3\6\1\u0140\6\6\6\0\1\u0141"+
    "\64\0\1\6\2\0\3\6\5\0\25\6\1\u0142\2\0"+
    "\12\6\4\0\1\u0143\66\0\1\6\2\0\3\6\5\0"+
    "\1\u0144\25\6\2\0\12\6\21\0\1\u0145\51\0\1\6"+
    "\2\0\3\6\5\0\3\6\1\u0146\22\6\2\0\12\6"+
    "\20\0\1\u0147\52\0\1\6\2\0\3\6\5\0\1\u0148"+
    "\25\6\2\0\12\6\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15028];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\17\1\4\11\1\0\23\1\1\0\30\1"+
    "\1\0\30\1\1\0\30\1\1\0\30\1\1\0\24\1"+
    "\1\0\24\1\1\0\21\1\1\0\20\1\1\0\21\1"+
    "\1\0\20\1\1\0\16\1\1\0\13\1\1\0\12\1"+
    "\1\0\7\1\1\0\5\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yyline +1, yycolumn +1);
    }

    private Symbol symbol(int type, Object value){
        System.out.println("Token reconocido: " + yytext());
        return new Symbol(type, yyline +1, yycolumn + 1, value);
    }

    private void error (String message){
        System.out.println("Error en la linea: " + (yyline +1) + " columna: " + (yycolumn +1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
                 errores.agregarError(yytext(), yyline +1, yycolumn + 1, "Lexico", "El simbolo no se encuentra definido en el alfabeto.");
            }
          // fall through
          case 47: break;
          case 2:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 48: break;
          case 3:
            { return symbol(sym.EXCLAM);
            }
          // fall through
          case 49: break;
          case 4:
            { return symbol(sym.COMILL);
            }
          // fall through
          case 50: break;
          case 5:
            { return symbol(sym.IDENTIFICADOR, yytexyt());
            }
          // fall through
          case 51: break;
          case 6:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 52: break;
          case 7:
            { return symbol(sym.NUMERO       , Integer.parseInt(yytext()));
            }
          // fall through
          case 53: break;
          case 8:
            { return symbol(sym.DOSPUN);
            }
          // fall through
          case 54: break;
          case 9:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 55: break;
          case 10:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 56: break;
          case 11:
            { return symbol(sym.QSTMRK);
            }
          // fall through
          case 57: break;
          case 12:
            { return symbol(sym.COROPN);
            }
          // fall through
          case 58: break;
          case 13:
            { return symbol(sym.CORCLS);
            }
          // fall through
          case 59: break;
          case 14:
            { return symbol(sym.LLAVOP);
            }
          // fall through
          case 60: break;
          case 15:
            { return symbol(sym.LLAVCL);
            }
          // fall through
          case 61: break;
          case 16:
            { return symbol(sym.ID);
            }
          // fall through
          case 62: break;
          case 17:
            { return symbol(sym.TEMA);
            }
          // fall through
          case 63: break;
          case 18:
            { return symbol(sym.CLASE);
            }
          // fall through
          case 64: break;
          case 19:
            { return symbol(sym.FILAS);
            }
          // fall through
          case 65: break;
          case 20:
            { return symbol(sym.INDICE);
            }
          // fall through
          case 66: break;
          case 21:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 67: break;
          case 22:
            { return symbol(sym.TRIVIA);
            }
          // fall through
          case 68: break;
          case 23:
            { return symbol(sym.USUARIO);
            }
          // fall through
          case 69: break;
          case 24:
            { return symbol(sym.COLUMNAS);
            }
          // fall through
          case 70: break;
          case 25:
            { return symbol(sym.OPCIONES);
            }
          // fall through
          case 71: break;
          case 26:
            { return symbol(sym.PASSWORD);
            }
          // fall through
          case 72: break;
          case 27:
            { return symbol(sym.ID_TRIVIA);
            }
          // fall through
          case 73: break;
          case 28:
            { return symbol(sym.RESPUESTA);
            }
          // fall through
          case 74: break;
          case 29:
            { return symbol(sym.INSTITUCION);
            }
          // fall through
          case 75: break;
          case 30:
            { return symbol(sym.NUEVA_TRIVIA);
            }
          // fall through
          case 76: break;
          case 31:
            { return symbol(sym.USUARIO_NUEV);
            }
          // fall through
          case 77: break;
          case 32:
            { return symbol(sym.DATOS_USUARI);
            }
          // fall through
          case 78: break;
          case 33:
            { return symbol(sym.LOGIN_USUARI);
            }
          // fall through
          case 79: break;
          case 34:
            { return symbol(sym.TEXTO_VISIBL);
            }
          // fall through
          case 80: break;
          case 35:
            { return symbol(sym.NUEVO_PASSWO);
            }
          // fall through
          case 81: break;
          case 36:
            { return symbol(sym.ELIMINAR_TRI);
            }
          // fall through
          case 82: break;
          case 37:
            { return symbol(sym.TIEMPO_PREGU);
            }
          // fall through
          case 83: break;
          case 38:
            { return symbol(sym.USUA_ANTIGUO);
            }
          // fall through
          case 84: break;
          case 39:
            { return symbol(sym.ELIMINAR_USU);
            }
          // fall through
          case 85: break;
          case 40:
            { return symbol(sym.MODIF_TRIVIA);
            }
          // fall through
          case 86: break;
          case 41:
            { return symbol(sym.MODI_USUARIO);
            }
          // fall through
          case 87: break;
          case 42:
            { return symbol(sym.PARAM_TRIVIA);
            }
          // fall through
          case 88: break;
          case 43:
            { return symbol(sym.REALIZAR_SOL);
            }
          // fall through
          case 89: break;
          case 44:
            { return symbol(sym.AGREGAR_COMP);
            }
          // fall through
          case 90: break;
          case 45:
            { return symbol(sym.ENCABEZADO);
            }
          // fall through
          case 91: break;
          case 46:
            { return symbol(sym.FIN_SOL_REAL);
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
