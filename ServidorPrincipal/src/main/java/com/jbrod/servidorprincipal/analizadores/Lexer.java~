// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

/* - - - - - - - - - - - - - - - - - CODIGO DE USUARIO - - - - - - - - - - - - - - - - - */

package com.jbrod.servidorprincipal.analizadores;
import java_cup.runtime.*;



@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\3\22\0\1\4\1\5"+
    "\1\6\1\0\1\7\7\0\1\10\1\7\1\11\1\0"+
    "\1\12\1\13\10\14\1\15\1\0\1\16\1\17\1\20"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\2\31\1\33\1\34\1\35\1\36"+
    "\1\37\1\31\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\31\1\47\1\50\1\0\1\51\1\0\1\52"+
    "\1\0\1\22\1\23\1\53\1\25\1\54\1\27\1\30"+
    "\1\31\1\55\2\31\1\33\1\34\1\56\1\57\1\37"+
    "\1\31\1\60\1\61\1\42\1\43\1\62\1\45\1\63"+
    "\1\31\1\47\1\64\1\7\1\65\7\0\1\1\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\21\0\2\66\12\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\17\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\0\6\5\1\21\14\5\1\0\30\5"+
    "\1\0\23\5\1\22\4\5\1\0\1\5\1\23\3\5"+
    "\1\24\22\5\1\0\6\5\1\25\3\5\1\26\11\5"+
    "\1\27\1\5\1\0\22\5\1\30\1\0\1\5\1\31"+
    "\11\5\1\32\1\5\1\33\5\5\1\0\4\5\1\34"+
    "\7\5\1\35\4\5\1\0\21\5\1\0\6\5\1\36"+
    "\13\5\1\0\11\5\1\37\7\5\1\0\1\5\1\40"+
    "\4\5\1\41\5\5\1\42\2\5\1\43\1\0\7\5"+
    "\1\44\4\5\1\0\2\5\1\45\6\5\1\46\1\47"+
    "\1\0\2\5\1\50\1\5\1\51\3\5\1\0\3\5"+
    "\1\52\1\53\1\5\1\0\1\54\2\5\1\55\1\0"+
    "\1\56\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\67\0\156\0\67\0\67\0\245\0\67"+
    "\0\334\0\67\0\u0113\0\67\0\67\0\u014a\0\u0181\0\u01b8"+
    "\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370"+
    "\0\u03a7\0\u03de\0\u0415\0\u044c\0\67\0\67\0\67\0\67"+
    "\0\334\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5"+
    "\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5"+
    "\0\u120c\0\u1243\0\u0181\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356"+
    "\0\u138d\0\u0181\0\u13c4\0\u13fb\0\u1432\0\u0181\0\u1469\0\u14a0"+
    "\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658"+
    "\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810"+
    "\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u1991\0\u0181"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u0181\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u0181\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003"+
    "\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u0181\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u0181"+
    "\0\u233c\0\u0181\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\245\0\u2599\0\u25d0\0\u2607"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u0181\0\u271a\0\u2751\0\u2788"+
    "\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940"+
    "\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0"+
    "\0\u2ce7\0\u2d1e\0\u0181\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31"+
    "\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9"+
    "\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u31a1"+
    "\0\245\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322"+
    "\0\u3359\0\u3390\0\245\0\u33c7\0\u33fe\0\u3435\0\u346c\0\245"+
    "\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\245\0\u35b6\0\u35ed"+
    "\0\245\0\u3624\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e"+
    "\0\u37a5\0\245\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef"+
    "\0\u3926\0\245\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39\0\u3a70"+
    "\0\245\0\245\0\u3aa7\0\u3ade\0\u3b15\0\245\0\u3b4c\0\245"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\245"+
    "\0\245\0\u3d04\0\u3d3b\0\245\0\u3d72\0\u3da9\0\245\0\u3de0"+
    "\0\245\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61"+
    "\0\67\0\245";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\2\3\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\17\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\17\1\33\1\34"+
    "\4\17\1\35\1\36\1\7\1\20\1\22\1\24\1\27"+
    "\1\30\1\32\3\17\1\37\1\40\1\6\71\0\1\3"+
    "\73\0\1\7\2\0\3\7\5\0\26\7\2\0\12\7"+
    "\4\0\4\41\5\0\3\41\5\0\26\41\3\0\11\41"+
    "\24\0\1\42\46\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\6\17\1\43\17\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\26\17\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\11\17\1\44\2\17\1\45\11\17\2\0\1\7"+
    "\4\17\1\45\4\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\1\46\25\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\11\17\1\47"+
    "\14\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\10\17\1\50\15\17\2\0\1\7"+
    "\2\17\1\50\6\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\3\17\1\51\7\17\1\52\12\17\2\0"+
    "\1\7\3\17\1\52\5\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\14\17\1\53\11\17\2\0\1\7"+
    "\4\17\1\53\4\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\14\17\1\54\11\17\2\0\1\7\4\17"+
    "\1\54\4\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\14\17\1\55\4\17\1\56\4\17\2\0\1\7"+
    "\4\17\1\55\4\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\15\17\1\57\10\17\2\0\1\7\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\1\60"+
    "\25\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\4\17\1\61\21\17\2\0\1\7"+
    "\1\17\1\61\7\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\4\17\1\62\3\17\1\63\5\17\1\64"+
    "\7\17\2\0\1\7\1\17\1\62\1\63\2\17\1\64"+
    "\3\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\17\17\1\65\6\17\2\0\1\7\6\17\1\65\2\17"+
    "\66\0\1\66\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\16\17\1\67\7\17\2\0\1\7\5\17\1\67"+
    "\3\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\1\70\25\17\2\0\1\7\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\11\17\1\71\14\17\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\20\17\1\72\5\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\10\17\1\73"+
    "\15\17\2\0\1\7\2\17\1\73\6\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\11\17\1\74\1\17"+
    "\1\75\12\17\2\0\1\7\3\17\1\75\5\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\26\17\2\0"+
    "\1\76\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\3\17\1\77\13\17\1\100\6\17\2\0\1\7"+
    "\6\17\1\100\2\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\6\17\1\101\17\17\2\0\1\7\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\3\17"+
    "\1\102\22\17\2\0\1\7\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\12\17\1\103\13\17\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\4\17\1\104\21\17\2\0\1\7\1\17\1\104"+
    "\7\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\2\17\1\105\23\17\2\0\1\7\1\105\10\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\16\17\1\106"+
    "\1\107\6\17\2\0\1\7\5\17\1\106\1\107\2\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\1\110"+
    "\16\17\1\111\6\17\2\0\1\7\6\17\1\111\2\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\12\17"+
    "\1\112\11\17\1\113\1\17\2\0\1\7\10\17\1\113"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\4\17"+
    "\1\114\21\17\2\0\1\7\1\17\1\114\7\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\10\17\1\115"+
    "\15\17\2\0\1\7\2\17\1\115\6\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\21\17\1\116\4\17"+
    "\2\0\1\7\11\17\64\0\1\117\6\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\4\17\1\120\21\17\2\0"+
    "\1\7\1\17\1\120\7\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\17\17\1\121\6\17\2\0\1\7"+
    "\6\17\1\121\2\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\21\17\1\122\4\17\2\0\1\7\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\14\17"+
    "\1\123\11\17\2\0\1\7\4\17\1\123\4\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\12\17\1\124"+
    "\13\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\1\125\25\17\2\0\1\7\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\26\17"+
    "\2\0\1\126\11\17\12\0\1\7\2\0\3\7\5\0"+
    "\20\7\1\127\5\7\2\0\12\7\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\10\17\1\130\15\17\2\0"+
    "\1\7\2\17\1\130\6\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\20\17\1\131\5\17\2\0\1\7"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\10\17\1\132\15\17\2\0\1\7\2\17\1\132\6\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\10\17"+
    "\1\133\15\17\2\0\1\7\2\17\1\133\6\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\1\17\1\134"+
    "\24\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\22\17\1\135\3\17\2\0\1\7"+
    "\7\17\1\135\1\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\10\17\1\136\15\17\2\0\1\7\2\17"+
    "\1\136\6\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\1\137\25\17\2\0\1\7\11\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\17\17\1\140\6\17"+
    "\2\0\1\7\6\17\1\140\2\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\11\17\1\141\14\17\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\15\17\1\142\10\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\1\143\25\17"+
    "\2\0\1\7\11\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\20\17\1\144\5\17\2\0\1\7\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\12\17"+
    "\1\145\13\17\2\0\1\7\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\22\17\1\146\3\17\2\0"+
    "\1\7\7\17\1\146\1\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\1\147\25\17\2\0\1\7\11\17"+
    "\62\0\1\150\10\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\6\17\1\151\17\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\4\17\1\152"+
    "\21\17\2\0\1\7\1\17\1\152\7\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\12\17\1\153\13\17"+
    "\2\0\1\7\11\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\17\17\1\154\6\17\2\0\1\7\6\17"+
    "\1\154\2\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\10\17\1\155\15\17\2\0\1\7\2\17\1\155"+
    "\6\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\17\17\1\156\6\17\2\0\1\7\6\17\1\156\2\17"+
    "\12\0\1\7\2\0\3\7\5\0\17\7\1\157\6\7"+
    "\2\0\7\7\1\157\2\7\12\0\1\7\2\0\3\7"+
    "\5\0\16\7\1\160\7\7\2\0\6\7\1\160\3\7"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\2\17"+
    "\1\161\23\17\2\0\1\7\1\161\10\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\10\17\1\162\15\17"+
    "\2\0\1\7\2\17\1\162\6\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\13\17\1\163\12\17\2\0"+
    "\1\7\3\17\1\163\5\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\5\17\1\164\20\17\2\0\1\7"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\16\17\1\165\7\17\2\0\1\7\5\17\1\165\3\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\1\166"+
    "\13\17\1\167\11\17\2\0\1\7\4\17\1\167\4\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\14\17"+
    "\1\170\11\17\2\0\1\7\4\17\1\170\4\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\12\17\1\171"+
    "\13\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\23\17\1\172\2\17\2\0\1\7"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\10\17\1\173\15\17\2\0\1\7\2\17\1\173\6\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\21\17"+
    "\1\174\4\17\2\0\1\7\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\14\17\1\175\11\17\2\0"+
    "\1\7\4\17\1\175\4\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\15\17\1\176\10\17\2\0\1\7"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\10\17\1\177\15\17\2\0\1\7\2\17\1\177\6\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\16\17"+
    "\1\200\7\17\2\0\1\7\5\17\1\200\3\17\61\0"+
    "\1\201\11\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\1\202\25\17\2\0\1\7\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\13\17\1\203\12\17\2\0"+
    "\1\7\3\17\1\203\5\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\26\17\2\0\1\204\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\13\17\1\205"+
    "\12\17\2\0\1\7\3\17\1\205\5\17\12\0\1\7"+
    "\2\0\3\7\5\0\14\7\1\206\11\7\2\0\5\7"+
    "\1\206\4\7\12\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\207\15\7\2\0\3\7\1\207\6\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\4\17\1\210\21\17"+
    "\2\0\1\7\1\17\1\210\7\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\20\17\1\211\5\17\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\26\17\2\0\1\212\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\10\17\1\213\15\17\2\0"+
    "\1\7\2\17\1\213\6\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\4\17\1\214\21\17\2\0\1\7"+
    "\1\17\1\214\7\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\26\17\2\0\1\215\11\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\26\17\2\0\1\216"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\13\17\1\217\12\17\2\0\1\7\3\17\1\217\5\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\4\17"+
    "\1\220\21\17\2\0\1\7\1\17\1\220\7\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\14\17\1\221"+
    "\11\17\2\0\1\7\4\17\1\221\4\17\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\25\17\1\222\2\0"+
    "\1\7\11\17\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\4\17\1\223\21\17\2\0\1\7\1\17\1\223"+
    "\7\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\26\17\2\0\1\224\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\14\17\1\225\11\17\2\0\1\7"+
    "\4\17\1\225\4\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\1\226\25\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\10\17\1\227"+
    "\15\17\2\0\1\7\2\17\1\227\6\17\7\0\1\230"+
    "\63\0\4\41\2\0\1\7\2\0\3\17\5\0\16\17"+
    "\1\231\7\17\2\0\1\7\5\17\1\231\3\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\1\232\25\17"+
    "\2\0\1\7\11\17\12\0\1\7\2\0\3\7\5\0"+
    "\21\7\1\233\4\7\2\0\12\7\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\1\234\25\17\2\0\1\7"+
    "\11\17\12\0\1\7\2\0\3\7\5\0\11\7\1\235"+
    "\14\7\2\0\12\7\12\0\1\7\2\0\3\7\5\0"+
    "\22\7\1\236\3\7\2\0\10\7\1\236\1\7\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\21\17\1\237"+
    "\4\17\2\0\1\7\11\17\12\0\1\7\2\0\3\7"+
    "\5\0\21\7\1\240\4\7\2\0\12\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\2\17\1\241\23\17"+
    "\2\0\1\7\1\241\10\17\12\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\242\5\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\15\7\1\243\10\7\2\0\12\7"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\4\17"+
    "\1\244\21\17\2\0\1\7\1\17\1\244\7\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\20\17\1\245"+
    "\5\17\2\0\1\7\11\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\16\17\1\246\7\17\2\0\1\7"+
    "\5\17\1\246\3\17\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\1\247\25\17\2\0\1\7\11\17\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\17\17\1\250"+
    "\6\17\2\0\1\7\6\17\1\250\2\17\12\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\251\3\7\2\0\10\7"+
    "\1\251\1\7\4\0\4\41\2\0\1\7\2\0\3\17"+
    "\5\0\26\17\2\0\1\252\11\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\14\17\1\253\11\17\2\0"+
    "\1\7\4\17\1\253\4\17\65\0\1\254\5\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\26\17\2\0\1\255"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\17\17\1\256\6\17\2\0\1\7\6\17\1\256\2\17"+
    "\12\0\1\7\2\0\3\7\5\0\17\7\1\257\6\7"+
    "\2\0\7\7\1\257\2\7\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\16\17\1\260\7\17\2\0\1\7"+
    "\5\17\1\260\3\17\12\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\261\15\7\2\0\3\7\1\261\6\7\12\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\262\15\7\2\0"+
    "\3\7\1\262\6\7\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\2\17\1\263\23\17\2\0\1\7\1\263"+
    "\10\17\12\0\1\7\2\0\3\7\5\0\17\7\1\264"+
    "\6\7\2\0\7\7\1\264\2\7\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\1\265\25\17\2\0\1\7"+
    "\11\17\12\0\1\7\2\0\3\7\5\0\16\7\1\266"+
    "\7\7\2\0\6\7\1\266\3\7\12\0\1\7\2\0"+
    "\3\7\5\0\1\267\25\7\2\0\12\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\17\17\1\270\6\17"+
    "\2\0\1\7\6\17\1\270\2\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\16\17\1\271\7\17\2\0"+
    "\1\7\5\17\1\271\3\17\4\0\4\41\2\0\1\7"+
    "\2\0\3\17\5\0\3\17\1\272\22\17\2\0\1\7"+
    "\11\17\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\16\17\1\273\7\17\2\0\1\7\5\17\1\273\3\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\20\17"+
    "\1\274\5\17\2\0\1\7\11\17\12\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\275\15\7\2\0\3\7\1\275"+
    "\6\7\12\0\1\7\2\0\3\7\5\0\15\7\1\276"+
    "\10\7\2\0\12\7\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\26\17\2\0\1\277\11\17\57\0\1\300"+
    "\21\0\1\7\2\0\3\7\5\0\2\7\1\301\23\7"+
    "\2\0\1\7\1\301\10\7\12\0\1\7\2\0\3\7"+
    "\5\0\21\7\1\302\4\7\2\0\12\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\26\17\2\0\1\303"+
    "\11\17\12\0\1\7\2\0\3\7\5\0\10\7\1\304"+
    "\15\7\2\0\1\7\1\304\10\7\12\0\1\7\2\0"+
    "\3\7\5\0\1\305\25\7\2\0\12\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\10\17\1\306\15\17"+
    "\2\0\1\7\2\17\1\306\6\17\12\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\307\4\7\2\0\12\7\4\0"+
    "\4\41\2\0\1\7\2\0\3\17\5\0\16\17\1\310"+
    "\7\17\2\0\1\7\5\17\1\310\3\17\12\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\311\15\7\2\0\3\7"+
    "\1\311\6\7\12\0\1\7\2\0\3\7\5\0\17\7"+
    "\1\312\6\7\2\0\7\7\1\312\2\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\14\17\1\313\11\17"+
    "\2\0\1\7\4\17\1\313\4\17\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\26\17\2\0\1\314\11\17"+
    "\4\0\4\41\2\0\1\7\2\0\3\17\5\0\1\315"+
    "\25\17\2\0\1\7\11\17\12\0\1\7\2\0\3\7"+
    "\5\0\17\7\1\316\6\7\2\0\7\7\1\316\2\7"+
    "\12\0\1\7\2\0\3\7\5\0\16\7\1\317\7\7"+
    "\2\0\6\7\1\317\3\7\12\0\1\7\2\0\3\7"+
    "\5\0\1\320\12\7\1\321\12\7\2\0\4\7\1\321"+
    "\5\7\63\0\1\322\15\0\1\7\2\0\3\7\5\0"+
    "\14\7\1\323\11\7\2\0\5\7\1\323\4\7\12\0"+
    "\1\7\2\0\3\7\5\0\1\324\25\7\2\0\12\7"+
    "\12\0\1\7\2\0\3\7\5\0\2\7\1\325\15\7"+
    "\1\326\1\327\4\7\2\0\1\7\1\325\10\7\12\0"+
    "\1\7\2\0\3\7\5\0\10\7\1\330\15\7\2\0"+
    "\3\7\1\330\6\7\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\14\17\1\331\11\17\2\0\1\7\4\17"+
    "\1\331\4\17\12\0\1\7\2\0\3\7\5\0\1\332"+
    "\25\7\2\0\12\7\4\0\4\41\2\0\1\7\2\0"+
    "\3\17\5\0\26\17\2\0\1\333\11\17\12\0\1\7"+
    "\2\0\3\7\5\0\22\7\1\334\3\7\2\0\10\7"+
    "\1\334\1\7\12\0\1\7\2\0\3\7\5\0\17\7"+
    "\1\335\6\7\2\0\7\7\1\335\2\7\4\0\4\41"+
    "\2\0\1\7\2\0\3\17\5\0\17\17\1\336\6\17"+
    "\2\0\1\7\6\17\1\336\2\17\12\0\1\7\2\0"+
    "\3\7\5\0\17\7\1\337\6\7\2\0\7\7\1\337"+
    "\2\7\12\0\1\7\2\0\3\7\5\0\10\7\1\340"+
    "\15\7\2\0\3\7\1\340\6\7\12\0\1\7\2\0"+
    "\3\7\5\0\4\7\1\341\21\7\2\0\2\7\1\341"+
    "\7\7\12\0\1\7\2\0\3\7\5\0\13\7\1\342"+
    "\12\7\2\0\4\7\1\342\5\7\12\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\343\4\7\2\0\12\7\64\0"+
    "\1\344\14\0\1\7\2\0\3\7\5\0\12\7\1\345"+
    "\13\7\2\0\12\7\12\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\346\7\7\2\0\6\7\1\346\3\7\12\0"+
    "\1\7\2\0\3\7\5\0\14\7\1\347\11\7\2\0"+
    "\5\7\1\347\4\7\12\0\1\7\2\0\3\7\5\0"+
    "\16\7\1\350\7\7\2\0\6\7\1\350\3\7\12\0"+
    "\1\7\2\0\3\7\5\0\17\7\1\351\6\7\2\0"+
    "\7\7\1\351\2\7\12\0\1\7\2\0\3\7\5\0"+
    "\20\7\1\352\5\7\2\0\12\7\4\0\4\41\2\0"+
    "\1\7\2\0\3\17\5\0\13\17\1\353\12\17\2\0"+
    "\1\7\3\17\1\353\5\17\12\0\1\7\2\0\3\7"+
    "\5\0\16\7\1\354\7\7\2\0\6\7\1\354\3\7"+
    "\12\0\1\7\2\0\3\7\5\0\20\7\1\355\1\356"+
    "\4\7\2\0\12\7\12\0\1\7\2\0\3\7\5\0"+
    "\10\7\1\357\15\7\2\0\3\7\1\357\6\7\12\0"+
    "\1\7\2\0\3\7\5\0\23\7\1\360\2\7\2\0"+
    "\12\7\4\0\4\41\2\0\1\7\2\0\3\17\5\0"+
    "\26\17\2\0\1\361\11\17\12\0\1\7\2\0\3\7"+
    "\5\0\14\7\1\362\11\7\2\0\5\7\1\362\4\7"+
    "\12\0\1\7\2\0\3\7\5\0\1\7\1\363\24\7"+
    "\2\0\12\7\12\0\1\7\2\0\3\7\5\0\6\7"+
    "\1\364\17\7\2\0\12\7\12\0\1\7\2\0\3\7"+
    "\5\0\20\7\1\365\5\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\4\7\1\366\21\7\2\0\2\7"+
    "\1\366\7\7\60\0\1\367\20\0\1\7\2\0\3\7"+
    "\5\0\15\7\1\370\10\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\371\15\7\2\0\3\7"+
    "\1\371\6\7\12\0\1\7\2\0\3\7\5\0\12\7"+
    "\1\372\13\7\2\0\12\7\12\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\373\15\7\2\0\3\7\1\373\6\7"+
    "\12\0\1\7\2\0\3\7\5\0\21\7\1\374\4\7"+
    "\2\0\12\7\12\0\1\7\2\0\3\7\5\0\21\7"+
    "\1\375\4\7\2\0\12\7\12\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\376\15\7\2\0\3\7\1\376\6\7"+
    "\12\0\1\7\2\0\3\7\5\0\16\7\1\377\7\7"+
    "\2\0\6\7\1\377\3\7\12\0\1\7\2\0\3\7"+
    "\5\0\17\7\1\u0100\6\7\2\0\7\7\1\u0100\2\7"+
    "\12\0\1\7\2\0\3\7\5\0\1\u0101\25\7\2\0"+
    "\12\7\12\0\1\7\2\0\3\7\5\0\14\7\1\u0102"+
    "\11\7\2\0\5\7\1\u0102\4\7\12\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u0103\5\7\2\0\12\7\12\0"+
    "\1\7\2\0\3\7\5\0\11\7\1\u0104\14\7\2\0"+
    "\12\7\12\0\1\7\2\0\3\7\5\0\11\7\1\u0105"+
    "\14\7\2\0\12\7\12\0\1\7\2\0\3\7\5\0"+
    "\21\7\1\u0106\4\7\2\0\12\7\12\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0107\15\7\2\0\3\7\1\u0107"+
    "\6\7\12\0\1\7\2\0\3\7\5\0\22\7\1\u0108"+
    "\3\7\2\0\10\7\1\u0108\1\7\62\0\1\u0109\16\0"+
    "\1\7\2\0\3\7\5\0\14\7\1\u010a\11\7\2\0"+
    "\5\7\1\u010a\4\7\12\0\1\7\2\0\3\7\5\0"+
    "\14\7\1\u010b\11\7\2\0\5\7\1\u010b\4\7\12\0"+
    "\1\7\2\0\3\7\5\0\15\7\1\u010c\10\7\2\0"+
    "\12\7\12\0\1\7\2\0\3\7\5\0\22\7\1\u010d"+
    "\3\7\2\0\10\7\1\u010d\1\7\12\0\1\7\2\0"+
    "\3\7\5\0\1\u010e\25\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\3\7\1\u010f\22\7\2\0\12\7"+
    "\12\0\1\7\2\0\3\7\5\0\14\7\1\u0110\11\7"+
    "\2\0\5\7\1\u0110\4\7\12\0\1\7\2\0\3\7"+
    "\5\0\10\7\1\u0111\15\7\2\0\3\7\1\u0111\6\7"+
    "\12\0\1\7\2\0\3\7\5\0\21\7\1\u0112\4\7"+
    "\2\0\12\7\12\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u0113\7\7\2\0\6\7\1\u0113\3\7\12\0\1\7"+
    "\2\0\3\7\5\0\16\7\1\u0114\7\7\2\0\6\7"+
    "\1\u0114\3\7\12\0\1\7\2\0\3\7\5\0\10\7"+
    "\1\u0115\15\7\2\0\3\7\1\u0115\6\7\12\0\1\7"+
    "\2\0\3\7\5\0\4\7\1\u0116\21\7\2\0\2\7"+
    "\1\u0116\7\7\12\0\1\7\2\0\3\7\5\0\13\7"+
    "\1\u0117\12\7\2\0\4\7\1\u0117\5\7\12\0\1\7"+
    "\2\0\3\7\5\0\6\7\1\u0118\17\7\2\0\12\7"+
    "\12\0\1\7\2\0\3\7\5\0\14\7\1\u0119\11\7"+
    "\2\0\5\7\1\u0119\4\7\61\0\1\u011a\17\0\1\7"+
    "\2\0\3\7\5\0\13\7\1\u011b\12\7\2\0\4\7"+
    "\1\u011b\5\7\12\0\1\7\2\0\3\7\5\0\14\7"+
    "\1\u011c\11\7\2\0\5\7\1\u011c\4\7\12\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u011d\15\7\2\0\3\7"+
    "\1\u011d\6\7\12\0\1\7\2\0\3\7\5\0\16\7"+
    "\1\u011e\7\7\2\0\6\7\1\u011e\3\7\12\0\1\7"+
    "\2\0\3\7\5\0\26\7\2\0\1\u011f\11\7\12\0"+
    "\1\7\2\0\3\7\5\0\22\7\1\u0120\3\7\2\0"+
    "\10\7\1\u0120\1\7\12\0\1\7\2\0\3\7\5\0"+
    "\1\u0121\25\7\2\0\12\7\12\0\1\7\2\0\3\7"+
    "\5\0\3\7\1\u0122\22\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\10\7\1\u0123\15\7\2\0\3\7"+
    "\1\u0123\6\7\12\0\1\7\2\0\3\7\5\0\2\7"+
    "\1\u0124\23\7\2\0\1\7\1\u0124\10\7\12\0\1\7"+
    "\2\0\3\7\5\0\20\7\1\u0125\5\7\2\0\12\7"+
    "\12\0\1\7\2\0\3\7\5\0\21\7\1\u0126\4\7"+
    "\2\0\12\7\22\0\1\u0127\56\0\1\7\2\0\3\7"+
    "\5\0\4\7\1\u0128\21\7\2\0\2\7\1\u0128\7\7"+
    "\12\0\1\7\2\0\3\7\5\0\13\7\1\u0129\12\7"+
    "\2\0\4\7\1\u0129\5\7\12\0\1\7\2\0\3\7"+
    "\5\0\1\u012a\25\7\2\0\12\7\12\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u012b\15\7\2\0\3\7\1\u012b"+
    "\6\7\12\0\1\7\2\0\3\7\5\0\16\7\1\u012c"+
    "\7\7\2\0\6\7\1\u012c\3\7\12\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u012d\15\7\2\0\3\7\1\u012d"+
    "\6\7\12\0\1\7\2\0\3\7\5\0\16\7\1\u012e"+
    "\7\7\2\0\6\7\1\u012e\3\7\12\0\1\7\2\0"+
    "\3\7\5\0\22\7\1\u012f\3\7\2\0\10\7\1\u012f"+
    "\1\7\12\0\1\7\2\0\3\7\5\0\10\7\1\u0130"+
    "\15\7\2\0\3\7\1\u0130\6\7\12\0\1\7\2\0"+
    "\3\7\5\0\1\u0131\25\7\2\0\12\7\12\0\1\7"+
    "\2\0\3\7\5\0\14\7\1\u0132\11\7\2\0\5\7"+
    "\1\u0132\4\7\11\0\1\u0133\67\0\1\7\2\0\3\7"+
    "\5\0\13\7\1\u0134\12\7\2\0\4\7\1\u0134\5\7"+
    "\12\0\1\7\2\0\3\7\5\0\4\7\1\u0135\21\7"+
    "\2\0\2\7\1\u0135\7\7\12\0\1\7\2\0\3\7"+
    "\5\0\14\7\1\u0136\11\7\2\0\5\7\1\u0136\4\7"+
    "\12\0\1\7\2\0\3\7\5\0\4\7\1\u0137\21\7"+
    "\2\0\2\7\1\u0137\7\7\12\0\1\7\2\0\3\7"+
    "\5\0\1\u0138\25\7\2\0\12\7\12\0\1\7\2\0"+
    "\3\7\5\0\10\7\1\u0139\15\7\2\0\3\7\1\u0139"+
    "\6\7\12\0\1\7\2\0\3\7\5\0\10\7\1\u013a"+
    "\15\7\2\0\3\7\1\u013a\6\7\12\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u013b\5\7\2\0\12\7\16\0"+
    "\1\u013c\62\0\1\7\2\0\3\7\5\0\20\7\1\u013d"+
    "\5\7\2\0\12\7\12\0\1\7\2\0\3\7\5\0"+
    "\13\7\1\u013e\12\7\2\0\4\7\1\u013e\5\7\12\0"+
    "\1\7\2\0\3\7\5\0\1\u013f\25\7\2\0\12\7"+
    "\12\0\1\7\2\0\3\7\5\0\14\7\1\u0140\11\7"+
    "\2\0\5\7\1\u0140\4\7\12\0\1\7\2\0\3\7"+
    "\5\0\1\u0141\25\7\2\0\12\7\12\0\1\7\2\0"+
    "\3\7\5\0\21\7\1\u0142\4\7\2\0\12\7\14\0"+
    "\1\u0143\64\0\1\7\2\0\3\7\5\0\4\7\1\u0144"+
    "\21\7\2\0\2\7\1\u0144\7\7\12\0\1\7\2\0"+
    "\3\7\5\0\20\7\1\u0145\5\7\2\0\12\7\12\0"+
    "\1\7\2\0\3\7\5\0\11\7\1\u0146\14\7\2\0"+
    "\12\7\12\0\1\7\2\0\3\7\5\0\3\7\1\u0147"+
    "\22\7\2\0\12\7\15\0\1\u0148\63\0\1\7\2\0"+
    "\3\7\5\0\4\7\1\u0149\21\7\2\0\2\7\1\u0149"+
    "\7\7\12\0\1\7\2\0\3\7\5\0\10\7\1\u014a"+
    "\15\7\2\0\3\7\1\u014a\6\7\11\0\1\u014b\67\0"+
    "\1\7\2\0\3\7\5\0\25\7\1\u014c\2\0\12\7"+
    "\7\0\1\u014d\71\0\1\7\2\0\3\7\5\0\1\u014e"+
    "\25\7\2\0\12\7\24\0\1\u014f\54\0\1\7\2\0"+
    "\3\7\5\0\3\7\1\u0150\22\7\2\0\12\7\23\0"+
    "\1\u0151\55\0\1\7\2\0\3\7\5\0\1\u0152\25\7"+
    "\2\0\12\7\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16280];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\17\1\4\11\1\1\1\0\23\1\1\0"+
    "\30\1\1\0\30\1\1\0\30\1\1\0\26\1\1\0"+
    "\23\1\1\0\23\1\1\0\21\1\1\0\21\1\1\0"+
    "\22\1\1\0\21\1\1\0\20\1\1\0\14\1\1\0"+
    "\13\1\1\0\10\1\1\0\6\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yyline +1, yycolumn +1);
    }

    private Symbol symbol(int type, Object value){
        System.out.println("Token con valor reconocido: " + yytext());
        return new Symbol(type, yyline +1, yycolumn + 1, value);
    }

    private void error (String message){
        System.out.println("Error en la linea: " + (yyline +1) + " columna: " + (yycolumn +1) + " : " + message);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
                 //errores.agregarError(yytext(), yyline +1, yycolumn + 1, "Lexico", "El simbolo no se encuentra definido en el alfabeto.");
            }
          // fall through
          case 49: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 50: break;
          case 3:
            { return symbol(sym.EXCLAM);
            }
          // fall through
          case 51: break;
          case 4:
            { return symbol(sym.COMILL);
            }
          // fall through
          case 52: break;
          case 5:
            { return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 53: break;
          case 6:
            { return symbol(sym.COMMA);
            }
          // fall through
          case 54: break;
          case 7:
            { return symbol(sym.NUMERO       , Integer.parseInt(yytext()));
            }
          // fall through
          case 55: break;
          case 8:
            { return symbol(sym.DOSPUN);
            }
          // fall through
          case 56: break;
          case 9:
            { return symbol(sym.MENQUE);
            }
          // fall through
          case 57: break;
          case 10:
            { return symbol(sym.MAYQUE);
            }
          // fall through
          case 58: break;
          case 11:
            { return symbol(sym.QSTMRK);
            }
          // fall through
          case 59: break;
          case 12:
            { return symbol(sym.COROPN);
            }
          // fall through
          case 60: break;
          case 13:
            { return symbol(sym.CORCLS);
            }
          // fall through
          case 61: break;
          case 14:
            { return symbol(sym.LLAVOP);
            }
          // fall through
          case 62: break;
          case 15:
            { return symbol(sym.LLAVCL);
            }
          // fall through
          case 63: break;
          case 16:
            { return symbol(sym.STRING, yytext());
            }
          // fall through
          case 64: break;
          case 17:
            { return symbol(sym.ID);
            }
          // fall through
          case 65: break;
          case 18:
            { return symbol(sym.TEMA);
            }
          // fall through
          case 66: break;
          case 19:
            { return symbol(sym.CLASE);
            }
          // fall through
          case 67: break;
          case 20:
            { return symbol(sym.FILAS);
            }
          // fall through
          case 68: break;
          case 21:
            { return symbol(sym.INDICE);
            }
          // fall through
          case 69: break;
          case 22:
            { return symbol(sym.NOMBRE);
            }
          // fall through
          case 70: break;
          case 23:
            { return symbol(sym.TRIVIA);
            }
          // fall through
          case 71: break;
          case 24:
            { return symbol(sym.USUARIO);
            }
          // fall through
          case 72: break;
          case 25:
            { return symbol(sym.COLUMNAS);
            }
          // fall through
          case 73: break;
          case 26:
            { return symbol(sym.OPCIONES);
            }
          // fall through
          case 74: break;
          case 27:
            { return symbol(sym.PASSWORD);
            }
          // fall through
          case 75: break;
          case 28:
            { return symbol(sym.ID_TRIVIA);
            }
          // fall through
          case 76: break;
          case 29:
            { return symbol(sym.RESPUESTA);
            }
          // fall through
          case 77: break;
          case 30:
            { return symbol(sym.INSTITUCION);
            }
          // fall through
          case 78: break;
          case 31:
            { return symbol(sym.NUEVA_TRIVIA);
            }
          // fall through
          case 79: break;
          case 32:
            { return symbol(sym.DATOS_USUARI);
            }
          // fall through
          case 80: break;
          case 33:
            { return symbol(sym.LOGIN_USUARI);
            }
          // fall through
          case 81: break;
          case 34:
            { return symbol(sym.TEXTO_VISIBL);
            }
          // fall through
          case 82: break;
          case 35:
            { return symbol(sym.USUARIO_NUEV);
            }
          // fall through
          case 83: break;
          case 36:
            { return symbol(sym.NUEVO_PASSWO);
            }
          // fall through
          case 84: break;
          case 37:
            { return symbol(sym.ELIMINAR_TRI);
            }
          // fall through
          case 85: break;
          case 38:
            { return symbol(sym.TIEMPO_PREGU);
            }
          // fall through
          case 86: break;
          case 39:
            { return symbol(sym.USUA_ANTIGUO);
            }
          // fall through
          case 87: break;
          case 40:
            { return symbol(sym.ELIMINAR_USU);
            }
          // fall through
          case 88: break;
          case 41:
            { return symbol(sym.MODIF_TRIVIA);
            }
          // fall through
          case 89: break;
          case 42:
            { return symbol(sym.MODI_USUARIO);
            }
          // fall through
          case 90: break;
          case 43:
            { return symbol(sym.PARAM_TRIVIA);
            }
          // fall through
          case 91: break;
          case 44:
            { return symbol(sym.AGREGAR_COMP);
            }
          // fall through
          case 92: break;
          case 45:
            { return symbol(sym.REALIZAR_SOL);
            }
          // fall through
          case 93: break;
          case 46:
            { return symbol(sym.ELIMINAR_COM);
            }
          // fall through
          case 94: break;
          case 47:
            { return symbol(sym.ENCABEZADO);
            }
          // fall through
          case 95: break;
          case 48:
            { return symbol(sym.FIN_SOL_REAL);
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
