package com.jbrod.servidorprincipal.analizadores.consultas;
import java_cup.runtime.*;
import com.jbrod.servidorprincipal.trivias.Motor;

import com.jbrod.servidorprincipal.trivias.Componente;
import com.jbrod.servidorprincipal.trivias.Puntuacion;
import com.jbrod.servidorprincipal.trivias.Usuario;
import com.jbrod.servidorprincipal.trivias.Trivia;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.jbrod.servidorprincipal.trivias.componentes.*;
import java.util.LinkedList;


parser code{:
    
    public String resultado = "";
    private Motor motor;

    //Guarda todas las puntuaciones donde buscar
    private LinkedList<Puntuacion> puntuacionesGenerales = new LinkedList<>(); 
    private LinkedList<Puntuacion> puntuacionesResultantes = new LinkedList<>();
    private LinkedList<Puntuacion> puntuacionesResultado = new LinkedList<>();

    // Conectar el parser al escaner
    public ParserCons(LexerCons lex, Motor motor){
        super(lex);
        this.motor = motor;

        for(Puntuacion p : motor.getPuntuaciones()){
            puntuacionesGenerales.add(p);
        }
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }
    }

    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

   private String secureString(Object o){
        if( o != null){
            return o.toString();
        }else{
            return "";
        }
   }
   private String extractNumber(String str) {
        Pattern pattern = Pattern.compile("\\d+"); // Expresión regular para encontrar números
        Matcher matcher = pattern.matcher(str);
        if (matcher.find()) {
            return matcher.group(); // Retorna la primera coincidencia
        }
        return ""; // Retorna vacío si no hay coincidencias
    }

   private int secureInt(Object o){
        String i = secureString(o);
        String x = extractNumber(i);

        System.out.println("A convertir: " + i);
        try{
            int n = Integer.parseInt(x);
            System.out.println("Convertido: " + n);
            return n;
        }catch(NumberFormatException e){
            System.out.println("Hubo un error al convertir un numero.");
            e.printStackTrace();
            return 10;
        }
   }

   private void imprimir(String st){
        System.out.println(st + "\n\n\n\n");
   }

:}

/* - - - - - - - - - - - - - - - - - - - - - - - Terminales - - - - - - - - - - - - - - - - - - - - - - - */
/* Valores */
terminal NUMERO, IDENTIFICADOR;

/* Operadores */
terminal MENQUE, MAYQUE, EXCLAM, DOSPUN, LLAVOP, LLAVCL, COROPN, CORCLS, COMMA, QSTMRK, COMILL, ORSYMB, EQUALS;

/* Operadores logicos */
terminal AND, OR;

/* Reportes */
terminal SELEC_REPORTE, FILTRAR, TIEMPO, USUARIO, PUNTUAC;

/* - - - - - - - - - - - - - - - - - - - - - - No terminales - - - - - - - - - - - - - - - - - - - - - - */
non terminal inicio; 

/* Solicitudes */
non terminal reporte, trivias, filtrar, relac, tiempo, usuario, puntuac, opcion, opcion2; 


/* - - - - - - - - - - - - - - - - - - - - - - - Producciones - - - - - - - - - - - - - - - - - - - - - - - */
    start with inicio; 
    inicio ::= reporte;  




    reporte ::= SELEC_REPORTE trivias filtrar{:
            for(Puntuacion p : puntuacionesResultado){
                resultado += p.obtenerPuntuacion() + "\n";
            }
        :};

    trivias ::= IDENTIFICADOR:tv
                    {:  
                        String trivia = secureString(tv);
                        for(Puntuacion p : puntuacionesResultantes){
                            if(trivia.equals(p.getId_trivia())){
                                puntuacionesResultado.add(p);
                            }
                        } 
                    :} 
                | IDENTIFICADOR:tv COMMA trivias{:  
                    String trivia = secureString(tv);
                    for(Puntuacion p : puntuacionesResultantes){
                        if(trivia.equals(p.getId_trivia())){
                            puntuacionesResultado.add(p);
                        }
                    } 
                :} 
                | /* todas las trivias */ {: puntuacionesResultado = puntuacionesResultantes; :};


    filtrar ::=   FILTRAR opcion opcion2
                | FILTRAR opcion
                | /* nada */ ;

    relac ::= MENQUE        {: RESULT = "<" ; :}
            | MAYQUE        {: RESULT = ">" ; :}
            | EQUALS        {: RESULT = "=" ; :}
            | MENQUE EQUALS {: RESULT = "<="; :}
            | MAYQUE EQUALS {: RESULT = ">="; :};


    tiempo ::= TIEMPO relac:r NUMERO:num{:

        int n = secureInt(num);
    
        for(Puntuacion p : puntuacionesGenerales){
            switch(secureString(r)){
                case "<":
                    if(p.getTiempo_total() < n) { 
                        puntuacionesResultantes.add(p);
                     }   
                    break;

                case ">":
                    if(p.getTiempo_total() > n) { 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                case "<=":
                    if(p.getTiempo_total() <= n){ 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                case ">=":
                    if(p.getTiempo_total() >= n){ 
                        puntuacionesResultantes.add(p); 
                    }
                    break;

                default:
                    if(p.getTiempo_total() == n){ 
                        puntuacionesResultantes.add(p);
                    }
            }
        }

    :};

    usuario ::= USUARIO EQUALS COMILL IDENTIFICADOR:usuario COMILL{:
        String u = secureString(usuario);    
        for(Puntuacion p : puntuacionesGenerales){
                if(u.equals(p.getId_usuario())){
                    puntuacionesResultantes.add(p);
                }
            }
        :}; 

    puntuac ::= PUNTUAC relac:r NUMERO:num{:
        int n = secureInt(num);
        //LinkedList<Puntuacion> pn = new LinkedList<>(); 
        for(Puntuacion p : puntuacionesGenerales){
            switch(secureString(r)){
            
                case "<":
                    if(p.getPuntuacion() < n) { puntuacionesResultantes.add(p); }
                    break;

                case ">":
                    if(p.getPuntuacion() > n) { puntuacionesResultantes.add(p); }
                    break;

                case "<=":
                    if(p.getPuntuacion() <= n){ puntuacionesResultantes.add(p); }
                    break;

                case ">=":
                    if(p.getPuntuacion() >= n){ puntuacionesResultantes.add(p); }
                    break;

                default:
                    if(p.getPuntuacion() == n){ puntuacionesResultantes.add(p);}
            }
        }

        //RESULT = pn;
    :};





    opcion ::= tiempo
            | usuario
            | puntuac;



    opcion2 ::= AND opcion
            | OR  opcion
            | AND opcion opcion2
            | OR  opcion opcion2;

