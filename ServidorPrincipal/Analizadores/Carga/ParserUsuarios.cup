
    package com.jbrod.servidorprincipal.analizadores.carga.usuarios;
    import java_cup.runtime.*;
    import com.jbrod.servidorprincipal.trivias.Motor;

    import com.jbrod.servidorprincipal.trivias.*;




    parser code{:
        
        public String resultado = "";

        private Motor motor; 

        // Conectar el parser al escaner
        public ParserUsuarios(LexerUsuarios lex, Motor motor){
            super(lex);
            this.motor = motor;
        }

        public void syntax_error(Symbol cur_token){
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("Ya no se esperaba ningun simbolo");
                //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
            }else{
                //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
            }
        }

        /*public void unrecovered_syntax_error(Symbol cur_token) {
            System.out.println("Error irrecuperable sobrecargado");
        }*/

    private String secureString(Object o){
            if( o != null){
                return o.toString();
            }else{
                return "";
            }
    }

    private int secureInt(Object o){
            String i = secureString(o);
            //System.out.println("A convertir: " + i);
            try{
                int n = Integer.parseInt(i);
                //System.out.println("Convertido: " + n);
                return n;
            }catch(NumberFormatException e){
                //System.out.println("Hubo un error al convertir un numero.");
                return 10;
            }
    }

    private void imprimir(String st){
            System.out.println(st + "\n\n\n\n");
    }

    :}

    /* - - - - - - - - - - - - - - - - - - - - - - - Terminales - - - - - - - - - - - - - - - - - - - - - - - */
    /* Estructuras */
    terminal ENCABEZADO, TRIVIA;
    terminal IDENTIFICADOR, STRING, NUMERO;

    /* Simbolos */
    terminal MENQUE, MAYQUE, EXCLAM, DOSPUN, LLAVOP, LLAVCL, COROPN, CORCLS, PAROPN, PARCLS, COMMA, QSTMRK, COMILL, ORSYMB;

    /* Atributos de las trivias */
    terminal ID_TRI, NOMBRE, CREADO, FECHA, TIEMPO, TEMA;

    /* Componentes */
    terminal CAMPO_T, AREA_TE, CHECKBO, RADIO, FICHERO, COMBO;

    /* Parametros de componentes */
    terminal TRIVIAS, PARAM_TRI, PARAM_IND, PARAM_TEX, PARAM_RES, PARAM_OPC, PARAM_FIL, PARAM_COL;



    /* Usuarios */
    terminal USUARIOS, USUARIO, PASSWORD, INSTITUC;

    /* Puntuaciones */
    terminal PUNTUACIONES, PUNTUACION_T, PUNTEO;

    /* - - - - - - - - - - - - - - - - - - - - - - No terminales - - - - - - - - - - - - - - - - - - - - - - */
    non terminal inicio;

    /* Trivias */
    non terminal trivia, trivias, multiples_trivias;

    /* Usuarios */
    non terminal usuario, multiples_usuarios, usuarios;

    /* Puntuaciones */
    non terminal puntuacion, multiples_puntuaciones, multiples_puntuaciones2, puntuaciones;



    /* Componentes */
    non terminal componente_trivia, componentes_trivia, campo_t, area_te, checkbo, radio, fichero, combo;

    /* Auxiliares */
    non terminal id_st;
    non terminal opciones; 
    non terminal respuesta;

    non terminal operacion, op; 

    /* - - - - - - - - - - - - - - - - - - - - - - - Producciones - - - - - - - - - - - - - - - - - - - - - - - */
    start with inicio;
    inicio ::= usuarios;

    id_st     ::= IDENTIFICADOR:id {: RESULT = id; :} 
                    | STRING:st {: RESULT = st; :};










    /* - USUARIOS - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

    usuario ::= MENQUE USUARIO DOSPUN IDENTIFICADOR:id MAYQUE LLAVOP
                    COMILL PASSWORD COMILL DOSPUN id_st:ps COMMA
                    COMILL NOMBRE   COMILL DOSPUN id_st:nm COMMA
                    COMILL INSTITUC COMILL DOSPUN id_st:in 
                LLAVCL{:
                    resultado += "Usuario nuevo: " +  id.toString() + " " + ps.toString() + " " + nm.toString() + " " + in.toString () + "\n";
                    Usuario usuario = new Usuario(secureString(id), secureString(ps), secureString(nm), secureString(in));
                    imprimir(motor.agregarUsuario(usuario));
                :};

    multiples_usuarios ::= usuario multiples_usuarios | /* */;

    usuarios ::= USUARIOS PAROPN 
                    multiples_usuarios
                PARCLS;

