
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.jbrod.apptrivias.analizadores;

import java_cup.runtime.*;
import trivias.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\015" +
    "\003\000\002\015\003\000\002\003\044\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\002\000\002\007" +
    "\040\000\002\010\054\000\002\011\046\000\002\012\046" +
    "\000\002\013\032\000\002\014\046\000\002\016\003\000" +
    "\002\016\005\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\006\002\ufffb\005\004\001\002\000\004\021" +
    "\012\001\002\000\006\002\ufffb\005\004\001\002\000\004" +
    "\002\000\001\002\000\004\002\010\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffc\001\002\000\004\025\013" +
    "\001\002\000\004\027\014\001\002\000\004\025\015\001" +
    "\002\000\004\014\016\001\002\000\004\006\017\001\002" +
    "\000\004\025\020\001\002\000\004\030\021\001\002\000" +
    "\004\025\022\001\002\000\004\014\023\001\002\000\006" +
    "\006\025\007\024\001\002\000\016\011\ufffe\016\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\026\ufffe\001\002\000\016\011\uffff" +
    "\016\uffff\022\uffff\023\uffff\025\uffff\026\uffff\001\002\000" +
    "\004\025\027\001\002\000\004\031\030\001\002\000\004" +
    "\025\031\001\002\000\004\014\032\001\002\000\006\006" +
    "\025\007\024\001\002\000\004\025\034\001\002\000\004" +
    "\032\035\001\002\000\004\025\036\001\002\000\004\014" +
    "\037\001\002\000\006\006\025\007\024\001\002\000\004" +
    "\025\041\001\002\000\004\033\042\001\002\000\004\025" +
    "\043\001\002\000\004\014\044\001\002\000\006\006\025" +
    "\007\024\001\002\000\004\025\046\001\002\000\004\034" +
    "\047\001\002\000\004\025\050\001\002\000\004\014\051" +
    "\001\002\000\006\006\025\007\024\001\002\000\006\011" +
    "\060\022\ufff3\001\002\000\006\011\ufff7\022\ufff7\001\002" +
    "\000\006\011\ufff5\022\ufff5\001\002\000\006\011\ufff6\022" +
    "\ufff6\001\002\000\006\011\ufff8\022\ufff8\001\002\000\006" +
    "\011\ufff9\022\ufff9\001\002\000\016\035\067\036\071\037" +
    "\070\040\066\041\073\042\072\001\002\000\006\011\060" +
    "\022\ufff3\001\002\000\004\022\064\001\002\000\006\011" +
    "\ufffa\022\ufffa\001\002\000\006\002\ufffd\005\ufffd\001\002" +
    "\000\004\022\ufff4\001\002\000\004\014\336\001\002\000" +
    "\004\014\302\001\002\000\004\014\240\001\002\000\004" +
    "\014\170\001\002\000\004\014\122\001\002\000\004\014" +
    "\074\001\002\000\004\006\075\001\002\000\004\012\076" +
    "\001\002\000\004\015\077\001\002\000\004\025\100\001" +
    "\002\000\004\043\101\001\002\000\004\025\102\001\002" +
    "\000\004\014\103\001\002\000\004\006\104\001\002\000" +
    "\004\023\105\001\002\000\004\025\106\001\002\000\004" +
    "\044\107\001\002\000\004\025\110\001\002\000\004\014" +
    "\111\001\002\000\006\006\025\007\024\001\002\000\004" +
    "\023\113\001\002\000\004\025\114\001\002\000\004\045" +
    "\115\001\002\000\004\025\116\001\002\000\004\014\117" +
    "\001\002\000\006\006\025\007\024\001\002\000\004\016" +
    "\121\001\002\000\006\011\uffee\022\uffee\001\002\000\004" +
    "\006\123\001\002\000\004\012\124\001\002\000\004\015" +
    "\125\001\002\000\004\025\126\001\002\000\004\043\127" +
    "\001\002\000\004\025\130\001\002\000\004\014\131\001" +
    "\002\000\004\006\132\001\002\000\004\023\133\001\002" +
    "\000\004\025\134\001\002\000\004\044\135\001\002\000" +
    "\004\025\136\001\002\000\004\014\137\001\002\000\006" +
    "\006\025\007\024\001\002\000\004\023\141\001\002\000" +
    "\004\025\142\001\002\000\004\045\143\001\002\000\004" +
    "\025\144\001\002\000\004\014\145\001\002\000\006\006" +
    "\025\007\024\001\002\000\004\023\147\001\002\000\004" +
    "\025\150\001\002\000\004\046\151\001\002\000\004\025" +
    "\152\001\002\000\004\014\153\001\002\000\006\006\025" +
    "\007\024\001\002\000\010\016\uffec\023\uffec\026\166\001" +
    "\002\000\004\023\157\001\002\000\006\016\uffea\023\uffea" +
    "\001\002\000\004\025\160\001\002\000\004\047\161\001" +
    "\002\000\004\025\162\001\002\000\004\014\163\001\002" +
    "\000\006\006\025\007\024\001\002\000\004\016\165\001" +
    "\002\000\006\011\uffed\022\uffed\001\002\000\006\006\025" +
    "\007\024\001\002\000\006\016\uffeb\023\uffeb\001\002\000" +
    "\004\006\171\001\002\000\004\012\172\001\002\000\004" +
    "\015\173\001\002\000\004\025\174\001\002\000\004\043" +
    "\175\001\002\000\004\025\176\001\002\000\004\014\177" +
    "\001\002\000\004\006\200\001\002\000\004\023\201\001" +
    "\002\000\004\025\202\001\002\000\004\044\203\001\002" +
    "\000\004\025\204\001\002\000\004\014\205\001\002\000" +
    "\006\006\025\007\024\001\002\000\004\023\207\001\002" +
    "\000\004\025\210\001\002\000\004\045\211\001\002\000" +
    "\004\025\212\001\002\000\004\014\213\001\002\000\006" +
    "\006\025\007\024\001\002\000\004\023\215\001\002\000" +
    "\004\025\216\001\002\000\004\046\217\001\002\000\004" +
    "\025\220\001\002\000\004\014\221\001\002\000\006\006" +
    "\025\007\024\001\002\000\004\023\223\001\002\000\004" +
    "\025\224\001\002\000\004\050\225\001\002\000\004\025" +
    "\226\001\002\000\004\014\227\001\002\000\006\006\025" +
    "\007\024\001\002\000\004\023\231\001\002\000\004\025" +
    "\232\001\002\000\004\051\233\001\002\000\004\025\234" +
    "\001\002\000\004\014\235\001\002\000\006\006\025\007" +
    "\024\001\002\000\004\016\237\001\002\000\006\011\ufff1" +
    "\022\ufff1\001\002\000\004\006\241\001\002\000\004\012" +
    "\242\001\002\000\004\015\243\001\002\000\004\025\244" +
    "\001\002\000\004\043\245\001\002\000\004\025\246\001" +
    "\002\000\004\014\247\001\002\000\004\006\250\001\002" +
    "\000\004\023\251\001\002\000\004\025\252\001\002\000" +
    "\004\044\253\001\002\000\004\025\254\001\002\000\004" +
    "\014\255\001\002\000\006\006\025\007\024\001\002\000" +
    "\004\023\257\001\002\000\004\025\260\001\002\000\004" +
    "\045\261\001\002\000\004\025\262\001\002\000\004\014" +
    "\263\001\002\000\006\006\025\007\024\001\002\000\004" +
    "\023\265\001\002\000\004\025\266\001\002\000\004\046" +
    "\267\001\002\000\004\025\270\001\002\000\004\014\271" +
    "\001\002\000\006\006\025\007\024\001\002\000\004\023" +
    "\273\001\002\000\004\025\274\001\002\000\004\047\275" +
    "\001\002\000\004\025\276\001\002\000\004\014\277\001" +
    "\002\000\006\006\025\007\024\001\002\000\004\016\301" +
    "\001\002\000\006\011\ufff0\022\ufff0\001\002\000\004\006" +
    "\303\001\002\000\004\012\304\001\002\000\004\015\305" +
    "\001\002\000\004\025\306\001\002\000\004\043\307\001" +
    "\002\000\004\025\310\001\002\000\004\014\311\001\002" +
    "\000\004\006\312\001\002\000\004\023\313\001\002\000" +
    "\004\025\314\001\002\000\004\044\315\001\002\000\004" +
    "\025\316\001\002\000\004\014\317\001\002\000\006\006" +
    "\025\007\024\001\002\000\004\023\321\001\002\000\004" +
    "\025\322\001\002\000\004\045\323\001\002\000\004\025" +
    "\324\001\002\000\004\014\325\001\002\000\006\006\025" +
    "\007\024\001\002\000\004\023\327\001\002\000\004\025" +
    "\330\001\002\000\004\046\331\001\002\000\004\025\332" +
    "\001\002\000\004\014\333\001\002\000\006\006\025\007" +
    "\024\001\002\000\004\016\335\001\002\000\006\011\ufff2" +
    "\022\ufff2\001\002\000\004\006\337\001\002\000\004\012" +
    "\340\001\002\000\004\015\341\001\002\000\004\025\342" +
    "\001\002\000\004\043\343\001\002\000\004\025\344\001" +
    "\002\000\004\014\345\001\002\000\004\006\346\001\002" +
    "\000\004\023\347\001\002\000\004\025\350\001\002\000" +
    "\004\044\351\001\002\000\004\025\352\001\002\000\004" +
    "\014\353\001\002\000\006\006\025\007\024\001\002\000" +
    "\004\023\355\001\002\000\004\025\356\001\002\000\004" +
    "\045\357\001\002\000\004\025\360\001\002\000\004\014" +
    "\361\001\002\000\006\006\025\007\024\001\002\000\004" +
    "\023\363\001\002\000\004\025\364\001\002\000\004\046" +
    "\365\001\002\000\004\025\366\001\002\000\004\014\367" +
    "\001\002\000\006\006\025\007\024\001\002\000\004\023" +
    "\371\001\002\000\004\025\372\001\002\000\004\047\373" +
    "\001\002\000\004\025\374\001\002\000\004\014\375\001" +
    "\002\000\006\006\025\007\024\001\002\000\004\016\377" +
    "\001\002\000\006\011\uffef\022\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\010\002\006\003\004\004\005\001\001\000" +
    "\002\001\001\000\006\003\004\004\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\051\001\001\000\022\005\060" +
    "\006\061\007\062\010\056\011\055\012\052\013\054\014" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\060\006\064\007\062\010\056\011\055" +
    "\012\052\013\054\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\153\016\155\017\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\153" +
    "\016\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\153\016\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\153\016\155\017\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\153\016\155\017\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\153\016\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\317\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\153\016\155\017\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\153\016\155\017\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\153\016\375\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public String resultado = "";

    // Conectar el parser al escaner
    public Parser(Lexer lex){
        super(lex);
    }

    public void syntax_error(Symbol cur_token){
        System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
        System.out.println("Linea " + cur_token.left);
        System.out.println("Columna " + cur_token.right);
        if (expected_token_ids().isEmpty()) {
            System.out.println("Ya no se esperaba ningun simbolo");
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Ya no se esperaba ningun simbolo." );
        }else{
            //reporteErrores.agregarError(symbl_name_from_id(cur_token.sym),cur_token.left,cur_token.right, "Sintactico", "Se esperaba otro simbolo." );
        }
    }

    /*public void unrecovered_syntax_error(Symbol cur_token) {
        System.out.println("Error irrecuperable sobrecargado");
    }*/

   private String secureString(Object o){
        if( o != null){
            return o.toString();
        }else{
            return "";
        }
   }

   private int secureInt(Object o){
        String i = secureString(o);
        //System.out.println("A convertir: " + i);
        try{
            int n = Integer.parseInt(i);
            //System.out.println("Convertido: " + n);
            return n;
        }catch(NumberFormatException e){
            //System.out.println("Hubo un error al convertir un numero.");
            return 10;
        }
   }

   private void imprimir(String st){
        System.out.println(st + "\n\n\n\n");
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= trivias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // id_st ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // id_st ::= STRING 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_st",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // trivia ::= TRIVIA PAROPN COMILL ID_TRI COMILL DOSPUN IDENTIFICADOR COMILL NOMBRE COMILL DOSPUN id_st COMILL CREADO COMILL DOSPUN id_st COMILL FECHA COMILL DOSPUN id_st COMILL TIEMPO COMILL DOSPUN id_st COMILL TEMA COMILL DOSPUN id_st componentes_trivia PARCLS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-27)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-27)).value;
		int nmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-22)).right;
		Object nm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-22)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		Object cd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object fc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trivia",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-33)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // trivias ::= trivia trivias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trivias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // trivias ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trivias",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // componente_trivia ::= campo_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // componente_trivia ::= area_te 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // componente_trivia ::= checkbo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // componente_trivia ::= radio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // componente_trivia ::= fichero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // componente_trivia ::= combo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componente_trivia",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // componentes_trivia ::= componente_trivia componentes_trivia 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentes_trivia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // componentes_trivia ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("componentes_trivia",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // campo_t ::= MENQUE CAMPO_T DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st COMMA COMILL PARAM_RES COMILL DOSPUN respuesta LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-26)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new CampoTexto(secureString(id), secureString(tri), secureInt(in), secureString(tx), secureString(rs));
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo_t",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-29)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // area_te ::= MENQUE AREA_TE DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st COMMA COMILL PARAM_RES COMILL DOSPUN respuesta COMMA COMILL PARAM_FIL COMILL DOSPUN id_st COMMA COMILL PARAM_COL COMILL DOSPUN id_st LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-38)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-38)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-38)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-31)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-31)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new AreaTexto(secureString(id), secureString(tri), secureInt(in), secureString(tx), secureString(rs), secureInt(fl), secureInt(cl)); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("area_te",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-41)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // checkbo ::= MENQUE CHECKBO DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st COMMA COMILL PARAM_RES COMILL DOSPUN respuesta COMMA COMILL PARAM_OPC COMILL DOSPUN opciones LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Checkbox(secureString(id), secureString(tri), secureInt(in), secureString(tx), secureString(rs), secureString(op));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("checkbo",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-35)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // radio ::= MENQUE RADIO DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st COMMA COMILL PARAM_RES COMILL DOSPUN respuesta COMMA COMILL PARAM_OPC COMILL DOSPUN opciones LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Radio(secureString(id), secureString(tri), secureInt(in), secureString(tx), secureString(rs), secureString(op));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("radio",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-35)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fichero ::= MENQUE FICHERO DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-20)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-20)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Fichero(secureString(id), secureString(tri), secureInt(in), secureString(tx),"sin respuesta");
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fichero",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-23)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // combo ::= MENQUE COMBO DOSPUN IDENTIFICADOR MAYQUE LLAVOP COMILL PARAM_TRI COMILL DOSPUN IDENTIFICADOR COMMA COMILL PARAM_IND COMILL DOSPUN id_st COMMA COMILL PARAM_TEX COMILL DOSPUN id_st COMMA COMILL PARAM_RES COMILL DOSPUN respuesta COMMA COMILL PARAM_OPC COMILL DOSPUN opciones LLAVCL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-32)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-32)).value;
		int trileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).left;
		int triright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-25)).right;
		Object tri = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-25)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Combo(secureString(id), secureString(tri), secureInt(in), secureString(tx), secureString(rs), secureString(op));
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("combo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-35)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opciones ::= id_st 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opciones ::= id_st ORSYMB opciones 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opcsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opcsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object opcs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op.toString() + "|" + opcs.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // respuesta ::= opciones 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("respuesta",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
